{"total":102,"pageSize":10,"pageCount":11,"data":[{"title":"JDK设计模式（一）单例模式","slug":"yuque/JDK设计模式（一）单例模式","date":"2015-01-17T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/design-pattern/jdk-singleton-pattern.json","excerpt":"单例模式确保一个类只有一个实例，并提供一个全局访问点。其类图如下所示。本文主要从饿汉式，懒汉式，懒汉式改进，来讲解单例模式。1、饿汉式单例饿汉式单例类是在 Java语言里实现得最为简便的单例类。在类被加载时，就会将自己实例化。public class Singleton {    private static Singleton uniqueInstance = new Singleton();    private Singleton() {        // Exists only to defeat instantiation.    }    publ","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"design-pattern","path":"api/categories/design-pattern.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"设计模式","path":"api/tags/设计模式.json"}]},{"title":"JDK中的设计模式","slug":"yuque/JDK中的设计模式","date":"2015-01-02T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/design-pattern/jdk-design-pattern.json","excerpt":"本文主要是归纳了 JDK中所包含的设计模式，包括作用和其设计类图。一、设计模式的作用 1. 反复出现问题的解决方案 2. 增强软件的灵活性 3. 适应软件不断变化二、设计模式的七大原则 1. 开闭原则 OCP（Open Close    Principle），一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。 2. 里氏代换原则 LSP（Liskov    Substitution    Principle），子类可以扩展父类的功能，但不能改变父类原有的功能 3. 依赖倒转原则    DIP（Dependence    Inversion    ","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"design-pattern","path":"api/categories/design-pattern.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"设计模式","path":"api/tags/设计模式.json"}]}]}