{"total":102,"pageSize":10,"pageCount":11,"data":[{"title":"限流熔断降级区别","slug":"yuque/限流熔断降级区别","date":"2021-08-20T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/stability/stability-diff.json","excerpt":"熔断、限流、降级都是保持系统稳定运行的策略，但针对的场景有所不同，常用框架有hystrix 和 sentinel限流限流是指上游服务对本服务请求 QPS超过阙值时，通过一定的策略(如延迟处理、拒绝处理)对上游服务的请求量进行限制，以保证本服务不被压垮，从而持续提供稳定服务。常见的限流算法有滑动窗口、令牌桶、漏桶等如上图，当 服务 B 对 服务 D请求过多时，服务 D可以放弃一部分请求，保证自身服务的稳定常见限流算法https://www.cnblogs.com/taromilk/p/11751211.html限流规则参数说明：限流类型：分为 HSF 限流和 H","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"stability","path":"api/categories/stability.json"}],"tags":[{"name":"Stability","path":"api/tags/Stability.json"},{"name":"Limit","path":"api/tags/Limit.json"},{"name":"Fuse","path":"api/tags/Fuse.json"},{"name":"Degradation","path":"api/tags/Degradation.json"}]},{"title":"APISIX","slug":"yuque/APISIX","date":"2021-07-31T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/gateway/apisix.json","excerpt":"1、概述APISIX 是基于 OpenResty+ etcd实现的云原生、高性能、可扩展的微服务API 网关。它是国人开源，目前已经进入Apache 进行孵化。 * OpenResty：通过 Lua 扩展   Nginx 实现的可伸缩的 Web   平台。 * etcd：Key/Value 存储系统。Apache APISIX是一个动态、实时、高性能的 API网关，提供负载均衡、动态上游、灰度发布、服务熔断、身份认证、可观测性等丰富的流量管理功能。ApacheAPISIX不仅拥有众多实用的插件，而且支持插件动态变更和热插拔。APISIX通过插件机制，提供了动","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"gateway","path":"api/categories/gateway.json"}],"tags":[{"name":"Gateway","path":"api/tags/Gateway.json"}]},{"title":"TMC多级缓存","slug":"yuque/TMC多级缓存","date":"2021-07-31T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/cache/tmc.json","excerpt":"> TMC (Transparent> Multilevel Cache)> 在通用“分布式缓存解决方案（如> CodisProxy + Redis> ）”基础上，增加了以下功能：> >  * 应用层热点探测>  * 应用层本地缓存>  * 应用层缓存命中统计> > 以帮助应用层解决缓存使用过程中出现的热点访问问题使用有赞服务的电商商家数量和类型很多，商家会不定期做一些“商品秒杀”、“商品推广”活动，导致“营销活动”、“商品详情”、“交易下单”等链路应用出现缓存热点访问 的情况： * 活动时间、活动类型、活动商品之类的信息不可预期，导致   缓存热点访问","keywords":null,"cover":["/images/c3.jpg"],"content":null,"raw":null,"categories":[{"name":"cache","path":"api/categories/cache.json"}],"tags":[{"name":"Cache","path":"api/tags/Cache.json"},{"name":"TMC","path":"api/tags/TMC.json"}]},{"title":"HBase（四）读优化","slug":"yuque/HBase（四）读优化","date":"2021-06-24T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/hbase/hbase-read-optimize.json","excerpt":"> https://blog.csdn.net/weixin_40954192/article/details/106942029LSM 存储引擎是在B+树的基础上衍生过来的，目的就是为了在读和写之间，提高写的性能。所以，LSM树的弊端也由此可见，对读并不是很友好，所以，针对LSM 树，有后续compact，布隆过滤器，blockCache等优化方式。来弥补对读的查询。LSM 树的索引一般由 2部分构成，一部分是内存部分，一部分是磁盘部分。内存部分采用跳跃表来维护一个有序的KV 集合,也就是memstore.随着内存不断数据写入，一旦内存占用超过一定的阈值，就把内存部分数","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"Redis线程模型","slug":"yuque/Redis线程模型","date":"2021-06-23T16:00:00.000Z","updated":"2022-04-02T16:49:05.000Z","comments":true,"path":"api/articles/cache/redis-thread-model.json","excerpt":"一、Redis 有多快？Redis 是基于内存运行的高性能K-V数据库，官方提供的测试报告是单机可以支持约10w/s 的 QPS二、Redis 为什么这么快？（1）完全基于内存，数据存在内存中，绝大部分请求是纯粹的内存操作，非常快速，跟传统的磁盘文件数据存储相比，避免了通过磁盘IO 读取到内存这部分的开销。（2）数据结构简单，对数据操作也简单。Redis中的数据结构是专门进行设计的，每种数据结构都有一种或多种数据结构来支持。Redis正是依赖这些灵活的数据结构，来提升读取和写入的性能。（3）采用单线程，省去了很多上下文切换的时间以及CPU消耗，不存在竞争条件","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"cache","path":"api/categories/cache.json"},{"name":"redis","path":"api/categories/redis.json"}],"tags":[{"name":"Cache","path":"api/tags/Cache.json"},{"name":"Redis","path":"api/tags/Redis.json"}]},{"title":"HBase（三）LSM树","slug":"yuque/HBase（三）LSM树","date":"2021-06-22T16:00:00.000Z","updated":"2022-09-04T14:05:03.094Z","comments":true,"path":"api/articles/hbase/hbase-lsm.json","excerpt":"> https://zhuanlan.zhihu.com/p/181498475LSM树(Log-Structured-Merge-Tree)的名字往往会给初识者一个错误的印象，事实上，LSM树并不像B+树、红黑树一样是一颗严格的树状数据结构，它其实是一种存储结构，目前HBase、LevelDB、RocksDB这些 NoSQL 存储都是采用的 LSM树。LSM树的核心特点是利用顺序写来提高写性能，但因为分层(此处分层是指的分为内存和文件两部分)的设计会稍微降低读性能，但是通过牺牲小部分读性能换来高性能写，使得LSM 树成为非常流行的存储结构。数据库存储有两种数据结构，一","keywords":null,"cover":["/images/c3.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"Redis存储结构","slug":"yuque/Redis存储结构","date":"2021-06-22T16:00:00.000Z","updated":"2022-04-02T16:49:05.000Z","comments":true,"path":"api/articles/cache/redis-storage-structure.json","excerpt":"前言Redis作为一款高性能数据库，表现在：它接收到一个键值对操作后，能以微秒级别的速度找到数据，并快速完成操作。其高性能得奥秘来缘于以下两点： * Redis 是内存数据库，   所有操作都在内存上完成，内存的访问速度本身就很快 * Reids   通过高效的数据结构来组织数据。本章节可以让你在最短的时间了解如下内容： * Redis 支持五大数据类型 * Redis 组织 Key-Value   数据结构 * Redis5 大值类型数据存储结构一、五大数据类型 * String(字符串) * List(列表) * Set(集合) * Hash","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"cache","path":"api/categories/cache.json"},{"name":"redis","path":"api/categories/redis.json"}],"tags":[{"name":"Cache","path":"api/tags/Cache.json"},{"name":"Redis","path":"api/tags/Redis.json"}]},{"title":"HBase 读优化","slug":"yuque/HBase 读优化","date":"2021-06-20T16:00:00.000Z","updated":"2022-04-02T16:49:05.000Z","comments":true,"path":"api/articles/hbase/hbase-read-optimize.json","excerpt":"> https://blog.csdn.net/weixin_40954192/article/details/106942029LSM 存储引擎是在B+树的基础上衍生过来的，目的就是为了在读和写之间，提高写的性能。所以，LSM树的弊端也由此可见，对读并不是很友好，所以，针对LSM 树，有后续compact，布隆过滤器，blockCache等优化方式。来弥补对读的查询。LSM 树的索引一般由 2部分构成，一部分是内存部分，一部分是磁盘部分。内存部分采用跳跃表来维护一个有序的KV 集合,也就是memstore.随着内存不断数据写入，一旦内存占用超过一定的阈值，就把内存部分数","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"HBase 系统架构","slug":"yuque/HBase 系统架构","date":"2021-06-20T16:00:00.000Z","updated":"2022-04-02T16:49:05.000Z","comments":true,"path":"api/articles/hbase/hbase-architecture.json","excerpt":"本文基本是对 MapR 的官网文章AnIn-Depth Look at theHBaseArchitecture的翻译HBase 存储架构HBase 采用Master/Slave架构搭建集群，它隶属于 Hadoop生态系统，由一下类型节点组成：HMaster节点、HRegionServer节点、ZooKeeper集群，而在底层，它将数据存储于 HDFS中，因而涉及到 HDFS 的NameNode、DataNode等，总体结构如下：HMaster 节点 * 管理   HRegionServer，实现其负载均衡。 * 管理和分配 HRegion，比","keywords":null,"cover":["/images/c3.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"Redis分布式锁","slug":"yuque/Redis分布式锁","date":"2021-06-20T16:00:00.000Z","updated":"2022-04-03T04:07:21.000Z","comments":true,"path":"api/articles/cache/redis-lock.json","excerpt":"> 分布式锁为解决分布式系统中多个应用同时访问同一个资源的问题。分布式锁的使用场景一般是在两个场景下会防止对同一个资源的重复访问 * 提升效率比如多个节点计算同一批任务，如果某个任务已经有节点在计算了，那其他节点就不用重复计算了，以免浪费计算资源。不过重复计算也没事，不会造成其他更大的损失，允许偶尔的失败。 * 保证正确性这种情况对锁的要求就很高了，如果重复计算，会对正确性造成影响，不允许失败。分布式锁支持的特性在这个技术不断更新迭代的情况下，分布式这个概念，在企业中的权重越来越高。谈及分布式时，不可避免一定会提到分布式锁，现阶段分布式锁的实现方式主流的有几","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"cache","path":"api/categories/cache.json"},{"name":"redis","path":"api/categories/redis.json"}],"tags":[{"name":"Cache","path":"api/tags/Cache.json"},{"name":"Redis","path":"api/tags/Redis.json"}]}]}