{"total":99,"pageSize":10,"pageCount":10,"data":[{"title":"Redis（四）存储结构","slug":"yuque/Redis（四）存储结构","date":"2020-06-24T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/redis/redis-storage-structure.json","excerpt":"前言Redis作为一款高性能数据库，表现在：它接收到一个键值对操作后，能以微秒级别的速度找到数据，并快速完成操作。其高性能得奥秘来缘于以下两点： * Redis 是内存数据库，   所有操作都在内存上完成，内存的访问速度本身就很快 * Reids   通过高效的数据结构来组织数据。本章节可以让你在最短的时间了解如下内容： * Redis 支持五大数据类型 * Redis 组织 Key-Value   数据结构 * Redis5 大值类型数据存储结构一、五大数据类型 * String(字符串) * List(列表) * Set(集合) * Hash","keywords":null,"cover":["/images/c3.jpg"],"content":null,"raw":null,"categories":[{"name":"cache","path":"api/categories/cache.json"},{"name":"redis","path":"api/categories/redis.json"}],"tags":[{"name":"Cache","path":"api/tags/Cache.json"},{"name":"Redis","path":"api/tags/Redis.json"}]},{"title":"Redis（三）部署Sentinel高可用集群","slug":"yuque/Redis（三）部署Sentinel高可用集群","date":"2020-06-23T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/redis/redis-sentinel.json","excerpt":"> 大家一定非常熟悉如何利用 Docker> 启动单个 Redis> 容器用于开发环境，本文将介绍如何利用> Docker Compose> 模板在本机和云端部署基于> Sentinel 的高可用 Redis> 3 集群。Redis 集群可以在一组 redis节点之间实现高可用性和sharding。今天我们重点围绕master-slave的高可用模式来进行讨论，在集群中会有 1个 master 和多个 slave节点。当 master节点失效时，应选举出一个 slave节点作为新的 master。然而Redis本身(包括它的很多客户端)没有实现自动故障发现并","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"cache","path":"api/categories/cache.json"},{"name":"redis","path":"api/categories/redis.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"},{"name":"Cache","path":"api/tags/Cache.json"},{"name":"Redis","path":"api/tags/Redis.json"}]},{"title":"Redis（二）ShardedJedis一致性哈希","slug":"yuque/Redis（二）ShardedJedis一致性哈希","date":"2020-06-23T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/redis/redis-consistent-hashing.json","excerpt":"本文主要介绍一致性哈希的概念，以及在Redis 中的ShardedJedis一致性哈希实现原理1、非一致性哈希在讨论一致性哈希之前，先认识下”非一致性哈希”，例如HashMap。当使用 HashMap 时，key被均匀地映射到数组之上，映射方法就是利用key 的 hash与数组长度取模(通过&运算)。当 put 的数据超过负载因子loadFactor×2Len时，HashMap 会按照 2被的容量扩容。新 put进来的数据会通过与新数组的长度取模的方式进行映射。那之前已经映射的数据该怎么办？通过查看 HashMap 代码的resize方法会发现，每次","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"cache","path":"api/categories/cache.json"},{"name":"redis","path":"api/categories/redis.json"}],"tags":[{"name":"Cache","path":"api/tags/Cache.json"},{"name":"Redis","path":"api/tags/Redis.json"}]},{"title":"Redis（一）基础数据类型","slug":"yuque/Redis（一）基础数据类型","date":"2020-06-22T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/redis/redis-introduce.json","excerpt":"REmote DIctionaryServer(Redis) 是一个由Salvatore Sanfilippo写的 key-value存储系统。Redis 是一个开源的使用ANSI C 语言编写、遵守 BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。它通常被称为数据结构服务器，因为值（value）可以是字符串(String),哈希(Map), 列表(list),集合(sets) 和有序集合(sortedsets)等类型。Redis 简介Redis 是完全开源免费的，遵守BSD 协议，是一个高性能的k","keywords":null,"cover":["/images/c3.jpg"],"content":null,"raw":null,"categories":[{"name":"cache","path":"api/categories/cache.json"},{"name":"redis","path":"api/categories/redis.json"}],"tags":[{"name":"Cache","path":"api/tags/Cache.json"},{"name":"Redis","path":"api/tags/Redis.json"}]},{"title":"HBase Docker搭建","slug":"yuque/HBase Docker搭建","date":"2020-06-21T16:00:00.000Z","updated":"2022-04-02T16:49:05.000Z","comments":true,"path":"api/articles/hbase/hbase-docker.json","excerpt":"docker 脚本可以从链接获取修改 docker-compse.xml文件，注意端口映射version: \"2\"services:  zookeeper-1:    container_name: zookeeper-1    networks: [\"vnet\"]    hostname: zookeeper-1.vnet    image: smizy/zookeeper:3.4-alpine    ports:  [\"2181:2181\"]    environment:      - SERVICE_2181_NAME=zookeeper      - S","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[]},{"title":"HBase（二）Docker搭建","slug":"yuque/HBase（二）Docker搭建","date":"2020-06-21T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/hbase/hbase-docker.json","excerpt":"docker 脚本可以从链接获取修改 docker-compse.xml文件，注意端口映射version: \"2\"services:  zookeeper-1:    container_name: zookeeper-1    networks: [\"vnet\"]    hostname: zookeeper-1.vnet    image: smizy/zookeeper:3.4-alpine    ports:  [\"2181:2181\"]    environment:      - SERVICE_2181_NAME=zookeeper      - S","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"Arthas获取Spring Context","slug":"yuque/Arthas获取Spring Context","date":"2020-06-20T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/arthas/arthas-context.json","excerpt":"> Arthas 是 Alibaba 开源的> Java 诊断工具，深受开发者喜爱。> https://github.com/alibaba/arthasArthas提供了非常丰富的关于调用拦截的命令，比如trace/watch/monitor/tt。但是很多时候我们在排查问题时，需要更多的线索，并不只是函数的参数和返回值。比如在一个 spring应用里，想获取到 springcontext 里的其它bean。如果能随意获取到 springbean，那就可以“为所欲为”了，下面介绍如何利用Arthas 获取到 springcontext。> 搜索类 sc -d","keywords":null,"cover":["/images/c3.jpg"],"content":null,"raw":null,"categories":[{"name":"arthas","path":"api/categories/arthas.json"}],"tags":[{"name":"Arthas","path":"api/tags/Arthas.json"}]},{"title":"HBase（一）系统架构","slug":"yuque/HBase（一）系统架构","date":"2020-06-20T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/hbase/hbase-architecture.json","excerpt":"本文基本是对 MapR 的官网文章AnIn-Depth Look at theHBaseArchitecture的翻译HBase 存储架构HBase 采用Master/Slave架构搭建集群，它隶属于 Hadoop生态系统，由一下类型节点组成：HMaster节点、HRegionServer节点、ZooKeeper集群，而在底层，它将数据存储于 HDFS中，因而涉及到 HDFS 的NameNode、DataNode等，总体结构如下：HMaster 节点 * 管理   HRegionServer，实现其负载均衡。 * 管理和分配 HRegion，比","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"发号器","slug":"yuque/发号器","date":"2020-06-20T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/id-generator/id-generator.json","excerpt":"为什么需要一个发号器在使用数据库时，表的主键经常会使用数据库的自增（auto_increment）来产生。这当然很方便也很高效。但是使用自增也会带来一些麻烦。如果从一个数据库以外的地方，也就是发号器来产生全局唯一ID，这些问题就可以得到解决，生活就可以更美好。 * 难以适应分片场景在采用数据库分片时，如果使用数据库自增   ID，不同分片上会产生相同的 ID。单靠   ID   无法唯一标示一个对象，还需要额外加上分片字段才行。如果需要将   ID   用于其他对象的关联时，会麻烦很多。而采用发号器生成的是全局唯一的   ID，单靠 ID   就能实现关联。同时，这也使","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"id-generator","path":"api/categories/id-generator.json"}],"tags":[{"name":"IdGenerator","path":"api/tags/IdGenerator.json"}]},{"title":"HBase （一）系统架构","slug":"yuque/HBase （一）系统架构","date":"2020-06-20T16:00:00.000Z","updated":"2022-04-05T16:46:48.000Z","comments":true,"path":"api/articles/hbase/hbase-architecture.json","excerpt":"本文基本是对 MapR 的官网文章AnIn-Depth Look at theHBaseArchitecture的翻译HBase 存储架构HBase 采用Master/Slave架构搭建集群，它隶属于 Hadoop生态系统，由一下类型节点组成：HMaster节点、HRegionServer节点、ZooKeeper集群，而在底层，它将数据存储于 HDFS中，因而涉及到 HDFS 的NameNode、DataNode等，总体结构如下：HMaster 节点 * 管理   HRegionServer，实现其负载均衡。 * 管理和分配 HRegion，比","keywords":null,"cover":["/images/c3.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]}]}