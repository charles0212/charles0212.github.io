{"total":98,"pageSize":10,"pageCount":10,"data":[{"title":"DDD（六）清晰架构","slug":"yuque/DDD（六）清晰架构","date":"2021-09-11T16:00:00.000Z","updated":"2022-05-15T04:19:28.494Z","comments":true,"path":"api/articles/ddd/explicit-architecture.json","excerpt":"> 原文：https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/> >> https://www.jianshu.com/p/4cf50cf3e127> 清晰架构（Explicit> Architecture）： 融合> DDD、六边形架构、洋葱架构、整洁架构、CQRS这篇文章是软件架构编年史(译)的一部分，这部编年史由一系列关于软件架构的文章组成。在这一系列文章中，我将写下我对软件架构的学习和","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"ddd","path":"api/categories/ddd.json"}],"tags":[{"name":"DDD","path":"api/tags/DDD.json"}]},{"title":"DDD（五）CQRS","slug":"yuque/DDD（五）CQRS","date":"2021-09-09T16:00:00.000Z","updated":"2022-05-15T04:19:28.500Z","comments":true,"path":"api/articles/ddd/cqrs-architecture.json","excerpt":"> 原文：https://herbertograca.com/2017/10/19/from-cqs-to-cqrs/> >> https://www.jianshu.com/p/ab3843093903这篇文章是软件架构编年史(译)的一部分，这部编年史由一系列关于软件架构的文章组成。在这一系列文章中，我将写下我对软件架构的学习和思考，以及我是如何运用这些知识的。如果你阅读了这个系列中之前的文章，本篇文章的的内容将更有意义。如果我们的应用以数据为中心，比如，仅实现基本的CRUD操作而把业务流程(例如，哪些数据需要修改，应按什么顺序修改)留给用户；其优点是用户可以在无需改变应用的情","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"ddd","path":"api/categories/ddd.json"}],"tags":[{"name":"DDD","path":"api/tags/DDD.json"}]},{"title":"DDD（四）整洁架构","slug":"yuque/DDD（四）整洁架构","date":"2021-09-07T16:00:00.000Z","updated":"2022-05-15T04:19:28.500Z","comments":true,"path":"api/articles/ddd/clean-architecture.json","excerpt":"> 原文：https://herbertograca.com/2017/09/28/clean-architecture-standing-on-the-shoulders-of-giants/> >> https://www.jianshu.com/p/b565f0c00c0c这篇文章是软件架构编年史(译)的一部分，这部编年史由一系列关于软件架构的文章组成。在这一系列文章中，我将写下我对软件架构的学习和思考，以及我是如何运用这些知识的。如果你阅读了这个系列中之前的文章，本篇文章的的内容将更有意义。Robert C.Martin(大名鼎鼎的 UncleBob)于 2012年在他","keywords":null,"cover":["/images/c3.jpg"],"content":null,"raw":null,"categories":[{"name":"ddd","path":"api/categories/ddd.json"}],"tags":[{"name":"DDD","path":"api/tags/DDD.json"}]},{"title":"DDD（三）洋葱架构","slug":"yuque/DDD（三）洋葱架构","date":"2021-09-04T16:00:00.000Z","updated":"2022-05-15T04:19:28.500Z","comments":true,"path":"api/articles/ddd/onion-architecture.json","excerpt":"> 原文：https://herbertograca.com/2017/09/21/onion-architecture/> >> https://www.jianshu.com/p/d87d5389c92a这篇文章是软件架构编年史(译)的一部分，这部编年史由一系列关于软件架构的文章组成。在这一系列文章中，我将写下我对软件架构的学习和思考，以及我是如何运用这些知识的。如果你阅读了这个系列中之前的文章，本篇文章的的内容将更有意义。2008 年 JeffreyPalermo提出了洋葱架构。在我看来，它在端口和适配器架构的基础上贯彻了将领域放在应用中心，将传达机制(UI)和系统使用的基","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"ddd","path":"api/categories/ddd.json"}],"tags":[{"name":"DDD","path":"api/tags/DDD.json"}]},{"title":"DDD（二）端口和适配器架构","slug":"yuque/DDD（二）端口和适配器架构","date":"2021-09-02T16:00:00.000Z","updated":"2022-05-15T04:19:28.500Z","comments":true,"path":"api/articles/ddd/ports-adapters-architecture.json","excerpt":"> 原文链接：https://herbertograca.com/2017/09/14/ports-adapters-architecture/> 转载：https://www.jianshu.com/p/f39f4537857e这篇文章是软件架构编年史(译)的一部分，这部编年史由一系列关于软件架构的文章组成。在这一系列文章中，我将写下我对软件架构的学习和思考，以及我是如何运用这些知识的。如果你阅读了这个系列中之前的文章，本篇文章的的内容将更有意义。2005 年，AlistairCockburn 构思了端口和适配器架构(又称六边形架构)并记录在他的博客中。下面这句话就是他对该架构的","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"ddd","path":"api/categories/ddd.json"}],"tags":[{"name":"DDD","path":"api/tags/DDD.json"}]},{"title":"DDD（一）核心概念","slug":"yuque/DDD（一）核心概念","date":"2021-08-31T16:00:00.000Z","updated":"2022-05-15T04:19:28.496Z","comments":true,"path":"api/articles/ddd/core-concept.json","excerpt":"> 原文：https://herbertograca.com/2017/09/07/domain-driven-design/> 转载：https://www.jianshu.com/p/812636d55677这篇文章是软件架构编年史(译)的一部分，这部编年史由一系列关于软件架构的文章组成。在这一系列文章中，我将写下我对软件架构的学习和思考，以及我是如何运用这些知识的。如果你阅读了这个系列中之前的文章，本篇文章的的内容将更有意义。> Eric Evans 于 2003> 年出版了精采绝伦的《领域驱动设计：软件核心复杂性应对之道》，在书中他创造了领域驱动设计方法。Eric> Ev","keywords":null,"cover":["/images/c3.jpg"],"content":null,"raw":null,"categories":[{"name":"ddd","path":"api/categories/ddd.json"}],"tags":[{"name":"DDD","path":"api/tags/DDD.json"}]},{"title":"Sentinel与Hystrix的对比","slug":"yuque/Sentinel与Hystrix的对比","date":"2021-08-21T16:00:00.000Z","updated":"2022-05-15T04:19:28.497Z","comments":true,"path":"api/articles/stability/sentinel-hystrix.json","excerpt":"Sentinel是阿里中间件团队研发的面向分布式服务架构的轻量级高可用流量控制组件，已开源。Sentinel主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助用户保护服务的稳定性。大家可能会问：Sentinel和之前常用的熔断降级库 NetflixHystrix有什么异同呢？本文将从多个角度对Sentinel 和 Hystrix进行对比，帮助大家进行技术选型。先来看一下Hystrix 的官方介绍：> Hystrix is a library> that helps you> control the> interactions between>","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"stability","path":"api/categories/stability.json"}],"tags":[{"name":"Stability","path":"api/tags/Stability.json"},{"name":"Sentinel","path":"api/tags/Sentinel.json"},{"name":"Hystrix","path":"api/tags/Hystrix.json"}]},{"title":"限流熔断降级区别","slug":"yuque/限流熔断降级区别","date":"2021-08-20T16:00:00.000Z","updated":"2022-05-15T04:19:28.497Z","comments":true,"path":"api/articles/stability/stability-diff.json","excerpt":"熔断、限流、降级都是保持系统稳定运行的策略，但针对的场景有所不同，常用框架有hystrix 和 sentinel限流限流是指上游服务对本服务请求 QPS超过阙值时，通过一定的策略(如延迟处理、拒绝处理)对上游服务的请求量进行限制，以保证本服务不被压垮，从而持续提供稳定服务。常见的限流算法有滑动窗口、令牌桶、漏桶等如上图，当 服务 B 对 服务 D请求过多时，服务 D可以放弃一部分请求，保证自身服务的稳定常见限流算法https://www.cnblogs.com/taromilk/p/11751211.html限流规则参数说明：限流类型：分为 HSF 限流和 H","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"stability","path":"api/categories/stability.json"}],"tags":[{"name":"Stability","path":"api/tags/Stability.json"},{"name":"Limit","path":"api/tags/Limit.json"},{"name":"Fuse","path":"api/tags/Fuse.json"},{"name":"Degradation","path":"api/tags/Degradation.json"}]},{"title":"APISIX","slug":"yuque/APISIX","date":"2021-07-31T16:00:00.000Z","updated":"2022-05-15T04:19:28.495Z","comments":true,"path":"api/articles/gateway/apisix.json","excerpt":"1、概述APISIX 是基于 OpenResty+ etcd实现的云原生、高性能、可扩展的微服务API 网关。它是国人开源，目前已经进入Apache 进行孵化。 * OpenResty：通过 Lua 扩展   Nginx 实现的可伸缩的 Web   平台。 * etcd：Key/Value 存储系统。Apache APISIX是一个动态、实时、高性能的 API网关，提供负载均衡、动态上游、灰度发布、服务熔断、身份认证、可观测性等丰富的流量管理功能。ApacheAPISIX不仅拥有众多实用的插件，而且支持插件动态变更和热插拔。APISIX通过插件机制，提供了动","keywords":null,"cover":["/images/c3.jpg"],"content":null,"raw":null,"categories":[{"name":"gateway","path":"api/categories/gateway.json"}],"tags":[{"name":"Gateway","path":"api/tags/Gateway.json"}]},{"title":"TMC多级缓存","slug":"yuque/TMC多级缓存","date":"2021-07-31T16:00:00.000Z","updated":"2022-05-15T04:19:28.496Z","comments":true,"path":"api/articles/cache/tmc.json","excerpt":"> TMC (Transparent> Multilevel Cache)> 在通用“分布式缓存解决方案（如> CodisProxy + Redis> ）”基础上，增加了以下功能：> >  * 应用层热点探测>  * 应用层本地缓存>  * 应用层缓存命中统计> > 以帮助应用层解决缓存使用过程中出现的热点访问问题使用有赞服务的电商商家数量和类型很多，商家会不定期做一些“商品秒杀”、“商品推广”活动，导致“营销活动”、“商品详情”、“交易下单”等链路应用出现缓存热点访问 的情况： * 活动时间、活动类型、活动商品之类的信息不可预期，导致   缓存热点访问","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"cache","path":"api/categories/cache.json"}],"tags":[{"name":"Cache","path":"api/tags/Cache.json"},{"name":"TMC","path":"api/tags/TMC.json"}]}]}