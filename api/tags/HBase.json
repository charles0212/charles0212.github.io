{"name":"HBase","postlist":[{"title":"HBase LSM树","slug":"yuque/HBase LSM树","date":"2021-06-19T16:00:00.000Z","updated":"2022-04-02T16:49:05.000Z","comments":true,"path":"api/articles/hbase/hbase-lsm.json","excerpt":"> https://zhuanlan.zhihu.com/p/181498475LSM树(Log-Structured-Merge-Tree)的名字往往会给初识者一个错误的印象，事实上，LSM树并不像B+树、红黑树一样是一颗严格的树状数据结构，它其实是一种存储结构，目前HBase、LevelDB、RocksDB这些 NoSQL 存储都是采用的 LSM树。LSM树的核心特点是利用顺序写来提高写性能，但因为分层(此处分层是指的分为内存和文件两部分)的设计会稍微降低读性能，但是通过牺牲小部分读性能换来高性能写，使得LSM 树成为非常流行的存储结构。数据库存储有两种数据结构，一","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"HBase 系统架构","slug":"yuque/HBase 系统架构","date":"2021-06-20T16:00:00.000Z","updated":"2022-04-02T16:49:05.000Z","comments":true,"path":"api/articles/hbase/hbase-architecture.json","excerpt":"本文基本是对 MapR 的官网文章AnIn-Depth Look at theHBaseArchitecture的翻译HBase 存储架构HBase 采用Master/Slave架构搭建集群，它隶属于 Hadoop生态系统，由一下类型节点组成：HMaster节点、HRegionServer节点、ZooKeeper集群，而在底层，它将数据存储于 HDFS中，因而涉及到 HDFS 的NameNode、DataNode等，总体结构如下：HMaster 节点 * 管理   HRegionServer，实现其负载均衡。 * 管理和分配 HRegion，比","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"HBase 读优化","slug":"yuque/HBase 读优化","date":"2021-06-20T16:00:00.000Z","updated":"2022-04-02T16:49:05.000Z","comments":true,"path":"api/articles/hbase/hbase-read-optimize.json","excerpt":"> https://blog.csdn.net/weixin_40954192/article/details/106942029LSM 存储引擎是在B+树的基础上衍生过来的，目的就是为了在读和写之间，提高写的性能。所以，LSM树的弊端也由此可见，对读并不是很友好，所以，针对LSM 树，有后续compact，布隆过滤器，blockCache等优化方式。来弥补对读的查询。LSM 树的索引一般由 2部分构成，一部分是内存部分，一部分是磁盘部分。内存部分采用跳跃表来维护一个有序的KV 集合,也就是memstore.随着内存不断数据写入，一旦内存占用超过一定的阈值，就把内存部分数","keywords":null,"cover":["/images/c3.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"HBase （一）系统架构","slug":"yuque/HBase （一）系统架构","date":"2020-06-20T16:00:00.000Z","updated":"2022-04-05T16:46:48.000Z","comments":true,"path":"api/articles/hbase/hbase-architecture.json","excerpt":"本文基本是对 MapR 的官网文章AnIn-Depth Look at theHBaseArchitecture的翻译HBase 存储架构HBase 采用Master/Slave架构搭建集群，它隶属于 Hadoop生态系统，由一下类型节点组成：HMaster节点、HRegionServer节点、ZooKeeper集群，而在底层，它将数据存储于 HDFS中，因而涉及到 HDFS 的NameNode、DataNode等，总体结构如下：HMaster 节点 * 管理   HRegionServer，实现其负载均衡。 * 管理和分配 HRegion，比","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"HBase（三）LSM树","slug":"yuque/HBase（三）LSM树","date":"2021-06-22T16:00:00.000Z","updated":"2022-09-04T14:05:03.094Z","comments":true,"path":"api/articles/hbase/hbase-lsm.json","excerpt":"> https://zhuanlan.zhihu.com/p/181498475LSM树(Log-Structured-Merge-Tree)的名字往往会给初识者一个错误的印象，事实上，LSM树并不像B+树、红黑树一样是一颗严格的树状数据结构，它其实是一种存储结构，目前HBase、LevelDB、RocksDB这些 NoSQL 存储都是采用的 LSM树。LSM树的核心特点是利用顺序写来提高写性能，但因为分层(此处分层是指的分为内存和文件两部分)的设计会稍微降低读性能，但是通过牺牲小部分读性能换来高性能写，使得LSM 树成为非常流行的存储结构。数据库存储有两种数据结构，一","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"HBase（一）系统架构","slug":"yuque/HBase（一）系统架构","date":"2020-06-20T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/hbase/hbase-architecture.json","excerpt":"本文基本是对 MapR 的官网文章AnIn-Depth Look at theHBaseArchitecture的翻译HBase 存储架构HBase 采用Master/Slave架构搭建集群，它隶属于 Hadoop生态系统，由一下类型节点组成：HMaster节点、HRegionServer节点、ZooKeeper集群，而在底层，它将数据存储于 HDFS中，因而涉及到 HDFS 的NameNode、DataNode等，总体结构如下：HMaster 节点 * 管理   HRegionServer，实现其负载均衡。 * 管理和分配 HRegion，比","keywords":null,"cover":["/images/c3.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"HBase（二）Docker搭建","slug":"yuque/HBase（二）Docker搭建","date":"2020-06-21T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/hbase/hbase-docker.json","excerpt":"docker 脚本可以从链接获取修改 docker-compse.xml文件，注意端口映射version: \"2\"services:  zookeeper-1:    container_name: zookeeper-1    networks: [\"vnet\"]    hostname: zookeeper-1.vnet    image: smizy/zookeeper:3.4-alpine    ports:  [\"2181:2181\"]    environment:      - SERVICE_2181_NAME=zookeeper      - S","keywords":null,"cover":["/images/c1.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]},{"title":"HBase（四）读优化","slug":"yuque/HBase（四）读优化","date":"2021-06-24T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/hbase/hbase-read-optimize.json","excerpt":"> https://blog.csdn.net/weixin_40954192/article/details/106942029LSM 存储引擎是在B+树的基础上衍生过来的，目的就是为了在读和写之间，提高写的性能。所以，LSM树的弊端也由此可见，对读并不是很友好，所以，针对LSM 树，有后续compact，布隆过滤器，blockCache等优化方式。来弥补对读的查询。LSM 树的索引一般由 2部分构成，一部分是内存部分，一部分是磁盘部分。内存部分采用跳跃表来维护一个有序的KV 集合,也就是memstore.随着内存不断数据写入，一旦内存占用超过一定的阈值，就把内存部分数","keywords":null,"cover":["/images/c2.jpg"],"content":null,"raw":null,"categories":[{"name":"hbase","path":"api/categories/hbase.json"}],"tags":[{"name":"HBase","path":"api/tags/HBase.json"}]}]}