{"title":"Redis（一）基础数据类型","slug":"yuque/Redis（一）基础数据类型","date":"2020-06-22T16:00:00.000Z","updated":"2022-05-15T04:19:28.498Z","comments":true,"path":"api/articles/redis/redis-introduce.json","excerpt":"REmote DIctionaryServer(Redis) 是一个由Salvatore Sanfilippo写的 key-value存储系统。Redis 是一个开源的使用ANSI C 语言编写、遵守 BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。它通常被称为数据结构服务器，因为值（value）可以是字符串(String),哈希(Map), 列表(list),集合(sets) 和有序集合(sortedsets)等类型。Redis 简介Redis 是完全开源免费的，遵守BSD 协议，是一个高性能的k","covers":["https://cdn.nlark.com/yuque/0/2022/png/104130/1648982520740-f6e21a86-02bd-4c4c-a013-923a2155cdde.png#clientId=ua941ba02-f1a4-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u5b38cb6e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=197&originWidth=513&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=13923&status=done&style=none&taskId=ua56b85db-8bdf-48ec-a02e-785402d29d7&title="],"content":"<p>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统。Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648982520740-f6e21a86-02bd-4c4c-a013-923a2155cdde.png#clientId=ua941ba02-f1a4-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u5b38cb6e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=197&originWidth=513&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=13923&status=done&style=none&taskId=ua56b85db-8bdf-48ec-a02e-785402d29d7&title=\" alt=\"image.png\"></p>\n<h2 id=\"Redis-简介\"><a href=\"#Redis-简介\" class=\"headerlink\" title=\"Redis 简介\"></a>Redis 简介</h2><p>Redis 是完全开源免费的，遵守 BSD 协议，是一个高性能的 key-value 数据库,与其他 key-value 缓存产品有以下三个特点：</p>\n<ul>\n<li>Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>\n<li>Redis 不仅仅支持简单的 key-value 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。</li>\n<li>Redis 支持数据的备份，即 master-slave 模式的数据备份。</li>\n</ul>\n<h2 id=\"Redis-优势\"><a href=\"#Redis-优势\" class=\"headerlink\" title=\"Redis 优势\"></a>Redis 优势</h2><ol>\n<li>性能极高，**Redis 能读的速度是 110000 次&#x2F;s，写的速度是 81000 次&#x2F;s **。</li>\n<li>丰富的数据类型，Redis 支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>\n<li>原子性，Redis 的所有操作都是原子性的，同时 Redis 还支持对几个操作全并后的原子性执行。</li>\n<li>丰富的特性 ，Redis 还支持 publish&#x2F;subscribe, 通知, key 过期等等特性。</li>\n</ol>\n<h2 id=\"Redis-与其他-key-value-存储差异\"><a href=\"#Redis-与其他-key-value-存储差异\" class=\"headerlink\" title=\"Redis 与其他 key-value 存储差异\"></a>Redis 与其他 key-value 存储差异</h2><ol>\n<li>Redis 有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。</li>\n<li>Redis 的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li>\n<li>Redis 运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样 Redis 可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li>\n</ol>\n<h2 id=\"Redis-数据类型\"><a href=\"#Redis-数据类型\" class=\"headerlink\" title=\"Redis 数据类型\"></a>Redis 数据类型</h2><p>Redis 支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及 zset(sorted set：有序集合)。</p>\n<h3 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h3><p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象 。<br>s<strong>tring 类型是 Redis 最基本的数据类型，一个键最大能存储 512MB。</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">redis 127.0.0.1:6379&gt; SET name &quot;charles&quot;\nOK\nredis 127.0.0.1:6379&gt; GET name\n&quot;charles&quot;</code></pre>\n\n<p>在以上实例中我们使用了 Redis 的 SET 和 GET 命令。键为 name，对应的值为 charles。<br>注意：一个键最大能存储 512MB。</p>\n<h3 id=\"Hash（哈希）\"><a href=\"#Hash（哈希）\" class=\"headerlink\" title=\"Hash（哈希）\"></a>Hash（哈希）</h3><p>Redis hash 是一个键值对集合。<br>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">127.0.0.1:6379&gt; HMSET user:1 username charles password charles points 200\nOK\n127.0.0.1:6379&gt; HGETALL user:1\n1) &quot;username&quot;\n2) &quot;charles&quot;\n3) &quot;password&quot;\n4) &quot;charles&quot;\n5) &quot;points&quot;\n6) &quot;200&quot;</code></pre>\n\n<p>以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 Redis HMSET, HGETALL 命令，user:1 为键值。<br>每个 hash 可以存储 232 -1 键值对（40 多亿）。</p>\n<h3 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">redis 127.0.0.1:6379&gt; lpush charles redis\n(integer) 1\nredis 127.0.0.1:6379&gt; lpush charles mongodb\n(integer) 2\nredis 127.0.0.1:6379&gt; lpush charles rabitmq\n(integer) 3\nredis 127.0.0.1:6379&gt; lrange charles 0 10\n1) &quot;rabitmq&quot;\n2) &quot;mongodb&quot;\n3) &quot;redis&quot;</code></pre>\n\n<p>列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储 40 多亿)。</p>\n<h3 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a>Set（集合）</h3><p>Redis 的 Set 是 string 类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。<br>sadd 命令<br>添加一个 string 元素到,key 对应的 set 集合中，成功返回 1,如果元素已经在集合中返回 0,key 对应的 set 不存在返回错误。<br>sadd key member</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">redis 127.0.0.1:6379&gt; sadd charles redis\n(integer) 1\nredis 127.0.0.1:6379&gt; sadd charles mongodb\n(integer) 1\nredis 127.0.0.1:6379&gt; sadd charles rabitmq\n(integer) 1\nredis 127.0.0.1:6379&gt; sadd charles rabitmq\n(integer) 0\nredis 127.0.0.1:6379&gt; smembers charles\n1) &quot;rabitmq&quot;\n2) &quot;mongodb&quot;\n3) &quot;redis&quot;</code></pre>\n\n<p>注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。<br>集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储 40 多亿个成员)。</p>\n<h3 id=\"zset（sorted-set：有序集合）\"><a href=\"#zset（sorted-set：有序集合）\" class=\"headerlink\" title=\"zset（sorted set：有序集合）\"></a>zset（sorted set：有序集合）</h3><p>Redis zset 和 set 一样也是 string 类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。<br>zset 的成员是唯一的,但分数(score)却可以重复。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">redis 127.0.0.1:6379&gt; zadd charles 0 redis\n(integer) 1\nredis 127.0.0.1:6379&gt; zadd charles 0 mongodb\n(integer) 1\nredis 127.0.0.1:6379&gt; zadd charles 0 rabitmq\n(integer) 1\nredis 127.0.0.1:6379&gt; zadd charles 0 rabitmq\n(integer) 0\nredis 127.0.0.1:6379&gt; ZRANGEBYSCORE charles0 1000\n1) &quot;redis&quot;\n2) &quot;mongodb&quot;\n3) &quot;rabitmq&quot;</code></pre>\n\n<p>上面主要介绍了 Redis 相关的基础信息和支持的数据类型，关于 redis 的实现原理后续会逐步讲解。</p>\n","more":"<p>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统。Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648982520740-f6e21a86-02bd-4c4c-a013-923a2155cdde.png#clientId=ua941ba02-f1a4-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u5b38cb6e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=197&originWidth=513&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=13923&status=done&style=none&taskId=ua56b85db-8bdf-48ec-a02e-785402d29d7&title=\" alt=\"image.png\"></p>\n<h2 id=\"Redis-简介\"><a href=\"#Redis-简介\" class=\"headerlink\" title=\"Redis 简介\"></a>Redis 简介</h2><p>Redis 是完全开源免费的，遵守 BSD 协议，是一个高性能的 key-value 数据库,与其他 key-value 缓存产品有以下三个特点：</p>\n<ul>\n<li>Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>\n<li>Redis 不仅仅支持简单的 key-value 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。</li>\n<li>Redis 支持数据的备份，即 master-slave 模式的数据备份。</li>\n</ul>\n<h2 id=\"Redis-优势\"><a href=\"#Redis-优势\" class=\"headerlink\" title=\"Redis 优势\"></a>Redis 优势</h2><ol>\n<li>性能极高，**Redis 能读的速度是 110000 次&#x2F;s，写的速度是 81000 次&#x2F;s **。</li>\n<li>丰富的数据类型，Redis 支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>\n<li>原子性，Redis 的所有操作都是原子性的，同时 Redis 还支持对几个操作全并后的原子性执行。</li>\n<li>丰富的特性 ，Redis 还支持 publish&#x2F;subscribe, 通知, key 过期等等特性。</li>\n</ol>\n<h2 id=\"Redis-与其他-key-value-存储差异\"><a href=\"#Redis-与其他-key-value-存储差异\" class=\"headerlink\" title=\"Redis 与其他 key-value 存储差异\"></a>Redis 与其他 key-value 存储差异</h2><ol>\n<li>Redis 有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。</li>\n<li>Redis 的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li>\n<li>Redis 运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样 Redis 可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li>\n</ol>\n<h2 id=\"Redis-数据类型\"><a href=\"#Redis-数据类型\" class=\"headerlink\" title=\"Redis 数据类型\"></a>Redis 数据类型</h2><p>Redis 支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及 zset(sorted set：有序集合)。</p>\n<h3 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h3><p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象 。<br>s<strong>tring 类型是 Redis 最基本的数据类型，一个键最大能存储 512MB。</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">redis 127.0.0.1:6379&gt; SET name &quot;charles&quot;\nOK\nredis 127.0.0.1:6379&gt; GET name\n&quot;charles&quot;</code></pre>\n\n<p>在以上实例中我们使用了 Redis 的 SET 和 GET 命令。键为 name，对应的值为 charles。<br>注意：一个键最大能存储 512MB。</p>\n<h3 id=\"Hash（哈希）\"><a href=\"#Hash（哈希）\" class=\"headerlink\" title=\"Hash（哈希）\"></a>Hash（哈希）</h3><p>Redis hash 是一个键值对集合。<br>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">127.0.0.1:6379&gt; HMSET user:1 username charles password charles points 200\nOK\n127.0.0.1:6379&gt; HGETALL user:1\n1) &quot;username&quot;\n2) &quot;charles&quot;\n3) &quot;password&quot;\n4) &quot;charles&quot;\n5) &quot;points&quot;\n6) &quot;200&quot;</code></pre>\n\n<p>以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 Redis HMSET, HGETALL 命令，user:1 为键值。<br>每个 hash 可以存储 232 -1 键值对（40 多亿）。</p>\n<h3 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">redis 127.0.0.1:6379&gt; lpush charles redis\n(integer) 1\nredis 127.0.0.1:6379&gt; lpush charles mongodb\n(integer) 2\nredis 127.0.0.1:6379&gt; lpush charles rabitmq\n(integer) 3\nredis 127.0.0.1:6379&gt; lrange charles 0 10\n1) &quot;rabitmq&quot;\n2) &quot;mongodb&quot;\n3) &quot;redis&quot;</code></pre>\n\n<p>列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储 40 多亿)。</p>\n<h3 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a>Set（集合）</h3><p>Redis 的 Set 是 string 类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。<br>sadd 命令<br>添加一个 string 元素到,key 对应的 set 集合中，成功返回 1,如果元素已经在集合中返回 0,key 对应的 set 不存在返回错误。<br>sadd key member</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">redis 127.0.0.1:6379&gt; sadd charles redis\n(integer) 1\nredis 127.0.0.1:6379&gt; sadd charles mongodb\n(integer) 1\nredis 127.0.0.1:6379&gt; sadd charles rabitmq\n(integer) 1\nredis 127.0.0.1:6379&gt; sadd charles rabitmq\n(integer) 0\nredis 127.0.0.1:6379&gt; smembers charles\n1) &quot;rabitmq&quot;\n2) &quot;mongodb&quot;\n3) &quot;redis&quot;</code></pre>\n\n<p>注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。<br>集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储 40 多亿个成员)。</p>\n<h3 id=\"zset（sorted-set：有序集合）\"><a href=\"#zset（sorted-set：有序集合）\" class=\"headerlink\" title=\"zset（sorted set：有序集合）\"></a>zset（sorted set：有序集合）</h3><p>Redis zset 和 set 一样也是 string 类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。<br>zset 的成员是唯一的,但分数(score)却可以重复。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">redis 127.0.0.1:6379&gt; zadd charles 0 redis\n(integer) 1\nredis 127.0.0.1:6379&gt; zadd charles 0 mongodb\n(integer) 1\nredis 127.0.0.1:6379&gt; zadd charles 0 rabitmq\n(integer) 1\nredis 127.0.0.1:6379&gt; zadd charles 0 rabitmq\n(integer) 0\nredis 127.0.0.1:6379&gt; ZRANGEBYSCORE charles0 1000\n1) &quot;redis&quot;\n2) &quot;mongodb&quot;\n3) &quot;rabitmq&quot;</code></pre>\n\n<p>上面主要介绍了 Redis 相关的基础信息和支持的数据类型，关于 redis 的实现原理后续会逐步讲解。</p>\n","categories":[{"name":"cache","path":"api/categories/cache.json"},{"name":"redis","path":"api/categories/redis.json"}],"tags":[{"name":"Cache","path":"api/tags/Cache.json"},{"name":"Redis","path":"api/tags/Redis.json"}]}