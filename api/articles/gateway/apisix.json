{"title":"APISIX","slug":"yuque/APISIX","date":"2021-07-31T16:00:00.000Z","updated":"2022-05-15T04:19:28.495Z","comments":true,"path":"api/articles/gateway/apisix.json","excerpt":"1、概述APISIX 是基于 OpenResty+ etcd实现的云原生、高性能、可扩展的微服务API 网关。它是国人开源，目前已经进入Apache 进行孵化。 * OpenResty：通过 Lua 扩展   Nginx 实现的可伸缩的 Web   平台。 * etcd：Key/Value 存储系统。Apache APISIX是一个动态、实时、高性能的 API网关，提供负载均衡、动态上游、灰度发布、服务熔断、身份认证、可观测性等丰富的流量管理功能。ApacheAPISIX不仅拥有众多实用的插件，而且支持插件动态变更和热插拔。APISIX通过插件机制，提供了动","covers":["https://cdn.nlark.com/yuque/0/2022/png/104130/1647155726611-f9cab74d-4ad9-4d47-9d05-6fcc1a719707.png#clientId=u1b21c1b5-5289-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=371&id=u340fb91b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=913&originWidth=1280&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=119938&status=done&style=none&taskId=u81026da1-86c3-4b1a-b7fd-014fcc40863&title=&width=520"],"content":"<h2 id=\"1、概述\"><a href=\"#1、概述\" class=\"headerlink\" title=\"1、概述\"></a>1、概述</h2><p><a href=\"https://github.com/apache/apisix\">APISIX</a> 是基于 <a href=\"https://links.jianshu.com/go?to=https://github.com/openresty/\">OpenResty</a> + <a href=\"https://links.jianshu.com/go?to=https://github.com/etcd-io/etcd\">etcd</a> 实现的云原生、高性能、可扩展的微服务 API 网关。它是国人开源，目前已经进入 Apache 进行孵化。</p>\n<ul>\n<li>OpenResty：通过 Lua 扩展 Nginx 实现的可伸缩的 Web 平台。</li>\n<li>etcd：Key&#x2F;Value 存储系统。</li>\n</ul>\n<p>Apache APISIX 是一个动态、实时、高性能的 API 网关，提供负载均衡、动态上游、灰度发布、服务熔断、身份认证、可观测性等丰富的流量管理功能。Apache APISIX 不仅拥有众多实用的插件，而且支持插件动态变更和热插拔。APISIX 通过<a href=\"https://links.jianshu.com/go?to=https://github.com/apache/incubator-apisix/blob/master/doc/README_CN.md%23%25E6%258F%2592%25E4%25BB%25B6\">插件机制</a>，提供了动态负载平衡、身份验证、限流限速等等功能，当然我们也可以自己开发插件进行拓展。<br><a href=\"https://nacos.io/zh-cn/blog/apisix.html\">https://nacos.io/zh-cn/blog/apisix.html</a></p>\n<h2 id=\"2、应用场景\"><a href=\"#2、应用场景\" class=\"headerlink\" title=\"2、应用场景\"></a>2、应用场景</h2><p>Apache APISIX + Nacos 可以将各个微服务节点中与业务无关的各项控制，集中在 Apache APISIX 中进行统一管理，即通过 Apache APISIX 实现接口服务的代理和路由转发的能力。各个微服务在 Nacos 上注册后，Apache APISIX 可以通过 Nacos 的服务发现功能获取服务列表，查找对应的服务地址从而实现动态代理。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1647155726611-f9cab74d-4ad9-4d47-9d05-6fcc1a719707.png#clientId=u1b21c1b5-5289-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=371&id=u340fb91b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=913&originWidth=1280&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=119938&status=done&style=none&taskId=u81026da1-86c3-4b1a-b7fd-014fcc40863&title=&width=520\" alt=\"image.png\"></p>\n<h2 id=\"3、服务发现\"><a href=\"#3、服务发现\" class=\"headerlink\" title=\"3、服务发现\"></a>3、服务发现</h2><p>Apache APISIX 基于 Nacos 实现服务返现</p>\n<h3 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h3><p>本文操作基于以下环境进行。</p>\n<ul>\n<li>操作系统 Centos 7.9。</li>\n<li>已安装 Apache APISIX 12.1.0，详情请参考：<a href=\"https://apisix.apache.org/zh/docs/apisix/how-to-buildhttps://apisix.apache.org/zh/docs/apisix/how-to-build\">Apache APISIX how-to-bulid</a>。</li>\n<li>已安装 Nacos 2.0.4 及以上版本，详情请参考：<a href=\"https://nacos.io/zh-cn/docs/quick-start.html\">quick start</a>。</li>\n<li>已安装 Node.js，详情请参考：<a href=\"https://github.com/nodejs/help/wiki/Installation\">node.js Installation</a>。</li>\n</ul>\n<h3 id=\"步骤一：服务注册\"><a href=\"#步骤一：服务注册\" class=\"headerlink\" title=\"步骤一：服务注册\"></a>步骤一：服务注册</h3><p>1、使用 Node.js 的 Koa 框架在 3005 端口启动一个简单的测试服务作为<a href=\"https://apisix.apache.org/zh/docs/apisix/admin-api#upstream\">上游（Upstream）</a>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">const Koa &#x3D; require(&#39;koa&#39;);\nconst app &#x3D; new Koa();\n\napp.use(async ctx &#x3D;&gt; &#123;\n  ctx.body &#x3D; &#39;Hello World&#39;;\n&#125;);\n\napp.listen(3005);</code></pre>\n\n<p>2、在命令行中通过请求 Nacos Open API 的方式进行服务注册。<br><code>curl -X POST &#39;http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=APISIX-NACOS&amp;ip=127.0.0.1&amp;port=3005&amp;ephemeral=false&#39; </code><br>3、执行服务注册后使用以下命令查询当前服务情况。<br><code>curl -X GET &#39;http://127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=APISIX-NACOS&#39; </code><br>正确返回结果示例如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#123;\n  &quot;name&quot;: &quot;DEFAULT_GROUP@@APISIX-NACOS&quot;,\n  &quot;groupName&quot;: &quot;DEFAULT_GROUP&quot;,\n  &quot;clusters&quot;: &quot;&quot;,\n  &quot;cacheMillis&quot;: 10000,\n  &quot;hosts&quot;: [\n    &#123;\n      &quot;instanceId&quot;: &quot;127.0.0.1#3005#DEFAULT#DEFAULT_GROUP@@APISIX-NACOS&quot;,\n      &quot;ip&quot;: &quot;127.0.0.1&quot;,\n      &quot;port&quot;: 3005,\n      &quot;weight&quot;: 1.0,\n      &quot;healthy&quot;: true,\n      &quot;enabled&quot;: true,\n      &quot;ephemeral&quot;: true,\n      &quot;clusterName&quot;: &quot;DEFAULT&quot;,\n      &quot;serviceName&quot;: &quot;DEFAULT_GROUP@@APISIX-NACOS&quot;,\n      &quot;metadata&quot;: &#123;&#125;,\n      &quot;instanceHeartBeatInterval&quot;: 5000,\n      &quot;instanceHeartBeatTimeOut&quot;: 15000,\n      &quot;ipDeleteTimeout&quot;: 30000,\n      &quot;instanceIdGenerator&quot;: &quot;simple&quot;\n    &#125;\n  ],\n  &quot;lastRefTime&quot;: 1643191399694,\n  &quot;checksum&quot;: &quot;&quot;,\n  &quot;allIPs&quot;: false,\n  &quot;reachProtectionThreshold&quot;: false,\n  &quot;valid&quot;: true\n&#125;</code></pre>\n\n<h3 id=\"步骤二：新增-Nacos-路由\"><a href=\"#步骤二：新增-Nacos-路由\" class=\"headerlink\" title=\"步骤二：新增 Nacos 路由\"></a>步骤二：新增 Nacos 路由</h3><p>使用 Apache APISIX 提供的 Admin API 创建一个新的<a href=\"https://apisix.apache.org/zh/docs/apisix/admin-api#route\">路由（Route）</a>，APISIX 通过 upstream.discovery_type 字段选择使用的服务发现类型，upstream.service_name 需要与注册中心的对应服务名进行关联，因此创建路由时指定服务发现类型为 nacos 。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl http:&#x2F;&#x2F;127.0.0.1:9080&#x2F;apisix&#x2F;admin&#x2F;routes&#x2F;1 -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; -X PUT -i -d &#39;\n&#123;\n    &quot;uri&quot;: &quot;&#x2F;nacos&#x2F;*&quot;,\n    &quot;upstream&quot;: &#123;\n        &quot;service_name&quot;: &quot;APISIX-NACOS&quot;,\n        &quot;type&quot;: &quot;roundrobin&quot;,\n        &quot;discovery_type&quot;: &quot;nacos&quot;\n    &#125;\n&#125;&#39;</code></pre>\n\n<p>在上述命令中，请求头 X-API-KEY 是 Admin API 的访问 token，可以在 conf&#x2F;config.yaml 文件中的 apisix.admin_key.key 查看。<br>添加成功后，正确返回结果示例如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#123;\n  &quot;action&quot;: &quot;set&quot;,\n  &quot;node&quot;: &#123;\n    &quot;key&quot;: &quot;\\&#x2F;apisix\\&#x2F;routes\\&#x2F;1&quot;,\n    &quot;value&quot;: &#123;\n      &quot;update_time&quot;: 1643191044,\n      &quot;create_time&quot;: 1643176603,\n      &quot;priority&quot;: 0,\n      &quot;uri&quot;: &quot;\\&#x2F;nacos\\&#x2F;*&quot;,\n      &quot;upstream&quot;: &#123;\n        &quot;hash_on&quot;: &quot;vars&quot;,\n        &quot;discovery_type&quot;: &quot;nacos&quot;,\n        &quot;scheme&quot;: &quot;http&quot;,\n        &quot;pass_host&quot;: &quot;pass&quot;,\n        &quot;type&quot;: &quot;roundrobin&quot;,\n        &quot;service_name&quot;: &quot;APISIX-NACOS&quot;\n      &#125;,\n      &quot;id&quot;: &quot;1&quot;,\n      &quot;status&quot;: 1\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>除此之外，您还可以在 upstream.discovery_args 中传递其他服务相关参数用于指定服务所在的命名空间或组别，具体内容可参考下表：</p>\n<table><thead><tr>\n<th>名字</th>\n<th>类型</th>\n<th>可选项</th>\n<th>默认值</th>\n<th>有效值</th>\n<th>说明</th>\n</tr>\n</thead><tbody><tr>\n<td>namespace_id</td>\n<td>string</td>\n<td>可选</td>\n<td>public</td>\n<td></td>\n<td>服务所在的命名空间</td>\n</tr>\n<tr>\n<td>group_name</td>\n<td>string</td>\n<td>可选</td>\n<td>DEFAULT_GROUP</td>\n<td></td>\n<td>服务所在的组</td>\n</tr>\n</tbody></table><h3 id=\"步骤三：验证配置结果\"><a href=\"#步骤三：验证配置结果\" class=\"headerlink\" title=\"步骤三：验证配置结果\"></a>步骤三：验证配置结果</h3><p>使用以下命令发送请求至需要配置的路由。<br><code>curl -i http://127.0.0.1:9080/nacos/ </code><br>正常返回结果示例如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">HTTP&#x2F;1.1 200 OK\nContent-Type: text&#x2F;plain; charset&#x3D;utf-8\nContent-Length: 11\nConnection: keep-alive\nDate: Thu, 27 Jan 2022 00:48:26 GMT\nServer: APISIX&#x2F;2.12.0\n\nHello World</code></pre>\n\n<p>通过示例看到，Apache APISIX 中新增的路由已经可以通过 Nacos 服务发现找到正确的服务地址，并正常响应。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文为大家介绍了注册中心的概念以及 Apache APISIX 如何配合 Nacos 实现基于服务发现的路由代理。实际场景中如何进行 Apache APISIX 与 Nacos 的配合使用，您需要看具体的业务需求和过往技术架构。关于 nacos 插件的更多说明和完整配置信息，可参考官网文档：<a href=\"https://apisix.apache.org/zh/docs/apisix/discovery/nacos\">nacos</a>。</p>\n","more":"<h2 id=\"1、概述\"><a href=\"#1、概述\" class=\"headerlink\" title=\"1、概述\"></a>1、概述</h2><p><a href=\"https://github.com/apache/apisix\">APISIX</a> 是基于 <a href=\"https://links.jianshu.com/go?to=https://github.com/openresty/\">OpenResty</a> + <a href=\"https://links.jianshu.com/go?to=https://github.com/etcd-io/etcd\">etcd</a> 实现的云原生、高性能、可扩展的微服务 API 网关。它是国人开源，目前已经进入 Apache 进行孵化。</p>\n<ul>\n<li>OpenResty：通过 Lua 扩展 Nginx 实现的可伸缩的 Web 平台。</li>\n<li>etcd：Key&#x2F;Value 存储系统。</li>\n</ul>\n<p>Apache APISIX 是一个动态、实时、高性能的 API 网关，提供负载均衡、动态上游、灰度发布、服务熔断、身份认证、可观测性等丰富的流量管理功能。Apache APISIX 不仅拥有众多实用的插件，而且支持插件动态变更和热插拔。APISIX 通过<a href=\"https://links.jianshu.com/go?to=https://github.com/apache/incubator-apisix/blob/master/doc/README_CN.md%23%25E6%258F%2592%25E4%25BB%25B6\">插件机制</a>，提供了动态负载平衡、身份验证、限流限速等等功能，当然我们也可以自己开发插件进行拓展。<br><a href=\"https://nacos.io/zh-cn/blog/apisix.html\">https://nacos.io/zh-cn/blog/apisix.html</a></p>\n<h2 id=\"2、应用场景\"><a href=\"#2、应用场景\" class=\"headerlink\" title=\"2、应用场景\"></a>2、应用场景</h2><p>Apache APISIX + Nacos 可以将各个微服务节点中与业务无关的各项控制，集中在 Apache APISIX 中进行统一管理，即通过 Apache APISIX 实现接口服务的代理和路由转发的能力。各个微服务在 Nacos 上注册后，Apache APISIX 可以通过 Nacos 的服务发现功能获取服务列表，查找对应的服务地址从而实现动态代理。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1647155726611-f9cab74d-4ad9-4d47-9d05-6fcc1a719707.png#clientId=u1b21c1b5-5289-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=371&id=u340fb91b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=913&originWidth=1280&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=119938&status=done&style=none&taskId=u81026da1-86c3-4b1a-b7fd-014fcc40863&title=&width=520\" alt=\"image.png\"></p>\n<h2 id=\"3、服务发现\"><a href=\"#3、服务发现\" class=\"headerlink\" title=\"3、服务发现\"></a>3、服务发现</h2><p>Apache APISIX 基于 Nacos 实现服务返现</p>\n<h3 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h3><p>本文操作基于以下环境进行。</p>\n<ul>\n<li>操作系统 Centos 7.9。</li>\n<li>已安装 Apache APISIX 12.1.0，详情请参考：<a href=\"https://apisix.apache.org/zh/docs/apisix/how-to-buildhttps://apisix.apache.org/zh/docs/apisix/how-to-build\">Apache APISIX how-to-bulid</a>。</li>\n<li>已安装 Nacos 2.0.4 及以上版本，详情请参考：<a href=\"https://nacos.io/zh-cn/docs/quick-start.html\">quick start</a>。</li>\n<li>已安装 Node.js，详情请参考：<a href=\"https://github.com/nodejs/help/wiki/Installation\">node.js Installation</a>。</li>\n</ul>\n<h3 id=\"步骤一：服务注册\"><a href=\"#步骤一：服务注册\" class=\"headerlink\" title=\"步骤一：服务注册\"></a>步骤一：服务注册</h3><p>1、使用 Node.js 的 Koa 框架在 3005 端口启动一个简单的测试服务作为<a href=\"https://apisix.apache.org/zh/docs/apisix/admin-api#upstream\">上游（Upstream）</a>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">const Koa &#x3D; require(&#39;koa&#39;);\nconst app &#x3D; new Koa();\n\napp.use(async ctx &#x3D;&gt; &#123;\n  ctx.body &#x3D; &#39;Hello World&#39;;\n&#125;);\n\napp.listen(3005);</code></pre>\n\n<p>2、在命令行中通过请求 Nacos Open API 的方式进行服务注册。<br><code>curl -X POST &#39;http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=APISIX-NACOS&amp;ip=127.0.0.1&amp;port=3005&amp;ephemeral=false&#39; </code><br>3、执行服务注册后使用以下命令查询当前服务情况。<br><code>curl -X GET &#39;http://127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=APISIX-NACOS&#39; </code><br>正确返回结果示例如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#123;\n  &quot;name&quot;: &quot;DEFAULT_GROUP@@APISIX-NACOS&quot;,\n  &quot;groupName&quot;: &quot;DEFAULT_GROUP&quot;,\n  &quot;clusters&quot;: &quot;&quot;,\n  &quot;cacheMillis&quot;: 10000,\n  &quot;hosts&quot;: [\n    &#123;\n      &quot;instanceId&quot;: &quot;127.0.0.1#3005#DEFAULT#DEFAULT_GROUP@@APISIX-NACOS&quot;,\n      &quot;ip&quot;: &quot;127.0.0.1&quot;,\n      &quot;port&quot;: 3005,\n      &quot;weight&quot;: 1.0,\n      &quot;healthy&quot;: true,\n      &quot;enabled&quot;: true,\n      &quot;ephemeral&quot;: true,\n      &quot;clusterName&quot;: &quot;DEFAULT&quot;,\n      &quot;serviceName&quot;: &quot;DEFAULT_GROUP@@APISIX-NACOS&quot;,\n      &quot;metadata&quot;: &#123;&#125;,\n      &quot;instanceHeartBeatInterval&quot;: 5000,\n      &quot;instanceHeartBeatTimeOut&quot;: 15000,\n      &quot;ipDeleteTimeout&quot;: 30000,\n      &quot;instanceIdGenerator&quot;: &quot;simple&quot;\n    &#125;\n  ],\n  &quot;lastRefTime&quot;: 1643191399694,\n  &quot;checksum&quot;: &quot;&quot;,\n  &quot;allIPs&quot;: false,\n  &quot;reachProtectionThreshold&quot;: false,\n  &quot;valid&quot;: true\n&#125;</code></pre>\n\n<h3 id=\"步骤二：新增-Nacos-路由\"><a href=\"#步骤二：新增-Nacos-路由\" class=\"headerlink\" title=\"步骤二：新增 Nacos 路由\"></a>步骤二：新增 Nacos 路由</h3><p>使用 Apache APISIX 提供的 Admin API 创建一个新的<a href=\"https://apisix.apache.org/zh/docs/apisix/admin-api#route\">路由（Route）</a>，APISIX 通过 upstream.discovery_type 字段选择使用的服务发现类型，upstream.service_name 需要与注册中心的对应服务名进行关联，因此创建路由时指定服务发现类型为 nacos 。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl http:&#x2F;&#x2F;127.0.0.1:9080&#x2F;apisix&#x2F;admin&#x2F;routes&#x2F;1 -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; -X PUT -i -d &#39;\n&#123;\n    &quot;uri&quot;: &quot;&#x2F;nacos&#x2F;*&quot;,\n    &quot;upstream&quot;: &#123;\n        &quot;service_name&quot;: &quot;APISIX-NACOS&quot;,\n        &quot;type&quot;: &quot;roundrobin&quot;,\n        &quot;discovery_type&quot;: &quot;nacos&quot;\n    &#125;\n&#125;&#39;</code></pre>\n\n<p>在上述命令中，请求头 X-API-KEY 是 Admin API 的访问 token，可以在 conf&#x2F;config.yaml 文件中的 apisix.admin_key.key 查看。<br>添加成功后，正确返回结果示例如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#123;\n  &quot;action&quot;: &quot;set&quot;,\n  &quot;node&quot;: &#123;\n    &quot;key&quot;: &quot;\\&#x2F;apisix\\&#x2F;routes\\&#x2F;1&quot;,\n    &quot;value&quot;: &#123;\n      &quot;update_time&quot;: 1643191044,\n      &quot;create_time&quot;: 1643176603,\n      &quot;priority&quot;: 0,\n      &quot;uri&quot;: &quot;\\&#x2F;nacos\\&#x2F;*&quot;,\n      &quot;upstream&quot;: &#123;\n        &quot;hash_on&quot;: &quot;vars&quot;,\n        &quot;discovery_type&quot;: &quot;nacos&quot;,\n        &quot;scheme&quot;: &quot;http&quot;,\n        &quot;pass_host&quot;: &quot;pass&quot;,\n        &quot;type&quot;: &quot;roundrobin&quot;,\n        &quot;service_name&quot;: &quot;APISIX-NACOS&quot;\n      &#125;,\n      &quot;id&quot;: &quot;1&quot;,\n      &quot;status&quot;: 1\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>除此之外，您还可以在 upstream.discovery_args 中传递其他服务相关参数用于指定服务所在的命名空间或组别，具体内容可参考下表：</p>\n<table><thead><tr>\n<th>名字</th>\n<th>类型</th>\n<th>可选项</th>\n<th>默认值</th>\n<th>有效值</th>\n<th>说明</th>\n</tr>\n</thead><tbody><tr>\n<td>namespace_id</td>\n<td>string</td>\n<td>可选</td>\n<td>public</td>\n<td></td>\n<td>服务所在的命名空间</td>\n</tr>\n<tr>\n<td>group_name</td>\n<td>string</td>\n<td>可选</td>\n<td>DEFAULT_GROUP</td>\n<td></td>\n<td>服务所在的组</td>\n</tr>\n</tbody></table><h3 id=\"步骤三：验证配置结果\"><a href=\"#步骤三：验证配置结果\" class=\"headerlink\" title=\"步骤三：验证配置结果\"></a>步骤三：验证配置结果</h3><p>使用以下命令发送请求至需要配置的路由。<br><code>curl -i http://127.0.0.1:9080/nacos/ </code><br>正常返回结果示例如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">HTTP&#x2F;1.1 200 OK\nContent-Type: text&#x2F;plain; charset&#x3D;utf-8\nContent-Length: 11\nConnection: keep-alive\nDate: Thu, 27 Jan 2022 00:48:26 GMT\nServer: APISIX&#x2F;2.12.0\n\nHello World</code></pre>\n\n<p>通过示例看到，Apache APISIX 中新增的路由已经可以通过 Nacos 服务发现找到正确的服务地址，并正常响应。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文为大家介绍了注册中心的概念以及 Apache APISIX 如何配合 Nacos 实现基于服务发现的路由代理。实际场景中如何进行 Apache APISIX 与 Nacos 的配合使用，您需要看具体的业务需求和过往技术架构。关于 nacos 插件的更多说明和完整配置信息，可参考官网文档：<a href=\"https://apisix.apache.org/zh/docs/apisix/discovery/nacos\">nacos</a>。</p>\n","categories":[{"name":"gateway","path":"api/categories/gateway.json"}],"tags":[{"name":"Gateway","path":"api/tags/Gateway.json"}]}