{"title":"Java锁（一）AQS分析","slug":"yuque/Java锁（一）AQS分析","date":"2015-02-01T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/java/java-aqs.json","excerpt":"> 作为一个 java> 开发者，并发编程是不可或缺的，在并发的过程，Lock> 是并发的关键。本系列文章主要来讲解锁的原理和机制。在理解 J.U.C原理以及锁机制之前，我们来介绍J.U.C框架最核心也是最复杂的一个基础类：java.util.concurrent.locks.AbstractQueuedSynchronizer。上面的继承体系中，AbstractQueuedSynchronizer是CountDownLatch/Semaphore/RenntrantReadWriteLock/Worker/ReentrantLock的基础，因此AbstractQ","covers":["https://cdn.nlark.com/yuque/0/2022/png/104130/1649587815459-92075084-6d27-4d80-bc7e-984dee748ce2.png#clientId=u1eb0af4d-8aca-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue584389c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=285&originWidth=592&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=47496&status=done&style=none&taskId=u4176bc44-4be5-4acb-a406-8b58e8ae29b&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1649587815485-2db2f993-be7e-4572-9891-b805219c7081.png#clientId=u1eb0af4d-8aca-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u117765c1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=285&originWidth=694&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=23769&status=done&style=none&taskId=u4150c17c-432c-4bcc-859b-2db30788d31&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1650856645490-bea8bdec-5243-4d03-a77d-126059800ee9.png#clientId=u8c021430-ecfd-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=397&id=u37b7eb52&margin=%5Bobject%20Object%5D&name=image.png&originHeight=397&originWidth=842&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=62759&status=done&style=none&taskId=u95437ed0-7a5f-45b6-af1c-07fa5d1be41&title=&width=842"],"content":"<blockquote>\n<p>作为一个 java 开发者，并发编程是不可或缺的，在并发的过程，Lock 是并发的关键。</p>\n</blockquote>\n<p>本系列文章主要来讲解锁的原理和机制。<br>在理解 J.U.C 原理以及锁机制之前，我们来介绍 J.U.C 框架最核心也是最复杂的一个基础类：java.util.concurrent.locks.<strong>AbstractQueuedSynchronizer</strong>。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649587815459-92075084-6d27-4d80-bc7e-984dee748ce2.png#clientId=u1eb0af4d-8aca-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue584389c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=285&originWidth=592&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=47496&status=done&style=none&taskId=u4176bc44-4be5-4acb-a406-8b58e8ae29b&title=\" alt=\"image.png\"><br>上面的继承体系中，AbstractQueuedSynchronizer 是 CountDownLatch&#x2F;Semaphore&#x2F;RenntrantReadWriteLock &#x2F;Worker&#x2F;ReentrantLock 的基础，因此 AbstractQueuedSynchronizer 是 Lock&#x2F;Executor 实现的前提。公平锁、不公平锁、Condition、CountDownLatch、Semaphore 等放到后面的篇幅中说明。AQS 采用模板方法模式，为一个抽象类，但是没抽象方法，每个 sync 子类都需要实现 5 个受保护的方法。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649587815456-0f259cd7-755b-4c53-bd45-5edb3de5783c.png#clientId=u1eb0af4d-8aca-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u428e2d8d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=115&originWidth=315&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=6006&status=done&style=none&taskId=ube02c845-fc3a-4add-b72d-faf5bd2cbfd&title=\" alt=\"image.png\"><br>这个 5 个方法在 AQS 都抛出 throw new UnsupportedOperationException();<br>完整的设计原理可以参考 Doug Lea 的论文 [java.util.concurrent Synchronizer Framework]（<a href=\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\">aqs.pdf</a>），这里做一些简要的分析。</p>\n<h2 id=\"AQS-操作\"><a href=\"#AQS-操作\" class=\"headerlink\" title=\"AQS 操作\"></a>AQS 操作</h2><p>基本的思想是表现为一个同步器，支持下面两个操作：</p>\n<h3 id=\"1、AQS-获取锁\"><a href=\"#1、AQS-获取锁\" class=\"headerlink\" title=\"1、AQS 获取锁\"></a>1、AQS 获取锁</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;判断当前状态是否允许获取锁\nwhile(synchronization state does not allow acquire) &#123;\n    &#x2F;&#x2F;当前线程入队列\nenqueue current thread if not already queued;\n&#x2F;&#x2F;阻塞当前线程\n    possibly block current thread;\n&#125;\n&#x2F;&#x2F;状态位允许获取锁时就修改状态, 如果进了队列就从队列中移除\ndequeue current thread if it was queued;</code></pre>\n\n<h3 id=\"2、AQS-释放锁\"><a href=\"#2、AQS-释放锁\" class=\"headerlink\" title=\"2、AQS 释放锁\"></a>2、AQS 释放锁</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;更新同步状态\nupdate synchronization state;\n&#x2F;&#x2F;当前状态允许阻塞线程获取，唤醒队列中的一个或者更多线程\nif(state may permit a blocked thread to acquire)\n    unlock one or more queued threads;</code></pre>\n\n<h2 id=\"AQS-条件\"><a href=\"#AQS-条件\" class=\"headerlink\" title=\"AQS 条件\"></a>AQS 条件</h2><p>要支持上面两个操作就必须有下面的条件：</p>\n<ol>\n<li>原子操作的同步状态（Atomically managing synchronization state）</li>\n<li>阻塞和唤醒线程（Blocking and unblocking threads）</li>\n<li>保持队列（Maintaining queues）</li>\n</ol>\n<h3 id=\"1、原子操作的同步状态\"><a href=\"#1、原子操作的同步状态\" class=\"headerlink\" title=\"1、原子操作的同步状态\"></a>1、原子操作的同步状态</h3><p>AbstractQueuedSynchronizer 中同步状态 volatile int state，使用一个 32 位的整数来描述状态位，并暴露出 getState、setState 以及 compareAndSet 操作来读取和更新这个状态。这些方法都依赖于 j.u.c.atomic 包的支持，这个包提供了兼容 JSR133 中 volatile 在读和写上的语义，并且通过使用本地的 compare-and-swap 或 load-linked&#x2F;store-conditional 指令来实现 compareAndSetState，使得仅当同步状态拥有一个期望值的时候，才会被原子地设置成新值。<br>基于 AQS 的具体实现类必须根据暴露出的状态相关的方法定义 tryAcquire 和 tryRelease 方法，以控制 acquire 和 release 操作。当同步状态满足时，tryAcquire 方法必须返回 true，而当新的同步状态允许后续 acquire 时，tryRelease 方法也必须返回 true。这些方法都接受一个 int 类型的参数用于传递想要的状态。例如：可重入锁中，当某个线程从条件等待中返回，然后重新获取锁时，为了重新建立循环计数的场景。很多同步器并不需要这样一个参数，因此忽略它即可。</p>\n<h3 id=\"2、阻塞和唤醒线程\"><a href=\"#2、阻塞和唤醒线程\" class=\"headerlink\" title=\"2、阻塞和唤醒线程\"></a>2、阻塞和唤醒线程</h3><p>标准的 JAVA API 里面是无法挂起（阻塞）一个线程，然后在将来某个时刻再唤醒它的。JDK 1.0 的 API 里面有 Thread.suspend 和 Thread.resume，并且一直延续了下来。但是这些都是过时的 API，而且也是不推荐的做法。在 JDK 5.0 以后利用 JNI 在 LockSupport 类中实现了此特性。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">LockSupport.park()\nLockSupport.park(Object)\nLockSupport.parkNanos(Object, long)\nLockSupport.parkNanos(long)\nLockSupport.parkUntil(Object, long)\nLockSupport.parkUntil(long)\nLockSupport.unpark(Thread)</code></pre>\n\n<p>上面的 API 中 park()是在当前线程中调用，导致线程阻塞，带参数的 Object 是挂起的对象，这样监视的时候就能够知道此线程是因为什么资源而阻塞的。<br>而 park()返回的原因有以下 3 方面：</p>\n<ol>\n<li>其他某个线程以当前线程作为目标调用 unpark；</li>\n<li>其他某个线程中断 interrupt 当前线程；</li>\n<li>该调用不合逻辑地（即毫无理由地）返回。</li>\n</ol>\n<p>由于 park()立即返回，其中第三条就决定了需要循环检测，所以通常情况下需要在循环中去检测竞争资源来决定是否进行下一次阻塞。</p>\n<h3 id=\"3、保持队列\"><a href=\"#3、保持队列\" class=\"headerlink\" title=\"3、保持队列\"></a>3、保持队列</h3><p>同步队列的最佳选择是自身没有使用底层锁来构造的非阻塞数据结构，目前，业界对此很少有争议。而其中主要有两个选择：</p>\n<ul>\n<li>一个是 Mellor-Crummey 和 Scott 锁（MCS 锁）的变体，</li>\n<li>另一个是 Craig，Landin 和 Hagersten 锁（CLH 锁）的变体</li>\n</ul>\n<p>一直以来，CLH 锁仅被用于自旋锁。但是，在这个框架中，<strong>CLH 锁显然比 MCS 锁更合适</strong>。因为 CLH 锁可以更容易地去实现“取消（cancellation）”和“超时”功能，因此我们选择了 CLH 锁作为实现的基础。但是最终的设计已经与原来的 CLH 锁有较大的出入，因此下文将对此做出解释。<br>CLH 队列实际上并不那么像队列，因为它的入队和出队操作都与它的用途（即用作锁）紧密相关。它是一个链表队列，通过两个字段 head 和 tail 来存取，这两个字段是可原子更新的，两者在初始化时都指向了一个空节点。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649587815485-2db2f993-be7e-4572-9891-b805219c7081.png#clientId=u1eb0af4d-8aca-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u117765c1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=285&originWidth=694&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=23769&status=done&style=none&taskId=u4150c17c-432c-4bcc-859b-2db30788d31&title=\" alt=\"image.png\"><br>AQS 里面有三个核心字段：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private volatile int state;\nprivate transient volatile Node head;\nprivate transient volatile Node tail;</code></pre>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1650856645490-bea8bdec-5243-4d03-a77d-126059800ee9.png#clientId=u8c021430-ecfd-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=397&id=u37b7eb52&margin=%5Bobject%20Object%5D&name=image.png&originHeight=397&originWidth=842&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=62759&status=done&style=none&taskId=u95437ed0-7a5f-45b6-af1c-07fa5d1be41&title=&width=842\" alt=\"image.png\"><br>**Sync queue **同步队列，是一个双向列表。包括 head 节点和 tail 节点。head 节点主要用作后续的调度。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1650856674295-e2323641-638c-4e85-bf40-e5d5d3caa624.png#clientId=u8c021430-ecfd-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u6eb434c3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=259&originWidth=792&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=13037&status=done&style=none&taskId=u6f9fa3d2-642d-4d08-bac2-dd94dcc375f&title=\" alt=\"image.png\"><br>**Condition queue ** 非必须，单向列表。当程序中存在 cindition 的时候才会存在此列表。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1650856674311-4e054d57-e73f-4bf4-950e-ff0bbb7404e2.png#clientId=u8c021430-ecfd-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ud3233b96&margin=%5Bobject%20Object%5D&name=image.png&originHeight=236&originWidth=808&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=13578&status=done&style=none&taskId=uf7b0513c-978c-4b4b-9f0e-6d8a99c378d&title=\" alt=\"image.png\"></p>\n<p>其中 state 描述的有多少个线程取得了锁，对于互斥不可重入锁来说 state⇐1。<br>head&#x2F;tail 加上 CAS 操作就构成了一个 CLH 的 FIFO 队列，队列中的 Node 为一个双向链表。<br>AQS 中入队列(enqueue)，采用 CAS 操作，每次比较尾结点是否一致，然后插入的到尾结点中。<br>出队列(dequeue)，由于每一个节点也缓存了一个状态，决定是否出队列，因此当不满足条件时就需要自旋等待，一旦满足条件就将头结点设置为下一个节点。<br>CLH 锁的优点在于其入队和出队操作是快速、无锁的，以及无障碍的（即使在竞争下，某个线程总会赢得一次插入机会而能继续执行）；且探测是否有线程正在等待也很快（只要测试一下 head 是否与 tail 相等）；同时，“释放”状态是分散的，避免了一些不必要的内存竞争。<br>对于于独占锁和共享锁中，入队列和出队列的具体过程，后续会详细讲解，本文先讲解下同步队列中的 Node 节点的属性和结构。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">static final class Node &#123;\n    &#x2F;** 标示节点在共享模式下等待 *&#x2F;\n    static final Node SHARED &#x3D; new Node();\n    &#x2F;** 标示节点在独占模式下等待 *&#x2F;\n    static final Node EXCLUSIVE &#x3D; null;\n\n    &#x2F;** 线程被取消 *&#x2F;\n    static final int CANCELLED &#x3D;  1;\n    &#x2F;** 后继线程需要被唤醒 *&#x2F;\n    static final int SIGNAL    &#x3D; -1;\n    &#x2F;** 线程在condition上等待  *&#x2F;\n    static final int CONDITION &#x3D; -2;\n    &#x2F;**\n     * 下一个acquireShared应该无条件传播\n     *&#x2F;\n    static final int PROPAGATE &#x3D; -3;\n\n    &#x2F;**\n     *   CANCELLED:  节点因为超时或者对应的线程被interrupt被取消\n     *   SIGNAL:     节点的继任节点是（或者将要成为）BLOCKED状态（例如通过LockSupport.park()操作）。\n     *               因此当前节点一旦被释放（解锁）或者取消，就需要唤醒它的后继节点。\n     *               为避免竞争，acquire方法必须首先表明他们需要一个信号，然后重试原子acquire方法，\n     *               如果失败，就阻塞。\n     *   CONDITION:  节点当前是在状态队列中（因为不满足一个条件（Condition）而被阻塞），\n     *               直到节点的状态变成0，它才被使用作为一个同步队列节点。\n     *   PROPAGATE:  releaseShared应该被传播到其他的节点，它在doReleaseShared方法中被设置（仅头节点）\n     *   0:          正常状态，新生的非CONDITION节点都是此状态\n     *\n     *&#x2F;\n    volatile int waitStatus;\n\n    &#x2F;**\n     * 前驱节点\n     *&#x2F;\n    volatile Node prev;\n\n    &#x2F;**\n     * 后继节点\n     *&#x2F;\n    volatile Node next;\n\n    &#x2F;**\n     * 节点关联的线程\n     *&#x2F;\n    volatile Thread thread;\n\n    &#x2F;**\n     * 下一个在等待状态（condition）的节点，或者特殊的值 SHARED.\n     *&#x2F;\n    Node nextWaiter;\n&#125;</code></pre>\n\n<p>AQS 在 J.U.C 里面是一个非常核心的工具，而且也非常复杂，里面考虑到了非常多的逻辑实现，本文主要介绍了一些理论背景和相关的数据结构，后续会介绍 AQS 的其他特性和实现。</p>\n","more":"<blockquote>\n<p>作为一个 java 开发者，并发编程是不可或缺的，在并发的过程，Lock 是并发的关键。</p>\n</blockquote>\n<p>本系列文章主要来讲解锁的原理和机制。<br>在理解 J.U.C 原理以及锁机制之前，我们来介绍 J.U.C 框架最核心也是最复杂的一个基础类：java.util.concurrent.locks.<strong>AbstractQueuedSynchronizer</strong>。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649587815459-92075084-6d27-4d80-bc7e-984dee748ce2.png#clientId=u1eb0af4d-8aca-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue584389c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=285&originWidth=592&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=47496&status=done&style=none&taskId=u4176bc44-4be5-4acb-a406-8b58e8ae29b&title=\" alt=\"image.png\"><br>上面的继承体系中，AbstractQueuedSynchronizer 是 CountDownLatch&#x2F;Semaphore&#x2F;RenntrantReadWriteLock &#x2F;Worker&#x2F;ReentrantLock 的基础，因此 AbstractQueuedSynchronizer 是 Lock&#x2F;Executor 实现的前提。公平锁、不公平锁、Condition、CountDownLatch、Semaphore 等放到后面的篇幅中说明。AQS 采用模板方法模式，为一个抽象类，但是没抽象方法，每个 sync 子类都需要实现 5 个受保护的方法。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649587815456-0f259cd7-755b-4c53-bd45-5edb3de5783c.png#clientId=u1eb0af4d-8aca-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u428e2d8d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=115&originWidth=315&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=6006&status=done&style=none&taskId=ube02c845-fc3a-4add-b72d-faf5bd2cbfd&title=\" alt=\"image.png\"><br>这个 5 个方法在 AQS 都抛出 throw new UnsupportedOperationException();<br>完整的设计原理可以参考 Doug Lea 的论文 [java.util.concurrent Synchronizer Framework]（<a href=\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\">aqs.pdf</a>），这里做一些简要的分析。</p>\n<h2 id=\"AQS-操作\"><a href=\"#AQS-操作\" class=\"headerlink\" title=\"AQS 操作\"></a>AQS 操作</h2><p>基本的思想是表现为一个同步器，支持下面两个操作：</p>\n<h3 id=\"1、AQS-获取锁\"><a href=\"#1、AQS-获取锁\" class=\"headerlink\" title=\"1、AQS 获取锁\"></a>1、AQS 获取锁</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;判断当前状态是否允许获取锁\nwhile(synchronization state does not allow acquire) &#123;\n    &#x2F;&#x2F;当前线程入队列\nenqueue current thread if not already queued;\n&#x2F;&#x2F;阻塞当前线程\n    possibly block current thread;\n&#125;\n&#x2F;&#x2F;状态位允许获取锁时就修改状态, 如果进了队列就从队列中移除\ndequeue current thread if it was queued;</code></pre>\n\n<h3 id=\"2、AQS-释放锁\"><a href=\"#2、AQS-释放锁\" class=\"headerlink\" title=\"2、AQS 释放锁\"></a>2、AQS 释放锁</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;更新同步状态\nupdate synchronization state;\n&#x2F;&#x2F;当前状态允许阻塞线程获取，唤醒队列中的一个或者更多线程\nif(state may permit a blocked thread to acquire)\n    unlock one or more queued threads;</code></pre>\n\n<h2 id=\"AQS-条件\"><a href=\"#AQS-条件\" class=\"headerlink\" title=\"AQS 条件\"></a>AQS 条件</h2><p>要支持上面两个操作就必须有下面的条件：</p>\n<ol>\n<li>原子操作的同步状态（Atomically managing synchronization state）</li>\n<li>阻塞和唤醒线程（Blocking and unblocking threads）</li>\n<li>保持队列（Maintaining queues）</li>\n</ol>\n<h3 id=\"1、原子操作的同步状态\"><a href=\"#1、原子操作的同步状态\" class=\"headerlink\" title=\"1、原子操作的同步状态\"></a>1、原子操作的同步状态</h3><p>AbstractQueuedSynchronizer 中同步状态 volatile int state，使用一个 32 位的整数来描述状态位，并暴露出 getState、setState 以及 compareAndSet 操作来读取和更新这个状态。这些方法都依赖于 j.u.c.atomic 包的支持，这个包提供了兼容 JSR133 中 volatile 在读和写上的语义，并且通过使用本地的 compare-and-swap 或 load-linked&#x2F;store-conditional 指令来实现 compareAndSetState，使得仅当同步状态拥有一个期望值的时候，才会被原子地设置成新值。<br>基于 AQS 的具体实现类必须根据暴露出的状态相关的方法定义 tryAcquire 和 tryRelease 方法，以控制 acquire 和 release 操作。当同步状态满足时，tryAcquire 方法必须返回 true，而当新的同步状态允许后续 acquire 时，tryRelease 方法也必须返回 true。这些方法都接受一个 int 类型的参数用于传递想要的状态。例如：可重入锁中，当某个线程从条件等待中返回，然后重新获取锁时，为了重新建立循环计数的场景。很多同步器并不需要这样一个参数，因此忽略它即可。</p>\n<h3 id=\"2、阻塞和唤醒线程\"><a href=\"#2、阻塞和唤醒线程\" class=\"headerlink\" title=\"2、阻塞和唤醒线程\"></a>2、阻塞和唤醒线程</h3><p>标准的 JAVA API 里面是无法挂起（阻塞）一个线程，然后在将来某个时刻再唤醒它的。JDK 1.0 的 API 里面有 Thread.suspend 和 Thread.resume，并且一直延续了下来。但是这些都是过时的 API，而且也是不推荐的做法。在 JDK 5.0 以后利用 JNI 在 LockSupport 类中实现了此特性。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">LockSupport.park()\nLockSupport.park(Object)\nLockSupport.parkNanos(Object, long)\nLockSupport.parkNanos(long)\nLockSupport.parkUntil(Object, long)\nLockSupport.parkUntil(long)\nLockSupport.unpark(Thread)</code></pre>\n\n<p>上面的 API 中 park()是在当前线程中调用，导致线程阻塞，带参数的 Object 是挂起的对象，这样监视的时候就能够知道此线程是因为什么资源而阻塞的。<br>而 park()返回的原因有以下 3 方面：</p>\n<ol>\n<li>其他某个线程以当前线程作为目标调用 unpark；</li>\n<li>其他某个线程中断 interrupt 当前线程；</li>\n<li>该调用不合逻辑地（即毫无理由地）返回。</li>\n</ol>\n<p>由于 park()立即返回，其中第三条就决定了需要循环检测，所以通常情况下需要在循环中去检测竞争资源来决定是否进行下一次阻塞。</p>\n<h3 id=\"3、保持队列\"><a href=\"#3、保持队列\" class=\"headerlink\" title=\"3、保持队列\"></a>3、保持队列</h3><p>同步队列的最佳选择是自身没有使用底层锁来构造的非阻塞数据结构，目前，业界对此很少有争议。而其中主要有两个选择：</p>\n<ul>\n<li>一个是 Mellor-Crummey 和 Scott 锁（MCS 锁）的变体，</li>\n<li>另一个是 Craig，Landin 和 Hagersten 锁（CLH 锁）的变体</li>\n</ul>\n<p>一直以来，CLH 锁仅被用于自旋锁。但是，在这个框架中，<strong>CLH 锁显然比 MCS 锁更合适</strong>。因为 CLH 锁可以更容易地去实现“取消（cancellation）”和“超时”功能，因此我们选择了 CLH 锁作为实现的基础。但是最终的设计已经与原来的 CLH 锁有较大的出入，因此下文将对此做出解释。<br>CLH 队列实际上并不那么像队列，因为它的入队和出队操作都与它的用途（即用作锁）紧密相关。它是一个链表队列，通过两个字段 head 和 tail 来存取，这两个字段是可原子更新的，两者在初始化时都指向了一个空节点。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649587815485-2db2f993-be7e-4572-9891-b805219c7081.png#clientId=u1eb0af4d-8aca-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u117765c1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=285&originWidth=694&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=23769&status=done&style=none&taskId=u4150c17c-432c-4bcc-859b-2db30788d31&title=\" alt=\"image.png\"><br>AQS 里面有三个核心字段：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private volatile int state;\nprivate transient volatile Node head;\nprivate transient volatile Node tail;</code></pre>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1650856645490-bea8bdec-5243-4d03-a77d-126059800ee9.png#clientId=u8c021430-ecfd-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=397&id=u37b7eb52&margin=%5Bobject%20Object%5D&name=image.png&originHeight=397&originWidth=842&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=62759&status=done&style=none&taskId=u95437ed0-7a5f-45b6-af1c-07fa5d1be41&title=&width=842\" alt=\"image.png\"><br>**Sync queue **同步队列，是一个双向列表。包括 head 节点和 tail 节点。head 节点主要用作后续的调度。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1650856674295-e2323641-638c-4e85-bf40-e5d5d3caa624.png#clientId=u8c021430-ecfd-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u6eb434c3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=259&originWidth=792&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=13037&status=done&style=none&taskId=u6f9fa3d2-642d-4d08-bac2-dd94dcc375f&title=\" alt=\"image.png\"><br>**Condition queue ** 非必须，单向列表。当程序中存在 cindition 的时候才会存在此列表。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1650856674311-4e054d57-e73f-4bf4-950e-ff0bbb7404e2.png#clientId=u8c021430-ecfd-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ud3233b96&margin=%5Bobject%20Object%5D&name=image.png&originHeight=236&originWidth=808&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=13578&status=done&style=none&taskId=uf7b0513c-978c-4b4b-9f0e-6d8a99c378d&title=\" alt=\"image.png\"></p>\n<p>其中 state 描述的有多少个线程取得了锁，对于互斥不可重入锁来说 state⇐1。<br>head&#x2F;tail 加上 CAS 操作就构成了一个 CLH 的 FIFO 队列，队列中的 Node 为一个双向链表。<br>AQS 中入队列(enqueue)，采用 CAS 操作，每次比较尾结点是否一致，然后插入的到尾结点中。<br>出队列(dequeue)，由于每一个节点也缓存了一个状态，决定是否出队列，因此当不满足条件时就需要自旋等待，一旦满足条件就将头结点设置为下一个节点。<br>CLH 锁的优点在于其入队和出队操作是快速、无锁的，以及无障碍的（即使在竞争下，某个线程总会赢得一次插入机会而能继续执行）；且探测是否有线程正在等待也很快（只要测试一下 head 是否与 tail 相等）；同时，“释放”状态是分散的，避免了一些不必要的内存竞争。<br>对于于独占锁和共享锁中，入队列和出队列的具体过程，后续会详细讲解，本文先讲解下同步队列中的 Node 节点的属性和结构。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">static final class Node &#123;\n    &#x2F;** 标示节点在共享模式下等待 *&#x2F;\n    static final Node SHARED &#x3D; new Node();\n    &#x2F;** 标示节点在独占模式下等待 *&#x2F;\n    static final Node EXCLUSIVE &#x3D; null;\n\n    &#x2F;** 线程被取消 *&#x2F;\n    static final int CANCELLED &#x3D;  1;\n    &#x2F;** 后继线程需要被唤醒 *&#x2F;\n    static final int SIGNAL    &#x3D; -1;\n    &#x2F;** 线程在condition上等待  *&#x2F;\n    static final int CONDITION &#x3D; -2;\n    &#x2F;**\n     * 下一个acquireShared应该无条件传播\n     *&#x2F;\n    static final int PROPAGATE &#x3D; -3;\n\n    &#x2F;**\n     *   CANCELLED:  节点因为超时或者对应的线程被interrupt被取消\n     *   SIGNAL:     节点的继任节点是（或者将要成为）BLOCKED状态（例如通过LockSupport.park()操作）。\n     *               因此当前节点一旦被释放（解锁）或者取消，就需要唤醒它的后继节点。\n     *               为避免竞争，acquire方法必须首先表明他们需要一个信号，然后重试原子acquire方法，\n     *               如果失败，就阻塞。\n     *   CONDITION:  节点当前是在状态队列中（因为不满足一个条件（Condition）而被阻塞），\n     *               直到节点的状态变成0，它才被使用作为一个同步队列节点。\n     *   PROPAGATE:  releaseShared应该被传播到其他的节点，它在doReleaseShared方法中被设置（仅头节点）\n     *   0:          正常状态，新生的非CONDITION节点都是此状态\n     *\n     *&#x2F;\n    volatile int waitStatus;\n\n    &#x2F;**\n     * 前驱节点\n     *&#x2F;\n    volatile Node prev;\n\n    &#x2F;**\n     * 后继节点\n     *&#x2F;\n    volatile Node next;\n\n    &#x2F;**\n     * 节点关联的线程\n     *&#x2F;\n    volatile Thread thread;\n\n    &#x2F;**\n     * 下一个在等待状态（condition）的节点，或者特殊的值 SHARED.\n     *&#x2F;\n    Node nextWaiter;\n&#125;</code></pre>\n\n<p>AQS 在 J.U.C 里面是一个非常核心的工具，而且也非常复杂，里面考虑到了非常多的逻辑实现，本文主要介绍了一些理论背景和相关的数据结构，后续会介绍 AQS 的其他特性和实现。</p>\n","categories":[{"name":"java","path":"api/categories/java.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"Lock","path":"api/tags/Lock.json"}]}