{"title":"JVM（一）Java内存区域与内存溢出","slug":"yuque/JVM（一）Java内存区域与内存溢出","date":"2016-01-04T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/jvm/java-oom.json","excerpt":"Java 内存区域Java虚拟机所管理的内存将包括以下几个运行时数据区域，如下图所示：程序计数器ProgramCounterRegister是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变程序计数器的值来选取下一条要执行的字节码指令，分支、循环、跳转、异常跳转、线程恢复等基础功能都需要依赖这个计数器来完成。由于 Java虚拟机的多线程时通过线程切换并分配处理器执行时间来实现的，对于单核处理器在某一个时间都只会有一个线程在运行，为了线程切换后能恢复到正确的执行位置，每个线程都需要维护一个独立的程序计数器，各个线程之","covers":["https://cdn.nlark.com/yuque/0/2022/png/104130/1648398202584-ea2c0566-27ce-4d75-ade9-46ec5fdd6861.png#clientId=u9ab6b3aa-6681-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uffe2023a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=508&originWidth=778&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=42074&status=done&style=none&taskId=u0aab7c79-af15-4f25-abdc-84c9405a262&title="],"content":"<h2 id=\"Java-内存区域\"><a href=\"#Java-内存区域\" class=\"headerlink\" title=\"Java 内存区域\"></a>Java 内存区域</h2><p>Java 虚拟机所管理的内存将包括以下几个运行时数据区域，如下图所示：<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398202584-ea2c0566-27ce-4d75-ade9-46ec5fdd6861.png#clientId=u9ab6b3aa-6681-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uffe2023a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=508&originWidth=778&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=42074&status=done&style=none&taskId=u0aab7c79-af15-4f25-abdc-84c9405a262&title=\" alt=\"image.png\"></p>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>ProgramCounterRegister 是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变程序计数器的值来选取下一条要执行的字节码指令，分支、循环、跳转、异常跳转、线程恢复等基础功能都需要依赖这个计数器来完成。<br>由于 Java 虚拟机的多线程时通过线程切换并分配处理器执行时间来实现的，对于单核处理器在某一个时间都只会有一个线程在运行，为了线程切换后能恢复到正确的执行位置，每个线程都需要维护一个独立的程序计数器，各个线程之间的计数器互不影响，独立存储。<br>如果当前线程正在执行一个 Java 方法，程序计数器记录的是正在执行的虚拟机字节码指令的指令。如果当前线程正在执行一个 Native 方法，程序计数器记录值则为空。此内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。</p>\n<h3 id=\"Java-虚拟机栈\"><a href=\"#Java-虚拟机栈\" class=\"headerlink\" title=\"Java 虚拟机栈\"></a>Java 虚拟机栈</h3><p>与程序计数器一样，Java 虚拟机也是线程私有的，它的生命周期与线程相同。每个方法被执行的时候会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。<br>如果线程请求栈深度大于虚拟机所允许的深度，抛出 StackOverflowError 异常；<br>如果虚拟机栈可以动态扩展，扩展时无法申请到足够的内存时会抛出 OutOfMemoryError。</p>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，只不过一个是执行 Java 方法（也是字节码）服务，而本地方法栈则是使用到的 Native 方法服务，HotSpot 虚拟机直接将两者合二为一，与虚拟机栈一样，本地方法栈也会抛出 StackOverflowError 和 OutOfMemoryError 异常。</p>\n<h3 id=\"Java-堆\"><a href=\"#Java-堆\" class=\"headerlink\" title=\"Java 堆\"></a>Java 堆</h3><p>Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。Java 堆是垃圾收集器管理的主要区域，很多时候称为 GC 堆。<br>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出 OutOfMemoryError</p>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><p>Method Area 与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、JIT 编译后的代码等数据。当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError。<br>Method Area 与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、JIT 编译后的代码等数据。但项目中如果存在类的动态编译，就需要观察方法区的大小是否能够满足类存储。<br>垃圾回收较少发生在该内存区域，它存储的信息相对比较稳定，回收的主要目标是常量池和对类型的卸载。对类型的卸载相当苛刻，要求满足以下三个条件才能算是“无用”的类：<br>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例<br>加载该类的 ClassLoader 已经被回收<br>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。<br>当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError。</p>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><p>Runtime Constant Pool 是方法区的一部分。用于存放编译器生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。<br>运行时常量池相对于 Class 文件常量池的一个重要特征在于其具备动态性，Java 语言并不要求常量一定只有编译期才能产生，在运行期间也能产生新的常量放入常量池中，如 String.intern()方法。当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。</p>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><p>Direct Memory 并不是虚拟机运行时数据区的一部分，也不是 Java 虚拟机规范中定义的内存区域，但是这部分也是频繁使用。在 Java 的 NIO 中使用到，服务器管理员忽略直接内存后果是，各个内存区域总和大于物理内存限制，从而导致动态扩展时出现 OutOfMemoryError 异常。</p>\n<h2 id=\"实战：OutOfMemoryError-异常\"><a href=\"#实战：OutOfMemoryError-异常\" class=\"headerlink\" title=\"实战：OutOfMemoryError 异常\"></a>实战：OutOfMemoryError 异常</h2><h3 id=\"1、Java-堆溢出\"><a href=\"#1、Java-堆溢出\" class=\"headerlink\" title=\"1、Java 堆溢出\"></a>1、Java 堆溢出</h3><p>Java 堆用于存储对象实例，我们只要不断创建对象，并且保证 GC Roots 到对象之间有可达路径来避免 GC 清除这些对象，就会在对象数量到达最大堆的容量限制后产生内存溢出异常。<br>VM Args: -Xms10m -Xmx10m -XX:+HeapDumpOnOutOfMemoryError<br>XX:+HeapDumpOnOutOfMemoryError 这个参数可以让虚拟机在出现内存溢出异常时 Dump 出当前的内存堆转储快照以便事后进行分析。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.List;\n&#x2F;**\n * VM Args: -Xms10m -Xmx10m -XX:+HeapDumpOnOutOfMemoryError\n *&#x2F;\npublic class HeapOOM &#123;\n    static class OOMObject&#123;\n        private String name;\n        public OOMObject(String name) &#123;\n            this.name &#x3D; name;\n        &#125;\n    &#125;\n    public static void main(String[] args) &#123;\n        List&lt;OOMObject&gt; list &#x3D; new ArrayList&lt;OOMObject&gt;();\n        long i &#x3D; 1;\n        while(true) &#123;\n            list.add(new OOMObject(&quot;IpConfig...&quot; + i++));\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>抛出的异常：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Dumping heap to java_pid27828.hprof ...\nHeap dump file created [14123367 bytes in 0.187 secs]\nException in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space\nat java.lang.AbstractStringBuilder.&lt;init&gt;(AbstractStringBuilder.java:45)\nat java.lang.StringBuilder.&lt;init&gt;(StringBuilder.java:92)\nat com.baoxian.HeapOOM.main(HeapOOM.java:22)</code></pre>\n\n<p>注：出现 Java 堆内存溢出时，异常堆栈信息 java.lang.OutOfMemoryError 后面会紧跟着 JavaHeapSpace。<br>要解决这个异常，一般手段是首先通过内存映像分析工具比如 Eclipse Memory Analyzer 对 dump 出来的堆转储快照进行分析，重点是确认内存中对象是否是必要的，也就是要弄清楚到底是出现了内存泄露 Memory Leak 还是内存溢出 Memory Overflow。<br>如果是内存泄露，可进一步通过工具查看泄露对象到 GC Roots 的引用链。于是就能找到泄露对象时通过怎样的路径与 GC Roots 相关联并导致垃圾收集器无法自动回收它们。掌握了泄露对象的类型信息，以及 GC Roots 引用链的信息，就可以比较准确的定位出泄露代码的位置了。<br>如果不存在泄露，那么就该修改-Xms 和-Xms 堆参数看能否加大点。</p>\n<h3 id=\"2、虚拟机栈和本地方法栈溢出\"><a href=\"#2、虚拟机栈和本地方法栈溢出\" class=\"headerlink\" title=\"2、虚拟机栈和本地方法栈溢出\"></a>2、虚拟机栈和本地方法栈溢出</h3><p>-Xoss 参数设置本地方法栈大小，对于 HotSpot 没用。栈容量只由-Xss 参数设定。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * VM Args: -Xss128k\n * @author Administrator\n *\n *&#x2F;\npublic class JavaVMStackSOF &#123;\n    private int stackLength &#x3D; 1;\n    public void stackLeak() &#123;\n        stackLength++;\n        stackLeak();\n    &#125;\n    public static void main(String[] args) throws Throwable&#123;\n        JavaVMStackSOF oom &#x3D; new JavaVMStackSOF();\n        try &#123;\n            oom.stackLeak();\n        &#125; catch (Throwable e) &#123;\n            System.out.println(&quot;stack length: &quot; + oom.stackLength);\n            throw e;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>抛出异常：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">stack length: 1007\nException in thread &quot;main&quot; java.lang.StackOverflowError\nat com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\nat com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)\nat com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)\nat com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)</code></pre>\n\n<h3 id=\"3、运行时常量池溢出\"><a href=\"#3、运行时常量池溢出\" class=\"headerlink\" title=\"3、运行时常量池溢出\"></a>3、运行时常量池溢出</h3><p>运行时常量池分配在方法区内，可以通过-XX:PermSize 和-XX:MaxPermSize 限制方法区大小，从而间接限制其中常量池的容量。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.List;\n&#x2F;**\n * VM Args: -XX:PermSize&#x3D;10M -XX:MaxPermSize&#x3D;10M\n *&#x2F;\npublic class RuntimeConstantPoolOOM &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F; 使用List保持着常量池引用，避免Full GC回收常量池行为\n        List&lt;String&gt; list &#x3D; new ArrayList&lt;String&gt;;();\n        &#x2F;&#x2F; 10MB的PermSize在integer范围内足够产生OOM了\n        int i &#x3D; 0;\n        while (true) &#123;\n            list.add(String.valueOf(i++).intern());\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>异常：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: PermGen space\nat java.lang.String.intern(Native Method)\nat com.baoxian.RuntimeConstantPoolOOM.main(RuntimeConstantPoolOOM.java:18)</code></pre>\n\n<p>运行时常量池溢出，在 java.lang.OutOfMemoryError 后面紧跟着是 PermGen space</p>\n<h3 id=\"4、方法区溢出\"><a href=\"#4、方法区溢出\" class=\"headerlink\" title=\"4、方法区溢出\"></a>4、方法区溢出</h3><p>方法区用于存放 Class 的相关信息，如类名、访问修饰符、常量池、字段描述符、方法描述等。对于这个区域的测试，基本的思路是运行时产生大量的类去填满方法区，直到溢出。比如动态代理会生成动态类。<br>使用 CGLib 技术直接操作字节码运行，生成大量的动态类。当前很多主流框架如 Spring 和 Hibernate 对类进行增强都会使用 CGLib 这类字节码技术，增强的类越多，就需要越大的方法区来保证动态生成的 Class 可以加载入内存。<br>异常：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: PermGen space at java.lang.String.intern(Native Method)</code></pre>\n\n<p>同样，跟常量池一样，都是 PermGen space 字符串出现<br>方法区溢出也是一种常见的内存溢出异常，一个类如果要被垃圾收集器回收，判定条件是非常苛刻的。在经常动态生成大量 Class 的应用中，需要特别注意类的回收状况。这类场景除了上面提到的程序使用 GCLib 字节码技术外，常见的还有：大量 JSP 或动态产生的 JSP 文件的应用（JSP 第一次运行时需要编译为 Java 类）、基于 OSGi 应用等。</p>\n<h3 id=\"5、本机直接内存溢出\"><a href=\"#5、本机直接内存溢出\" class=\"headerlink\" title=\"5、本机直接内存溢出\"></a>5、本机直接内存溢出</h3><p>DirectMemory 容量可以通过-XX:MaxDirectMemorySize 指定，如果不指定，则默认与 Java 堆的最大值-Xmx 指定一样。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * VM Args: -Xmx20M -XX:MaxDirectMemorySize&#x3D;10M\n *&#x2F;\npublic class DirectMemoryOOM &#123;\n    private static final int _1MB &#x3D; 1024 * 1024;\n    public static void main(String[] args) &#123;\n        Field unsafeField &#x3D; Unsafe.class.getDeclaredFields()[0];\n        unsafeField.setAccessible(true);\n        Unsafe unsafe &#x3D; (Unsafe) unsafeField.get(null);\n        while(true) &#123;\n            unsafe.allocateMemory(_1MB);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>在 OutOfMemoryError 后面不会有任何东西了，这就是 DirectMemory 内存溢出了。</p>\n","more":"<h2 id=\"Java-内存区域\"><a href=\"#Java-内存区域\" class=\"headerlink\" title=\"Java 内存区域\"></a>Java 内存区域</h2><p>Java 虚拟机所管理的内存将包括以下几个运行时数据区域，如下图所示：<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398202584-ea2c0566-27ce-4d75-ade9-46ec5fdd6861.png#clientId=u9ab6b3aa-6681-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uffe2023a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=508&originWidth=778&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=42074&status=done&style=none&taskId=u0aab7c79-af15-4f25-abdc-84c9405a262&title=\" alt=\"image.png\"></p>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>ProgramCounterRegister 是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变程序计数器的值来选取下一条要执行的字节码指令，分支、循环、跳转、异常跳转、线程恢复等基础功能都需要依赖这个计数器来完成。<br>由于 Java 虚拟机的多线程时通过线程切换并分配处理器执行时间来实现的，对于单核处理器在某一个时间都只会有一个线程在运行，为了线程切换后能恢复到正确的执行位置，每个线程都需要维护一个独立的程序计数器，各个线程之间的计数器互不影响，独立存储。<br>如果当前线程正在执行一个 Java 方法，程序计数器记录的是正在执行的虚拟机字节码指令的指令。如果当前线程正在执行一个 Native 方法，程序计数器记录值则为空。此内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。</p>\n<h3 id=\"Java-虚拟机栈\"><a href=\"#Java-虚拟机栈\" class=\"headerlink\" title=\"Java 虚拟机栈\"></a>Java 虚拟机栈</h3><p>与程序计数器一样，Java 虚拟机也是线程私有的，它的生命周期与线程相同。每个方法被执行的时候会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。<br>如果线程请求栈深度大于虚拟机所允许的深度，抛出 StackOverflowError 异常；<br>如果虚拟机栈可以动态扩展，扩展时无法申请到足够的内存时会抛出 OutOfMemoryError。</p>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，只不过一个是执行 Java 方法（也是字节码）服务，而本地方法栈则是使用到的 Native 方法服务，HotSpot 虚拟机直接将两者合二为一，与虚拟机栈一样，本地方法栈也会抛出 StackOverflowError 和 OutOfMemoryError 异常。</p>\n<h3 id=\"Java-堆\"><a href=\"#Java-堆\" class=\"headerlink\" title=\"Java 堆\"></a>Java 堆</h3><p>Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。Java 堆是垃圾收集器管理的主要区域，很多时候称为 GC 堆。<br>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出 OutOfMemoryError</p>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><p>Method Area 与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、JIT 编译后的代码等数据。当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError。<br>Method Area 与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、JIT 编译后的代码等数据。但项目中如果存在类的动态编译，就需要观察方法区的大小是否能够满足类存储。<br>垃圾回收较少发生在该内存区域，它存储的信息相对比较稳定，回收的主要目标是常量池和对类型的卸载。对类型的卸载相当苛刻，要求满足以下三个条件才能算是“无用”的类：<br>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例<br>加载该类的 ClassLoader 已经被回收<br>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。<br>当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError。</p>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><p>Runtime Constant Pool 是方法区的一部分。用于存放编译器生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。<br>运行时常量池相对于 Class 文件常量池的一个重要特征在于其具备动态性，Java 语言并不要求常量一定只有编译期才能产生，在运行期间也能产生新的常量放入常量池中，如 String.intern()方法。当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。</p>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><p>Direct Memory 并不是虚拟机运行时数据区的一部分，也不是 Java 虚拟机规范中定义的内存区域，但是这部分也是频繁使用。在 Java 的 NIO 中使用到，服务器管理员忽略直接内存后果是，各个内存区域总和大于物理内存限制，从而导致动态扩展时出现 OutOfMemoryError 异常。</p>\n<h2 id=\"实战：OutOfMemoryError-异常\"><a href=\"#实战：OutOfMemoryError-异常\" class=\"headerlink\" title=\"实战：OutOfMemoryError 异常\"></a>实战：OutOfMemoryError 异常</h2><h3 id=\"1、Java-堆溢出\"><a href=\"#1、Java-堆溢出\" class=\"headerlink\" title=\"1、Java 堆溢出\"></a>1、Java 堆溢出</h3><p>Java 堆用于存储对象实例，我们只要不断创建对象，并且保证 GC Roots 到对象之间有可达路径来避免 GC 清除这些对象，就会在对象数量到达最大堆的容量限制后产生内存溢出异常。<br>VM Args: -Xms10m -Xmx10m -XX:+HeapDumpOnOutOfMemoryError<br>XX:+HeapDumpOnOutOfMemoryError 这个参数可以让虚拟机在出现内存溢出异常时 Dump 出当前的内存堆转储快照以便事后进行分析。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.List;\n&#x2F;**\n * VM Args: -Xms10m -Xmx10m -XX:+HeapDumpOnOutOfMemoryError\n *&#x2F;\npublic class HeapOOM &#123;\n    static class OOMObject&#123;\n        private String name;\n        public OOMObject(String name) &#123;\n            this.name &#x3D; name;\n        &#125;\n    &#125;\n    public static void main(String[] args) &#123;\n        List&lt;OOMObject&gt; list &#x3D; new ArrayList&lt;OOMObject&gt;();\n        long i &#x3D; 1;\n        while(true) &#123;\n            list.add(new OOMObject(&quot;IpConfig...&quot; + i++));\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>抛出的异常：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Dumping heap to java_pid27828.hprof ...\nHeap dump file created [14123367 bytes in 0.187 secs]\nException in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space\nat java.lang.AbstractStringBuilder.&lt;init&gt;(AbstractStringBuilder.java:45)\nat java.lang.StringBuilder.&lt;init&gt;(StringBuilder.java:92)\nat com.baoxian.HeapOOM.main(HeapOOM.java:22)</code></pre>\n\n<p>注：出现 Java 堆内存溢出时，异常堆栈信息 java.lang.OutOfMemoryError 后面会紧跟着 JavaHeapSpace。<br>要解决这个异常，一般手段是首先通过内存映像分析工具比如 Eclipse Memory Analyzer 对 dump 出来的堆转储快照进行分析，重点是确认内存中对象是否是必要的，也就是要弄清楚到底是出现了内存泄露 Memory Leak 还是内存溢出 Memory Overflow。<br>如果是内存泄露，可进一步通过工具查看泄露对象到 GC Roots 的引用链。于是就能找到泄露对象时通过怎样的路径与 GC Roots 相关联并导致垃圾收集器无法自动回收它们。掌握了泄露对象的类型信息，以及 GC Roots 引用链的信息，就可以比较准确的定位出泄露代码的位置了。<br>如果不存在泄露，那么就该修改-Xms 和-Xms 堆参数看能否加大点。</p>\n<h3 id=\"2、虚拟机栈和本地方法栈溢出\"><a href=\"#2、虚拟机栈和本地方法栈溢出\" class=\"headerlink\" title=\"2、虚拟机栈和本地方法栈溢出\"></a>2、虚拟机栈和本地方法栈溢出</h3><p>-Xoss 参数设置本地方法栈大小，对于 HotSpot 没用。栈容量只由-Xss 参数设定。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * VM Args: -Xss128k\n * @author Administrator\n *\n *&#x2F;\npublic class JavaVMStackSOF &#123;\n    private int stackLength &#x3D; 1;\n    public void stackLeak() &#123;\n        stackLength++;\n        stackLeak();\n    &#125;\n    public static void main(String[] args) throws Throwable&#123;\n        JavaVMStackSOF oom &#x3D; new JavaVMStackSOF();\n        try &#123;\n            oom.stackLeak();\n        &#125; catch (Throwable e) &#123;\n            System.out.println(&quot;stack length: &quot; + oom.stackLength);\n            throw e;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>抛出异常：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">stack length: 1007\nException in thread &quot;main&quot; java.lang.StackOverflowError\nat com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\nat com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)\nat com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)\nat com.baoxian.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:12)</code></pre>\n\n<h3 id=\"3、运行时常量池溢出\"><a href=\"#3、运行时常量池溢出\" class=\"headerlink\" title=\"3、运行时常量池溢出\"></a>3、运行时常量池溢出</h3><p>运行时常量池分配在方法区内，可以通过-XX:PermSize 和-XX:MaxPermSize 限制方法区大小，从而间接限制其中常量池的容量。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.List;\n&#x2F;**\n * VM Args: -XX:PermSize&#x3D;10M -XX:MaxPermSize&#x3D;10M\n *&#x2F;\npublic class RuntimeConstantPoolOOM &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F; 使用List保持着常量池引用，避免Full GC回收常量池行为\n        List&lt;String&gt; list &#x3D; new ArrayList&lt;String&gt;;();\n        &#x2F;&#x2F; 10MB的PermSize在integer范围内足够产生OOM了\n        int i &#x3D; 0;\n        while (true) &#123;\n            list.add(String.valueOf(i++).intern());\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>异常：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: PermGen space\nat java.lang.String.intern(Native Method)\nat com.baoxian.RuntimeConstantPoolOOM.main(RuntimeConstantPoolOOM.java:18)</code></pre>\n\n<p>运行时常量池溢出，在 java.lang.OutOfMemoryError 后面紧跟着是 PermGen space</p>\n<h3 id=\"4、方法区溢出\"><a href=\"#4、方法区溢出\" class=\"headerlink\" title=\"4、方法区溢出\"></a>4、方法区溢出</h3><p>方法区用于存放 Class 的相关信息，如类名、访问修饰符、常量池、字段描述符、方法描述等。对于这个区域的测试，基本的思路是运行时产生大量的类去填满方法区，直到溢出。比如动态代理会生成动态类。<br>使用 CGLib 技术直接操作字节码运行，生成大量的动态类。当前很多主流框架如 Spring 和 Hibernate 对类进行增强都会使用 CGLib 这类字节码技术，增强的类越多，就需要越大的方法区来保证动态生成的 Class 可以加载入内存。<br>异常：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: PermGen space at java.lang.String.intern(Native Method)</code></pre>\n\n<p>同样，跟常量池一样，都是 PermGen space 字符串出现<br>方法区溢出也是一种常见的内存溢出异常，一个类如果要被垃圾收集器回收，判定条件是非常苛刻的。在经常动态生成大量 Class 的应用中，需要特别注意类的回收状况。这类场景除了上面提到的程序使用 GCLib 字节码技术外，常见的还有：大量 JSP 或动态产生的 JSP 文件的应用（JSP 第一次运行时需要编译为 Java 类）、基于 OSGi 应用等。</p>\n<h3 id=\"5、本机直接内存溢出\"><a href=\"#5、本机直接内存溢出\" class=\"headerlink\" title=\"5、本机直接内存溢出\"></a>5、本机直接内存溢出</h3><p>DirectMemory 容量可以通过-XX:MaxDirectMemorySize 指定，如果不指定，则默认与 Java 堆的最大值-Xmx 指定一样。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * VM Args: -Xmx20M -XX:MaxDirectMemorySize&#x3D;10M\n *&#x2F;\npublic class DirectMemoryOOM &#123;\n    private static final int _1MB &#x3D; 1024 * 1024;\n    public static void main(String[] args) &#123;\n        Field unsafeField &#x3D; Unsafe.class.getDeclaredFields()[0];\n        unsafeField.setAccessible(true);\n        Unsafe unsafe &#x3D; (Unsafe) unsafeField.get(null);\n        while(true) &#123;\n            unsafe.allocateMemory(_1MB);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>在 OutOfMemoryError 后面不会有任何东西了，这就是 DirectMemory 内存溢出了。</p>\n","categories":[{"name":"jvm","path":"api/categories/jvm.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"JVM","path":"api/tags/JVM.json"}]}