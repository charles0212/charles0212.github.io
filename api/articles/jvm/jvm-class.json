{"title":"JVM（四）类文件结构解析","slug":"yuque/JVM（四）类文件结构解析","date":"2016-07-25T16:00:00.000Z","updated":"2022-05-15T04:19:28.489Z","comments":true,"path":"api/articles/jvm/jvm-class.json","excerpt":"Java Class 文件结构如下图所示对于以下 java 源文件代码public class Charles implements ICharles{  private String name;  public void say() {    System.out.println(\"charles\");  }  public String getName() {    return name;  }  public void setName(String name) {    this.name = name;  }}生成的类文件字节码为根据 cla","covers":["https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732871-52f4c2d6-8314-4223-b07a-ea59ac0f6ce7.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u3b5ec65e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=924&originWidth=1244&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=101607&status=done&style=none&taskId=ufab1464f-fa80-4848-9d69-094bca2ea40&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732886-29c2ac32-cf7a-4197-828b-aa50372bcb8f.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u824c699c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=938&originWidth=698&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=139186&status=done&style=none&taskId=ue583a253-101a-4bf5-98b2-e68a1505d26&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732697-4e26a4fb-c6db-4c60-ad03-f163bd119932.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub22a6d8b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=42&originWidth=672&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=4682&status=done&style=none&taskId=ub4c3438e-0909-4a10-933c-0fe27f518e9&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732717-62f197a3-c22e-40e8-b949-cf7f496100ae.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u64ae0dc0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=168&originWidth=363&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=7210&status=done&style=none&taskId=ufd964a7a-387a-4dde-bbbd-c7e8b599f6d&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648398733921-7bba13f7-7ad1-44a7-bd15-f8f0edfba5cb.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u9ed34256&margin=%5Bobject%20Object%5D&name=image.png&originHeight=261&originWidth=628&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=20676&status=done&style=none&taskId=u313c16ca-c3ce-422c-bf98-5fc5aa89447&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648398734176-01cb4ca7-9523-4323-8ba0-c3e1a805dbf7.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ua0c3d3c4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=65&originWidth=676&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=8716&status=done&style=none&taskId=ufee2647c-2a25-4c24-8068-6408234b6e1&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648398734753-1fcd2abb-7059-48f4-801f-9ce33bbb3776.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue45d8e83&margin=%5Bobject%20Object%5D&name=image.png&originHeight=277&originWidth=481&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=20720&status=done&style=none&taskId=u0e4e1bd2-7441-49d9-a380-ae8375e5a30&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648398735062-35199786-b1c2-4f29-b1c1-5eed2278042d.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc5d3c4dd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=269&originWidth=1006&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=29906&status=done&style=none&taskId=u913c6a82-a82e-4ebe-8254-16f512a8834&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648398735593-75552d83-a487-48e3-a42f-5208bedc476c.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u5ddea03c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=155&originWidth=823&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=11220&status=done&style=none&taskId=u6ba5f3d9-ae6d-4340-98fc-6f817a2ec00&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648398736334-c14abb13-0cb4-4db4-a139-8ce074f9cf98.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u31cb4098&margin=%5Bobject%20Object%5D&name=image.png&originHeight=421&originWidth=1038&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=39632&status=done&style=none&taskId=u5b8d0de5-add9-4410-885b-a8458fac196&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648398737697-7091b332-16b6-4eb1-bcbc-00a9815d4201.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc8d5dfba&margin=%5Bobject%20Object%5D&name=image.png&originHeight=442&originWidth=1016&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=47941&status=done&style=none&taskId=uf86684d7-057f-45da-8024-78a82d36454&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648398737761-b07f4139-6c51-4080-b613-8e700c32ff69.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u8f399484&margin=%5Bobject%20Object%5D&name=image.png&originHeight=214&originWidth=634&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=17304&status=done&style=none&taskId=u0c1cb6bd-a4e9-4077-9ea2-10198f04b7b&title="],"content":"<h2 id=\"Java-Class-文件结构\"><a href=\"#Java-Class-文件结构\" class=\"headerlink\" title=\"Java Class 文件结构\"></a>Java Class 文件结构</h2><p>如下图所示<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732871-52f4c2d6-8314-4223-b07a-ea59ac0f6ce7.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u3b5ec65e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=924&originWidth=1244&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=101607&status=done&style=none&taskId=ufab1464f-fa80-4848-9d69-094bca2ea40&title=\" alt=\"image.png\"><br>对于以下 java 源文件代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Charles implements ICharles&#123;\n  private String name;\n  public void say() &#123;\n    System.out.println(&quot;charles&quot;);\n  &#125;\n  public String getName() &#123;\n    return name;\n  &#125;\n  public void setName(String name) &#123;\n    this.name &#x3D; name;\n  &#125;\n&#125;</code></pre>\n\n<p>生成的类文件字节码为<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732886-29c2ac32-cf7a-4197-828b-aa50372bcb8f.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u824c699c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=938&originWidth=698&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=139186&status=done&style=none&taskId=ue583a253-101a-4bf5-98b2-e68a1505d26&title=\" alt=\"image.png\"><br>根据 class 文件结构分析字节码</p>\n<h3 id=\"1、-魔数-magic\"><a href=\"#1、-魔数-magic\" class=\"headerlink\" title=\"1、 魔数(magic)\"></a>1、 魔数(magic)</h3><p>魔数的唯一作用是确定这个文件是否为一个能被虚拟机所接受的 Class 文件。魔数值固定为 0xCAFEBABE，不会改。</p>\n<h3 id=\"2、-版本号-minor-version-major-version\"><a href=\"#2、-版本号-minor-version-major-version\" class=\"headerlink\" title=\"2、 版本号(minor_version, major_version)\"></a>2、 版本号(minor_version, major_version)</h3><p>minor_version 和 major_version 的值分别表示 Class 文件的副、主版本号，它们共同构成了 Class 文件的格式版本号。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732697-4e26a4fb-c6db-4c60-ad03-f163bd119932.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub22a6d8b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=42&originWidth=672&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=4682&status=done&style=none&taskId=ub4c3438e-0909-4a10-933c-0fe27f518e9&title=\" alt=\"image.png\"><br>其中，00 00（次版本号），00 31（主版本号），即十进制版本号 49，使用 JDK1.6 编译输出</p>\n<h3 id=\"3、常量池计数器-constant-pool-count\"><a href=\"#3、常量池计数器-constant-pool-count\" class=\"headerlink\" title=\"3、常量池计数器(constant_pool_count)\"></a>3、常量池计数器(constant_pool_count)</h3><p>常量池是 class 文件中非常重要的结构，它描述着整个 class 文件的字面量信息。常量池是由一组 constant_pool 结构体数组组成的，而数组的大小则由常量池计数器指定。常量池计数器 constant_pool_count 的值 &#x3D;constant_pool 表中的成员数 + 1。constant_pool 表的索引值只有在大于 0 且小于 constant_pool_count 时才会被认为是有效的。</p>\n<h3 id=\"4、常量池数据区-constant-pool-contstant-pool-count-1\"><a href=\"#4、常量池数据区-constant-pool-contstant-pool-count-1\" class=\"headerlink\" title=\"4、常量池数据区(constant_pool[contstant_pool_count-1])\"></a>4、常量池数据区(constant_pool[contstant_pool_count-1])</h3><p>代表常量池个数以及常量池信息，constant_pool 是一种表结构,它包含 Class 文件结构及其子结构中引用的所有字符串常量、 类或接口名、字段名和其它常量。常量池中的每一项都具备相同的格式特征，第一个字节作为类型标记用于识别该项是哪种类型的常量，称为 “tag byte” 。常量池的索引范围是 1 至 constant_pool_count-1。<br>常量池，主要分两种字面常量（Literal）和符号引用（Symbolic reference） 。<br>其中符号引用属于编译原理方面概念，主要包含以下三类常量：</p>\n<ol>\n<li>类和接口的权限定名</li>\n<li>字段的名称和描述符</li>\n<li>方法的名称和描述符<br>所有的常量池项都具有如下通用格式：<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732717-62f197a3-c22e-40e8-b949-cf7f496100ae.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u64ae0dc0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=168&originWidth=363&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=7210&status=done&style=none&taskId=ufd964a7a-387a-4dde-bbbd-c7e8b599f6d&title=\" alt=\"image.png\"><br>常量池中，每个 cp_info 项的格式必须相同，它们都以一个表示 cp_info 类型的单字节“tag”项开头。后面 info[]项的内容 tag 由的类型所决定。tag 有效的类型和对应的取值在表 4.3 列出。每个 tag 项必须跟随 2 个或更多的字节，这些字节用于给定这个常量的信息，附加字节的信息格式由 tag 的值决定。<br>主要有以下类型<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732745-4d1e9739-464c-4054-9ea6-1853ee3c05f4.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc43c9409&margin=%5Bobject%20Object%5D&name=image.png&originHeight=415&originWidth=545&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=44547&status=done&style=none&taskId=u797a336c-11d2-4a0d-bb12-9e2ae1ea4db&title=\" alt=\"image.png\"><br>本主要就 CONSTANT_Class_info 和 CONSTANT_Utf8_info 进行讨论。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398733619-7a66c3bf-4b96-4168-9c6a-d957a8ffa395.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u6620cb21&margin=%5Bobject%20Object%5D&name=image.png&originHeight=283&originWidth=1115&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=45631&status=done&style=none&taskId=u745db2b6-cbfe-40ab-883b-bc76e4db1f5&title=\" alt=\"image.png\"><br>本例中 class 的常量池为<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398733670-9b15bc64-d471-4102-bbbc-0a3da81990b0.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ud55019e9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=550&originWidth=675&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=117763&status=done&style=none&taskId=u40fc202b-5faa-42e2-a9cf-946d72a3b74&title=\" alt=\"image.png\"></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">其中常量池的大小为0x28即为（2*16+8）-1 &#x3D; 39，索引为0不会用到。\n07 00 02 (CONSTANT_Class_info)\n#1 &#x3D; Class    &#x3D;2 （第一个常量为类信息，name索引为2）\n01 00 13 63 6f 6d 2f 63 68 61 72 6c 65 73 2f 43 68 61 72 6c 65 73\n00 13 字符串长度为19个字节\n63 6f 6d 2f 63 68 61 72 6c 65 73 2f 43 68 61 72 6c 65 73\n标示字符串com&#x2F;charles&#x2F;Charles\n#2 &#x3D; Utf8     com&#x2F;charles&#x2F;Charles（第二个常量为utf8字符串）</code></pre>\n\n<p>其他的类型可以参考“Java 虚拟机规范(Java_SE_7)”和“深入理解 Java 虚拟机 JVM 高级特性与最佳实践”书籍。</p>\n<h3 id=\"6、类访问标志-access-flags\"><a href=\"#6、类访问标志-access-flags\" class=\"headerlink\" title=\"6、类访问标志(access_flags)\"></a>6、类访问标志(access_flags)</h3><p>访问标志，access_flags 是一种掩码标志，用于表示某个类或者接口的访问权限及基础属性。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398733921-7bba13f7-7ad1-44a7-bd15-f8f0edfba5cb.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u9ed34256&margin=%5Bobject%20Object%5D&name=image.png&originHeight=261&originWidth=628&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=20676&status=done&style=none&taskId=u313c16ca-c3ce-422c-bf98-5fc5aa89447&title=\" alt=\"image.png\"></p>\n<h3 id=\"7、类索引-this-class\"><a href=\"#7、类索引-this-class\" class=\"headerlink\" title=\"7、类索引(this_class)\"></a>7、类索引(this_class)</h3><p>类索引，this_class 的值必须是对 constant_pool 表中项目的一个有效索引值。constant_pool 表在这个索引处的项必须为 CONSTANT_Class_info 类型常量，表示这个 Class 文件所定义的类或接口。</p>\n<h3 id=\"8、父类索引-super-class\"><a href=\"#8、父类索引-super-class\" class=\"headerlink\" title=\"8、父类索引(super_class)\"></a>8、父类索引(super_class)</h3><p>父类索引，对于类来说，super_class 的值必须为 0 或者是对 constant_pool 表中项目的一个有效索引值。如果它的值不为 0，那 constant_pool 表在这个索引处的项必须为 CONSTANT_Class_info 类型常量，表示这个 Class 文件所定义的类的直接父类。当前类的直接父类，以及它所有间接父类的 access_flag 中都不能带有 ACC_FINAL 标记。对于接口来说，它的 Class 文件的 super_class 项的值必须是对 constant_pool 表中项目的一个有效索引值。constant_pool 表在这个索引处的项必须为代表 java.lang.Object 的 CONSTANT_Class_info 类型常量 。如果 Class 文件的 super_class 的值为 0，那这个 Class 文件只可能是定义的是 java.lang.Object 类，只有它是唯一没有父类的类。</p>\n<h3 id=\"9、接口计数器-interfaces-count\"><a href=\"#9、接口计数器-interfaces-count\" class=\"headerlink\" title=\"9、接口计数器(interfaces_count)\"></a>9、接口计数器(interfaces_count)</h3><p>接口计数器，interfaces_count 的值表示当前类或接口的直接父接口数量。</p>\n<h3 id=\"10、接口信息数据区-interfaces-interfaces-count\"><a href=\"#10、接口信息数据区-interfaces-interfaces-count\" class=\"headerlink\" title=\"10、接口信息数据区(interfaces[interfaces_count])\"></a>10、接口信息数据区(interfaces[interfaces_count])</h3><p>接口表，interfaces[]数组中的每个成员的值必须是一个对 constant_pool 表中项目的一个有效索引值，它的长度为 interfaces_count。每个成员 interfaces[i] 必须为 CONSTANT_Class_info 类型常量，其中 0 ≤ i &lt;interfaces_count。在 interfaces[]数组中，成员所表示的接口顺序和对应的源代码中给定的接口顺序（从左至右）一样，即 interfaces[0]对应的是源代码中最左边的接口。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398734176-01cb4ca7-9523-4323-8ba0-c3e1a805dbf7.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ua0c3d3c4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=65&originWidth=676&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=8716&status=done&style=none&taskId=ufee2647c-2a25-4c24-8068-6408234b6e1&title=\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">flags: ACC_PUBLIC, ACC_SUPER\n   #1 &#x3D; Class              #2             &#x2F;&#x2F;  com&#x2F;charles&#x2F;Charles\n   #2 &#x3D; Utf8               com&#x2F;charles&#x2F;Charles\n   #3 &#x3D; Class              #4             &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object\n   #4 &#x3D; Utf8               java&#x2F;lang&#x2F;Object\n   #5 &#x3D; Class              #6             &#x2F;&#x2F;  com&#x2F;charles&#x2F;ICharles\n   #6 &#x3D; Utf8               com&#x2F;charles&#x2F;ICharles\n00 21 标示类访问标示为ACC_PUBLIC, ACC_SUPER\n00 01 类为com&#x2F;charles&#x2F;Charles\n00 03 父类为java&#x2F;lang&#x2F;Object\n00 01 实现了1个接口\n00 05 接口为com&#x2F;charles&#x2F;ICharles</code></pre>\n\n<h3 id=\"11、字段计数器-fields-count\"><a href=\"#11、字段计数器-fields-count\" class=\"headerlink\" title=\"11、字段计数器(fields_count)\"></a>11、字段计数器(fields_count)</h3><p>字段计数器，fields_count 的值表示当前 Class 文件 fields[]数组的成员个数。 fields[]数组中每一项都是一个 field_info 结构的数据项，它用于表示该类或接口声明的类字段或者实例字段。</p>\n<h3 id=\"12、字段信息数据区-fields-fields-count\"><a href=\"#12、字段信息数据区-fields-fields-count\" class=\"headerlink\" title=\"12、字段信息数据区(fields[fields_count])\"></a>12、字段信息数据区(fields[fields_count])</h3><p>字段表，fields[]数组中的每个成员都必须是一个 fields_info 结构的数据项，用于表示当前类或接口中某个字段的完整描述。 fields[]数组描述当前类或接口声明的所有字段，但不包括从父类或父接口继承的部分。<br>其中字段访问 flag 为<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398734753-1fcd2abb-7059-48f4-801f-9ce33bbb3776.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue45d8e83&margin=%5Bobject%20Object%5D&name=image.png&originHeight=277&originWidth=481&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=20720&status=done&style=none&taskId=u0e4e1bd2-7441-49d9-a380-ae8375e5a30&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398734758-3dd06ec2-cd4f-4c93-9f26-ff4b00b0ea4a.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ud31b8499&margin=%5Bobject%20Object%5D&name=image.png&originHeight=255&originWidth=1003&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=29267&status=done&style=none&taskId=uc4bff24f-af86-4e14-a839-53178c0ad14&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398734863-fafa7e51-83fd-4569-a73e-137c88d3a8a7.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ucdc608de&margin=%5Bobject%20Object%5D&name=image.png&originHeight=36&originWidth=664&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=5030&status=done&style=none&taskId=u1f0798de-4bd8-4ce9-a6bb-9febe2ce98f&title=\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">#7 &#x3D; Utf8               name\n#8 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;String;\n00 01 类有1个字段\n00 02 字段的访问标示为ACC_PRIVATE\n00 07 字段名为name\n00 08 字段描述符为Ljava&#x2F;lang&#x2F;String;\n00 00\n没有属性信息数据区</code></pre>\n\n<h3 id=\"13、方法计数器-methods-count\"><a href=\"#13、方法计数器-methods-count\" class=\"headerlink\" title=\"13、方法计数器(methods_count)\"></a>13、方法计数器(methods_count)</h3><p>方法计数器， methods_count 的值表示当前 Class 文件 methods[]数组的成员个数。Methods[]数组中每一项都是一个 method_info 结构的数据项。</p>\n<h3 id=\"14、方法信息数据区-methods-methods-count\"><a href=\"#14、方法信息数据区-methods-methods-count\" class=\"headerlink\" title=\"14、方法信息数据区(methods[methods_count])\"></a>14、方法信息数据区(methods[methods_count])</h3><p>方法表，methods[] 数组中的每个成员都必须是一个 method_info 结构的数据项，用于表示当前类或接口中某个方法的完整描述。如果某个 method_info 结构的 access_flags 项既没有设置 ACC_NATIVE 标志也没有设置 ACC_ABSTRACT 标志，那么它所对应的方法体就应当可以被 Java 虚拟机直接从当前类加载，而不需要引用其它类。 method_info 结构可以表示类和接口中定义的所有方法，包括实例方法、类方法、实例初始化方法方法和类或接口初始化方法方法 。methods[]数组只描述当前类或接口中声明的方法，不包括从父类或父接口继承的方法。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398735062-35199786-b1c2-4f29-b1c1-5eed2278042d.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc5d3c4dd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=269&originWidth=1006&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=29906&status=done&style=none&taskId=u913c6a82-a82e-4ebe-8254-16f512a8834&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398735524-d63737be-09a7-42d0-be73-e0f4f682ce58.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc8e9b0fa&margin=%5Bobject%20Object%5D&name=image.png&originHeight=349&originWidth=669&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=53293&status=done&style=none&taskId=u727fc0a2-5b46-443f-b308-c448d1d0d7d&title=\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">该类有4个方法，以第2个方法say()为例\n00 01 00 12 00 0a 00 01 00 0b\n00 01\nflags: ACC_PUBLIC\n00 12\n#18 &#x3D; Utf8               say\n00 0a\n#10 &#x3D; Utf8               ()V\n00 01\n1个attriute_info属性\n00 0b\n#11 &#x3D; Utf8               Code\nCode属性</code></pre>\n\n<h3 id=\"15、属性计数器-attributes-count\"><a href=\"#15、属性计数器-attributes-count\" class=\"headerlink\" title=\"15、属性计数器(attributes_count)\"></a>15、属性计数器(attributes_count)</h3><p>属性计数器，attributes_count 的值表示当前 Class 文件 attributes 表的成员个数。attributes 表中每一项都是一个 attribute_info 结构的数据项。</p>\n<h3 id=\"16、属性信息数据区-attributes-attributes-count\"><a href=\"#16、属性信息数据区-attributes-attributes-count\" class=\"headerlink\" title=\"16、属性信息数据区(attributes[attributes_count])\"></a>16、属性信息数据区(attributes[attributes_count])</h3><p>java class 文件内部属性信息，和 java 语言定义的属性没有关系，纯粹就是给 java 虚拟机用的。属性表，attributes 表的每个项的值必须是 attribute_info 结构。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398735593-75552d83-a487-48e3-a42f-5208bedc476c.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u5ddea03c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=155&originWidth=823&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=11220&status=done&style=none&taskId=u6ba5f3d9-ae6d-4340-98fc-6f817a2ec00&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398736276-5dfbf84f-0434-499f-9c7f-e948109d2303.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uea3f7f46&margin=%5Bobject%20Object%5D&name=image.png&originHeight=289&originWidth=672&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=33105&status=done&style=none&taskId=ua00e523f-fac4-4fa7-9917-d377ab482ba&title=\" alt=\"image.png\"><br>以第 2 个方法 say()的 code 属性为例<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398736316-a05b49d9-0d2a-42fa-8f53-55c641a1d8fa.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u9ed94d19&margin=%5Bobject%20Object%5D&name=image.png&originHeight=520&originWidth=1386&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=66265&status=done&style=none&taskId=ua89e4f00-dd00-460e-a325-017b7ff080d&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398736310-5fb50297-9d97-45c3-8a08-4af805c6eb3a.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u40277943&margin=%5Bobject%20Object%5D&name=image.png&originHeight=146&originWidth=670&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=22486&status=done&style=none&taskId=uc8d1ec58-b69a-4dc8-b548-9f9b2b6b2d6&title=\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">00 0b\n#11 &#x3D; Utf8               Code\n00 00 00 37\n代码属性区的长度为3*16 + 7\n00 02\n操作数栈最大深度为2\n00 01\n最大的局部变量数为1\n00 00 00 09\n方法代码的长度为9\nb2 00 13 12 19 b6 00 1b b1\n0: getstatic     #19                 &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;\n3: ldc           #25                 &#x2F;&#x2F; String charles\n5: invokevirtual #27                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V\n8: return\n00 00\n没有异常表\n00 02\n2个Code属性区的属性\n00 0e\n行号表属性\n#14 &#x3D; Utf8               LineNumberTable\n00 0f\n本地变量表属性\n#15 &#x3D; Utf8               LocalVariableTable</code></pre>\n\n<p><strong>LineNumberTable 属性</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398736334-c14abb13-0cb4-4db4-a139-8ce074f9cf98.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u31cb4098&margin=%5Bobject%20Object%5D&name=image.png&originHeight=421&originWidth=1038&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=39632&status=done&style=none&taskId=u5b8d0de5-add9-4410-885b-a8458fac196&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398736915-24bb6d4d-7997-4d90-b284-100b7cb79c7f.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub12c6a63&margin=%5Bobject%20Object%5D&name=image.png&originHeight=72&originWidth=668&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=8408&status=done&style=none&taskId=u9eecc191-5aea-4b37-9454-de2ffbdcd33&title=\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">LineNumberTable:\n  line 18: 0\n  line 19: 8</code></pre>\n\n<p><strong>LocalVariableTable 属性</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398737697-7091b332-16b6-4eb1-bcbc-00a9815d4201.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc8d5dfba&margin=%5Bobject%20Object%5D&name=image.png&originHeight=442&originWidth=1016&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=47941&status=done&style=none&taskId=uf86684d7-057f-45da-8024-78a82d36454&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398737685-62f95591-1976-4074-8bdf-6ca37186d261.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u3d279806&margin=%5Bobject%20Object%5D&name=image.png&originHeight=67&originWidth=669&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=8656&status=done&style=none&taskId=uc3db514a-9eb4-43e1-83a2-43622881d57&title=\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">LocalVariableTable:\n  Start  Length  Slot  Name   Signature\n  0       9     0    this     Lcom&#x2F;charles&#x2F;Charles;</code></pre>\n\n<p>在 Java 7 规范里，Class 文件结构中的 attributes 表的项包括下列定义的属性： InnerClasses 、 EnclosingMethod、Synthetic、Signature、SourceFile，SourceDebugExtension 、Deprecated、RuntimeVisibleAntations、RuntimeInvisibleAntations 以及 BootstrapMethods 属性。<br>对于支持 Class 文件格式版本号为 49.0 或更高的 Java 虚拟机实现，必须正确识别并读取 attributes 表中的 Signature、RuntimeVisibleAntations 和 RuntimeInvisibleAntations 属性。对于支持 Class 文件格式版本号为 51.0 或更高的 Java 虚拟机实现，必须正确识别并读取 attributes 表中的 BootstrapMethods 属性。Java 7 规范 要求任一 Java 虚拟机实现可以自动忽略 Class 文件的 attributes 表中的若干 （甚至全部） 它不可识别的属性项。任何本规范未定义的属性不能影响 Class 文件的语义，只能提供附加的描述信息 。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398737761-b07f4139-6c51-4080-b613-8e700c32ff69.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u8f399484&margin=%5Bobject%20Object%5D&name=image.png&originHeight=214&originWidth=634&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=17304&status=done&style=none&taskId=u0c1cb6bd-a4e9-4077-9ea2-10198f04b7b&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398738365-2cf86d60-e78e-4a84-b02d-f9c95adf608e.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u111c0f1f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=70&originWidth=671&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=7525&status=done&style=none&taskId=u545b2de2-ce69-4d7b-859e-9939af39467&title=\" alt=\"image.png\"><br>使用 java -verbose Charles 反编译，查看类信息</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Last modified Oct 21, 2014; size 743 bytes\n  MD5 checksum 98d8dab9aaaeeff70b2e4e77ebfedc53\n  Compiled from &quot;Charles.java&quot;\npublic class com.charles.Charles implements com.charles.ICharles\n  SourceFile: &quot;Charles.java&quot;\n  minor version: 0\n  major version: 49\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 &#x3D; Class              #2             &#x2F;&#x2F;  com&#x2F;charles&#x2F;Charles\n   #2 &#x3D; Utf8               com&#x2F;charles&#x2F;Charles\n   #3 &#x3D; Class              #4             &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object\n   #4 &#x3D; Utf8               java&#x2F;lang&#x2F;Object\n   #5 &#x3D; Class              #6             &#x2F;&#x2F;  com&#x2F;charles&#x2F;ICharles\n   #6 &#x3D; Utf8               com&#x2F;charles&#x2F;ICharles\n   #7 &#x3D; Utf8               name\n   #8 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;String;\n   #9 &#x3D; Utf8               &lt;init&gt;\n  #10 &#x3D; Utf8               ()V\n  #11 &#x3D; Utf8               Code\n  #12 &#x3D; Methodref          #3.#13         &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V\n  #13 &#x3D; NameAndType        #9:#10         &#x2F;&#x2F;  &quot;&lt;init&gt;&quot;:()V\n  #14 &#x3D; Utf8               LineNumberTable\n  #15 &#x3D; Utf8               LocalVariableTable\n  #16 &#x3D; Utf8               this\n  #17 &#x3D; Utf8               Lcom&#x2F;charles&#x2F;Charles;\n  #18 &#x3D; Utf8               say\n  #19 &#x3D; Fieldref           #20.#22        &#x2F;&#x2F;  java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;\n  #20 &#x3D; Class              #21            &#x2F;&#x2F;  java&#x2F;lang&#x2F;System\n  #21 &#x3D; Utf8               java&#x2F;lang&#x2F;System\n  #22 &#x3D; NameAndType        #23:#24        &#x2F;&#x2F;  out:Ljava&#x2F;io&#x2F;PrintStream;\n  #23 &#x3D; Utf8               out\n  #24 &#x3D; Utf8               Ljava&#x2F;io&#x2F;PrintStream;\n  #25 &#x3D; String             #26            &#x2F;&#x2F;  charles\n  #26 &#x3D; Utf8               charles\n  #27 &#x3D; Methodref          #28.#30        &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V\n  #28 &#x3D; Class              #29            &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream\n  #29 &#x3D; Utf8               java&#x2F;io&#x2F;PrintStream\n  #30 &#x3D; NameAndType        #31:#32        &#x2F;&#x2F;  println:(Ljava&#x2F;lang&#x2F;String;)V\n  #31 &#x3D; Utf8               println\n  #32 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)V\n  #33 &#x3D; Utf8               getName\n  #34 &#x3D; Utf8               ()Ljava&#x2F;lang&#x2F;String;\n  #35 &#x3D; Fieldref           #1.#36         &#x2F;&#x2F;  com&#x2F;charles&#x2F;Charles.name:Ljava&#x2F;lang&#x2F;String;\n  #36 &#x3D; NameAndType        #7:#8          &#x2F;&#x2F;  name:Ljava&#x2F;lang&#x2F;String;\n  #37 &#x3D; Utf8               setName\n  #38 &#x3D; Utf8               SourceFile\n  #39 &#x3D; Utf8               Charles.java\n&#123;\n  public com.charles.Charles();\n    flags: ACC_PUBLIC\n    Code:\n      stack#1, locals#1, args_size#1\n         0: aload_0\n         1: invokespecial #12                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V\n         4: return\n      LineNumberTable:\n        line 13: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n          0       5     0  this   Lcom&#x2F;charles&#x2F;Charles;\n\n  public void say();\n    flags: ACC_PUBLIC\n    Code:\n      stack#2, locals#1, args_size#1\n         0: getstatic     #19                 &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;\n         3: ldc           #25                 &#x2F;&#x2F; String charles\n         5: invokevirtual #27                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V\n         8: return\n      LineNumberTable:\n        line 18: 0\n        line 19: 8\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n          0       9     0  this   Lcom&#x2F;charles&#x2F;Charles;\n\n  public java.lang.String getName();\n    flags: ACC_PUBLIC\n    Code:\n      stack#1, locals#1, args_size#1\n         0: aload_0\n         1: getfield      #35                 &#x2F;&#x2F; Field name:Ljava&#x2F;lang&#x2F;String;\n         4: areturn\n      LineNumberTable:\n        line 22: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n          0       5     0  this   Lcom&#x2F;charles&#x2F;Charles;\n\n  public void setName(java.lang.String);\n    flags: ACC_PUBLIC\n    Code:\n      stack#2, locals#2, args_size#2\n         0: aload_0\n         1: aload_1\n         2: putfield      #35                 &#x2F;&#x2F; Field name:Ljava&#x2F;lang&#x2F;String;\n         5: return\n      LineNumberTable:\n        line 26: 0\n        line 27: 5\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n          0       6     0  this   Lcom&#x2F;charles&#x2F;Charles;\n          0       6     1  name   Ljava&#x2F;lang&#x2F;String;\n&#125;</code></pre>\n","more":"<h2 id=\"Java-Class-文件结构\"><a href=\"#Java-Class-文件结构\" class=\"headerlink\" title=\"Java Class 文件结构\"></a>Java Class 文件结构</h2><p>如下图所示<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732871-52f4c2d6-8314-4223-b07a-ea59ac0f6ce7.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u3b5ec65e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=924&originWidth=1244&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=101607&status=done&style=none&taskId=ufab1464f-fa80-4848-9d69-094bca2ea40&title=\" alt=\"image.png\"><br>对于以下 java 源文件代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Charles implements ICharles&#123;\n  private String name;\n  public void say() &#123;\n    System.out.println(&quot;charles&quot;);\n  &#125;\n  public String getName() &#123;\n    return name;\n  &#125;\n  public void setName(String name) &#123;\n    this.name &#x3D; name;\n  &#125;\n&#125;</code></pre>\n\n<p>生成的类文件字节码为<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732886-29c2ac32-cf7a-4197-828b-aa50372bcb8f.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u824c699c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=938&originWidth=698&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=139186&status=done&style=none&taskId=ue583a253-101a-4bf5-98b2-e68a1505d26&title=\" alt=\"image.png\"><br>根据 class 文件结构分析字节码</p>\n<h3 id=\"1、-魔数-magic\"><a href=\"#1、-魔数-magic\" class=\"headerlink\" title=\"1、 魔数(magic)\"></a>1、 魔数(magic)</h3><p>魔数的唯一作用是确定这个文件是否为一个能被虚拟机所接受的 Class 文件。魔数值固定为 0xCAFEBABE，不会改。</p>\n<h3 id=\"2、-版本号-minor-version-major-version\"><a href=\"#2、-版本号-minor-version-major-version\" class=\"headerlink\" title=\"2、 版本号(minor_version, major_version)\"></a>2、 版本号(minor_version, major_version)</h3><p>minor_version 和 major_version 的值分别表示 Class 文件的副、主版本号，它们共同构成了 Class 文件的格式版本号。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732697-4e26a4fb-c6db-4c60-ad03-f163bd119932.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub22a6d8b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=42&originWidth=672&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=4682&status=done&style=none&taskId=ub4c3438e-0909-4a10-933c-0fe27f518e9&title=\" alt=\"image.png\"><br>其中，00 00（次版本号），00 31（主版本号），即十进制版本号 49，使用 JDK1.6 编译输出</p>\n<h3 id=\"3、常量池计数器-constant-pool-count\"><a href=\"#3、常量池计数器-constant-pool-count\" class=\"headerlink\" title=\"3、常量池计数器(constant_pool_count)\"></a>3、常量池计数器(constant_pool_count)</h3><p>常量池是 class 文件中非常重要的结构，它描述着整个 class 文件的字面量信息。常量池是由一组 constant_pool 结构体数组组成的，而数组的大小则由常量池计数器指定。常量池计数器 constant_pool_count 的值 &#x3D;constant_pool 表中的成员数 + 1。constant_pool 表的索引值只有在大于 0 且小于 constant_pool_count 时才会被认为是有效的。</p>\n<h3 id=\"4、常量池数据区-constant-pool-contstant-pool-count-1\"><a href=\"#4、常量池数据区-constant-pool-contstant-pool-count-1\" class=\"headerlink\" title=\"4、常量池数据区(constant_pool[contstant_pool_count-1])\"></a>4、常量池数据区(constant_pool[contstant_pool_count-1])</h3><p>代表常量池个数以及常量池信息，constant_pool 是一种表结构,它包含 Class 文件结构及其子结构中引用的所有字符串常量、 类或接口名、字段名和其它常量。常量池中的每一项都具备相同的格式特征，第一个字节作为类型标记用于识别该项是哪种类型的常量，称为 “tag byte” 。常量池的索引范围是 1 至 constant_pool_count-1。<br>常量池，主要分两种字面常量（Literal）和符号引用（Symbolic reference） 。<br>其中符号引用属于编译原理方面概念，主要包含以下三类常量：</p>\n<ol>\n<li>类和接口的权限定名</li>\n<li>字段的名称和描述符</li>\n<li>方法的名称和描述符<br>所有的常量池项都具有如下通用格式：<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732717-62f197a3-c22e-40e8-b949-cf7f496100ae.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u64ae0dc0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=168&originWidth=363&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=7210&status=done&style=none&taskId=ufd964a7a-387a-4dde-bbbd-c7e8b599f6d&title=\" alt=\"image.png\"><br>常量池中，每个 cp_info 项的格式必须相同，它们都以一个表示 cp_info 类型的单字节“tag”项开头。后面 info[]项的内容 tag 由的类型所决定。tag 有效的类型和对应的取值在表 4.3 列出。每个 tag 项必须跟随 2 个或更多的字节，这些字节用于给定这个常量的信息，附加字节的信息格式由 tag 的值决定。<br>主要有以下类型<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398732745-4d1e9739-464c-4054-9ea6-1853ee3c05f4.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc43c9409&margin=%5Bobject%20Object%5D&name=image.png&originHeight=415&originWidth=545&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=44547&status=done&style=none&taskId=u797a336c-11d2-4a0d-bb12-9e2ae1ea4db&title=\" alt=\"image.png\"><br>本主要就 CONSTANT_Class_info 和 CONSTANT_Utf8_info 进行讨论。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398733619-7a66c3bf-4b96-4168-9c6a-d957a8ffa395.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u6620cb21&margin=%5Bobject%20Object%5D&name=image.png&originHeight=283&originWidth=1115&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=45631&status=done&style=none&taskId=u745db2b6-cbfe-40ab-883b-bc76e4db1f5&title=\" alt=\"image.png\"><br>本例中 class 的常量池为<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398733670-9b15bc64-d471-4102-bbbc-0a3da81990b0.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ud55019e9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=550&originWidth=675&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=117763&status=done&style=none&taskId=u40fc202b-5faa-42e2-a9cf-946d72a3b74&title=\" alt=\"image.png\"></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">其中常量池的大小为0x28即为（2*16+8）-1 &#x3D; 39，索引为0不会用到。\n07 00 02 (CONSTANT_Class_info)\n#1 &#x3D; Class    &#x3D;2 （第一个常量为类信息，name索引为2）\n01 00 13 63 6f 6d 2f 63 68 61 72 6c 65 73 2f 43 68 61 72 6c 65 73\n00 13 字符串长度为19个字节\n63 6f 6d 2f 63 68 61 72 6c 65 73 2f 43 68 61 72 6c 65 73\n标示字符串com&#x2F;charles&#x2F;Charles\n#2 &#x3D; Utf8     com&#x2F;charles&#x2F;Charles（第二个常量为utf8字符串）</code></pre>\n\n<p>其他的类型可以参考“Java 虚拟机规范(Java_SE_7)”和“深入理解 Java 虚拟机 JVM 高级特性与最佳实践”书籍。</p>\n<h3 id=\"6、类访问标志-access-flags\"><a href=\"#6、类访问标志-access-flags\" class=\"headerlink\" title=\"6、类访问标志(access_flags)\"></a>6、类访问标志(access_flags)</h3><p>访问标志，access_flags 是一种掩码标志，用于表示某个类或者接口的访问权限及基础属性。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398733921-7bba13f7-7ad1-44a7-bd15-f8f0edfba5cb.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u9ed34256&margin=%5Bobject%20Object%5D&name=image.png&originHeight=261&originWidth=628&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=20676&status=done&style=none&taskId=u313c16ca-c3ce-422c-bf98-5fc5aa89447&title=\" alt=\"image.png\"></p>\n<h3 id=\"7、类索引-this-class\"><a href=\"#7、类索引-this-class\" class=\"headerlink\" title=\"7、类索引(this_class)\"></a>7、类索引(this_class)</h3><p>类索引，this_class 的值必须是对 constant_pool 表中项目的一个有效索引值。constant_pool 表在这个索引处的项必须为 CONSTANT_Class_info 类型常量，表示这个 Class 文件所定义的类或接口。</p>\n<h3 id=\"8、父类索引-super-class\"><a href=\"#8、父类索引-super-class\" class=\"headerlink\" title=\"8、父类索引(super_class)\"></a>8、父类索引(super_class)</h3><p>父类索引，对于类来说，super_class 的值必须为 0 或者是对 constant_pool 表中项目的一个有效索引值。如果它的值不为 0，那 constant_pool 表在这个索引处的项必须为 CONSTANT_Class_info 类型常量，表示这个 Class 文件所定义的类的直接父类。当前类的直接父类，以及它所有间接父类的 access_flag 中都不能带有 ACC_FINAL 标记。对于接口来说，它的 Class 文件的 super_class 项的值必须是对 constant_pool 表中项目的一个有效索引值。constant_pool 表在这个索引处的项必须为代表 java.lang.Object 的 CONSTANT_Class_info 类型常量 。如果 Class 文件的 super_class 的值为 0，那这个 Class 文件只可能是定义的是 java.lang.Object 类，只有它是唯一没有父类的类。</p>\n<h3 id=\"9、接口计数器-interfaces-count\"><a href=\"#9、接口计数器-interfaces-count\" class=\"headerlink\" title=\"9、接口计数器(interfaces_count)\"></a>9、接口计数器(interfaces_count)</h3><p>接口计数器，interfaces_count 的值表示当前类或接口的直接父接口数量。</p>\n<h3 id=\"10、接口信息数据区-interfaces-interfaces-count\"><a href=\"#10、接口信息数据区-interfaces-interfaces-count\" class=\"headerlink\" title=\"10、接口信息数据区(interfaces[interfaces_count])\"></a>10、接口信息数据区(interfaces[interfaces_count])</h3><p>接口表，interfaces[]数组中的每个成员的值必须是一个对 constant_pool 表中项目的一个有效索引值，它的长度为 interfaces_count。每个成员 interfaces[i] 必须为 CONSTANT_Class_info 类型常量，其中 0 ≤ i &lt;interfaces_count。在 interfaces[]数组中，成员所表示的接口顺序和对应的源代码中给定的接口顺序（从左至右）一样，即 interfaces[0]对应的是源代码中最左边的接口。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398734176-01cb4ca7-9523-4323-8ba0-c3e1a805dbf7.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ua0c3d3c4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=65&originWidth=676&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=8716&status=done&style=none&taskId=ufee2647c-2a25-4c24-8068-6408234b6e1&title=\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">flags: ACC_PUBLIC, ACC_SUPER\n   #1 &#x3D; Class              #2             &#x2F;&#x2F;  com&#x2F;charles&#x2F;Charles\n   #2 &#x3D; Utf8               com&#x2F;charles&#x2F;Charles\n   #3 &#x3D; Class              #4             &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object\n   #4 &#x3D; Utf8               java&#x2F;lang&#x2F;Object\n   #5 &#x3D; Class              #6             &#x2F;&#x2F;  com&#x2F;charles&#x2F;ICharles\n   #6 &#x3D; Utf8               com&#x2F;charles&#x2F;ICharles\n00 21 标示类访问标示为ACC_PUBLIC, ACC_SUPER\n00 01 类为com&#x2F;charles&#x2F;Charles\n00 03 父类为java&#x2F;lang&#x2F;Object\n00 01 实现了1个接口\n00 05 接口为com&#x2F;charles&#x2F;ICharles</code></pre>\n\n<h3 id=\"11、字段计数器-fields-count\"><a href=\"#11、字段计数器-fields-count\" class=\"headerlink\" title=\"11、字段计数器(fields_count)\"></a>11、字段计数器(fields_count)</h3><p>字段计数器，fields_count 的值表示当前 Class 文件 fields[]数组的成员个数。 fields[]数组中每一项都是一个 field_info 结构的数据项，它用于表示该类或接口声明的类字段或者实例字段。</p>\n<h3 id=\"12、字段信息数据区-fields-fields-count\"><a href=\"#12、字段信息数据区-fields-fields-count\" class=\"headerlink\" title=\"12、字段信息数据区(fields[fields_count])\"></a>12、字段信息数据区(fields[fields_count])</h3><p>字段表，fields[]数组中的每个成员都必须是一个 fields_info 结构的数据项，用于表示当前类或接口中某个字段的完整描述。 fields[]数组描述当前类或接口声明的所有字段，但不包括从父类或父接口继承的部分。<br>其中字段访问 flag 为<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398734753-1fcd2abb-7059-48f4-801f-9ce33bbb3776.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue45d8e83&margin=%5Bobject%20Object%5D&name=image.png&originHeight=277&originWidth=481&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=20720&status=done&style=none&taskId=u0e4e1bd2-7441-49d9-a380-ae8375e5a30&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398734758-3dd06ec2-cd4f-4c93-9f26-ff4b00b0ea4a.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ud31b8499&margin=%5Bobject%20Object%5D&name=image.png&originHeight=255&originWidth=1003&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=29267&status=done&style=none&taskId=uc4bff24f-af86-4e14-a839-53178c0ad14&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398734863-fafa7e51-83fd-4569-a73e-137c88d3a8a7.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ucdc608de&margin=%5Bobject%20Object%5D&name=image.png&originHeight=36&originWidth=664&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=5030&status=done&style=none&taskId=u1f0798de-4bd8-4ce9-a6bb-9febe2ce98f&title=\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">#7 &#x3D; Utf8               name\n#8 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;String;\n00 01 类有1个字段\n00 02 字段的访问标示为ACC_PRIVATE\n00 07 字段名为name\n00 08 字段描述符为Ljava&#x2F;lang&#x2F;String;\n00 00\n没有属性信息数据区</code></pre>\n\n<h3 id=\"13、方法计数器-methods-count\"><a href=\"#13、方法计数器-methods-count\" class=\"headerlink\" title=\"13、方法计数器(methods_count)\"></a>13、方法计数器(methods_count)</h3><p>方法计数器， methods_count 的值表示当前 Class 文件 methods[]数组的成员个数。Methods[]数组中每一项都是一个 method_info 结构的数据项。</p>\n<h3 id=\"14、方法信息数据区-methods-methods-count\"><a href=\"#14、方法信息数据区-methods-methods-count\" class=\"headerlink\" title=\"14、方法信息数据区(methods[methods_count])\"></a>14、方法信息数据区(methods[methods_count])</h3><p>方法表，methods[] 数组中的每个成员都必须是一个 method_info 结构的数据项，用于表示当前类或接口中某个方法的完整描述。如果某个 method_info 结构的 access_flags 项既没有设置 ACC_NATIVE 标志也没有设置 ACC_ABSTRACT 标志，那么它所对应的方法体就应当可以被 Java 虚拟机直接从当前类加载，而不需要引用其它类。 method_info 结构可以表示类和接口中定义的所有方法，包括实例方法、类方法、实例初始化方法方法和类或接口初始化方法方法 。methods[]数组只描述当前类或接口中声明的方法，不包括从父类或父接口继承的方法。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398735062-35199786-b1c2-4f29-b1c1-5eed2278042d.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc5d3c4dd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=269&originWidth=1006&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=29906&status=done&style=none&taskId=u913c6a82-a82e-4ebe-8254-16f512a8834&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398735524-d63737be-09a7-42d0-be73-e0f4f682ce58.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc8e9b0fa&margin=%5Bobject%20Object%5D&name=image.png&originHeight=349&originWidth=669&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=53293&status=done&style=none&taskId=u727fc0a2-5b46-443f-b308-c448d1d0d7d&title=\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">该类有4个方法，以第2个方法say()为例\n00 01 00 12 00 0a 00 01 00 0b\n00 01\nflags: ACC_PUBLIC\n00 12\n#18 &#x3D; Utf8               say\n00 0a\n#10 &#x3D; Utf8               ()V\n00 01\n1个attriute_info属性\n00 0b\n#11 &#x3D; Utf8               Code\nCode属性</code></pre>\n\n<h3 id=\"15、属性计数器-attributes-count\"><a href=\"#15、属性计数器-attributes-count\" class=\"headerlink\" title=\"15、属性计数器(attributes_count)\"></a>15、属性计数器(attributes_count)</h3><p>属性计数器，attributes_count 的值表示当前 Class 文件 attributes 表的成员个数。attributes 表中每一项都是一个 attribute_info 结构的数据项。</p>\n<h3 id=\"16、属性信息数据区-attributes-attributes-count\"><a href=\"#16、属性信息数据区-attributes-attributes-count\" class=\"headerlink\" title=\"16、属性信息数据区(attributes[attributes_count])\"></a>16、属性信息数据区(attributes[attributes_count])</h3><p>java class 文件内部属性信息，和 java 语言定义的属性没有关系，纯粹就是给 java 虚拟机用的。属性表，attributes 表的每个项的值必须是 attribute_info 结构。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398735593-75552d83-a487-48e3-a42f-5208bedc476c.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u5ddea03c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=155&originWidth=823&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=11220&status=done&style=none&taskId=u6ba5f3d9-ae6d-4340-98fc-6f817a2ec00&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398736276-5dfbf84f-0434-499f-9c7f-e948109d2303.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uea3f7f46&margin=%5Bobject%20Object%5D&name=image.png&originHeight=289&originWidth=672&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=33105&status=done&style=none&taskId=ua00e523f-fac4-4fa7-9917-d377ab482ba&title=\" alt=\"image.png\"><br>以第 2 个方法 say()的 code 属性为例<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398736316-a05b49d9-0d2a-42fa-8f53-55c641a1d8fa.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u9ed94d19&margin=%5Bobject%20Object%5D&name=image.png&originHeight=520&originWidth=1386&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=66265&status=done&style=none&taskId=ua89e4f00-dd00-460e-a325-017b7ff080d&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398736310-5fb50297-9d97-45c3-8a08-4af805c6eb3a.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u40277943&margin=%5Bobject%20Object%5D&name=image.png&originHeight=146&originWidth=670&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=22486&status=done&style=none&taskId=uc8d1ec58-b69a-4dc8-b548-9f9b2b6b2d6&title=\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">00 0b\n#11 &#x3D; Utf8               Code\n00 00 00 37\n代码属性区的长度为3*16 + 7\n00 02\n操作数栈最大深度为2\n00 01\n最大的局部变量数为1\n00 00 00 09\n方法代码的长度为9\nb2 00 13 12 19 b6 00 1b b1\n0: getstatic     #19                 &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;\n3: ldc           #25                 &#x2F;&#x2F; String charles\n5: invokevirtual #27                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V\n8: return\n00 00\n没有异常表\n00 02\n2个Code属性区的属性\n00 0e\n行号表属性\n#14 &#x3D; Utf8               LineNumberTable\n00 0f\n本地变量表属性\n#15 &#x3D; Utf8               LocalVariableTable</code></pre>\n\n<p><strong>LineNumberTable 属性</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398736334-c14abb13-0cb4-4db4-a139-8ce074f9cf98.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u31cb4098&margin=%5Bobject%20Object%5D&name=image.png&originHeight=421&originWidth=1038&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=39632&status=done&style=none&taskId=u5b8d0de5-add9-4410-885b-a8458fac196&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398736915-24bb6d4d-7997-4d90-b284-100b7cb79c7f.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub12c6a63&margin=%5Bobject%20Object%5D&name=image.png&originHeight=72&originWidth=668&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=8408&status=done&style=none&taskId=u9eecc191-5aea-4b37-9454-de2ffbdcd33&title=\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">LineNumberTable:\n  line 18: 0\n  line 19: 8</code></pre>\n\n<p><strong>LocalVariableTable 属性</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398737697-7091b332-16b6-4eb1-bcbc-00a9815d4201.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc8d5dfba&margin=%5Bobject%20Object%5D&name=image.png&originHeight=442&originWidth=1016&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=47941&status=done&style=none&taskId=uf86684d7-057f-45da-8024-78a82d36454&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398737685-62f95591-1976-4074-8bdf-6ca37186d261.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u3d279806&margin=%5Bobject%20Object%5D&name=image.png&originHeight=67&originWidth=669&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=8656&status=done&style=none&taskId=uc3db514a-9eb4-43e1-83a2-43622881d57&title=\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">LocalVariableTable:\n  Start  Length  Slot  Name   Signature\n  0       9     0    this     Lcom&#x2F;charles&#x2F;Charles;</code></pre>\n\n<p>在 Java 7 规范里，Class 文件结构中的 attributes 表的项包括下列定义的属性： InnerClasses 、 EnclosingMethod、Synthetic、Signature、SourceFile，SourceDebugExtension 、Deprecated、RuntimeVisibleAntations、RuntimeInvisibleAntations 以及 BootstrapMethods 属性。<br>对于支持 Class 文件格式版本号为 49.0 或更高的 Java 虚拟机实现，必须正确识别并读取 attributes 表中的 Signature、RuntimeVisibleAntations 和 RuntimeInvisibleAntations 属性。对于支持 Class 文件格式版本号为 51.0 或更高的 Java 虚拟机实现，必须正确识别并读取 attributes 表中的 BootstrapMethods 属性。Java 7 规范 要求任一 Java 虚拟机实现可以自动忽略 Class 文件的 attributes 表中的若干 （甚至全部） 它不可识别的属性项。任何本规范未定义的属性不能影响 Class 文件的语义，只能提供附加的描述信息 。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398737761-b07f4139-6c51-4080-b613-8e700c32ff69.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u8f399484&margin=%5Bobject%20Object%5D&name=image.png&originHeight=214&originWidth=634&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=17304&status=done&style=none&taskId=u0c1cb6bd-a4e9-4077-9ea2-10198f04b7b&title=\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648398738365-2cf86d60-e78e-4a84-b02d-f9c95adf608e.png#clientId=u0e59f31f-479e-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u111c0f1f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=70&originWidth=671&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=7525&status=done&style=none&taskId=u545b2de2-ce69-4d7b-859e-9939af39467&title=\" alt=\"image.png\"><br>使用 java -verbose Charles 反编译，查看类信息</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Last modified Oct 21, 2014; size 743 bytes\n  MD5 checksum 98d8dab9aaaeeff70b2e4e77ebfedc53\n  Compiled from &quot;Charles.java&quot;\npublic class com.charles.Charles implements com.charles.ICharles\n  SourceFile: &quot;Charles.java&quot;\n  minor version: 0\n  major version: 49\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 &#x3D; Class              #2             &#x2F;&#x2F;  com&#x2F;charles&#x2F;Charles\n   #2 &#x3D; Utf8               com&#x2F;charles&#x2F;Charles\n   #3 &#x3D; Class              #4             &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object\n   #4 &#x3D; Utf8               java&#x2F;lang&#x2F;Object\n   #5 &#x3D; Class              #6             &#x2F;&#x2F;  com&#x2F;charles&#x2F;ICharles\n   #6 &#x3D; Utf8               com&#x2F;charles&#x2F;ICharles\n   #7 &#x3D; Utf8               name\n   #8 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;String;\n   #9 &#x3D; Utf8               &lt;init&gt;\n  #10 &#x3D; Utf8               ()V\n  #11 &#x3D; Utf8               Code\n  #12 &#x3D; Methodref          #3.#13         &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V\n  #13 &#x3D; NameAndType        #9:#10         &#x2F;&#x2F;  &quot;&lt;init&gt;&quot;:()V\n  #14 &#x3D; Utf8               LineNumberTable\n  #15 &#x3D; Utf8               LocalVariableTable\n  #16 &#x3D; Utf8               this\n  #17 &#x3D; Utf8               Lcom&#x2F;charles&#x2F;Charles;\n  #18 &#x3D; Utf8               say\n  #19 &#x3D; Fieldref           #20.#22        &#x2F;&#x2F;  java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;\n  #20 &#x3D; Class              #21            &#x2F;&#x2F;  java&#x2F;lang&#x2F;System\n  #21 &#x3D; Utf8               java&#x2F;lang&#x2F;System\n  #22 &#x3D; NameAndType        #23:#24        &#x2F;&#x2F;  out:Ljava&#x2F;io&#x2F;PrintStream;\n  #23 &#x3D; Utf8               out\n  #24 &#x3D; Utf8               Ljava&#x2F;io&#x2F;PrintStream;\n  #25 &#x3D; String             #26            &#x2F;&#x2F;  charles\n  #26 &#x3D; Utf8               charles\n  #27 &#x3D; Methodref          #28.#30        &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V\n  #28 &#x3D; Class              #29            &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream\n  #29 &#x3D; Utf8               java&#x2F;io&#x2F;PrintStream\n  #30 &#x3D; NameAndType        #31:#32        &#x2F;&#x2F;  println:(Ljava&#x2F;lang&#x2F;String;)V\n  #31 &#x3D; Utf8               println\n  #32 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)V\n  #33 &#x3D; Utf8               getName\n  #34 &#x3D; Utf8               ()Ljava&#x2F;lang&#x2F;String;\n  #35 &#x3D; Fieldref           #1.#36         &#x2F;&#x2F;  com&#x2F;charles&#x2F;Charles.name:Ljava&#x2F;lang&#x2F;String;\n  #36 &#x3D; NameAndType        #7:#8          &#x2F;&#x2F;  name:Ljava&#x2F;lang&#x2F;String;\n  #37 &#x3D; Utf8               setName\n  #38 &#x3D; Utf8               SourceFile\n  #39 &#x3D; Utf8               Charles.java\n&#123;\n  public com.charles.Charles();\n    flags: ACC_PUBLIC\n    Code:\n      stack#1, locals#1, args_size#1\n         0: aload_0\n         1: invokespecial #12                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V\n         4: return\n      LineNumberTable:\n        line 13: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n          0       5     0  this   Lcom&#x2F;charles&#x2F;Charles;\n\n  public void say();\n    flags: ACC_PUBLIC\n    Code:\n      stack#2, locals#1, args_size#1\n         0: getstatic     #19                 &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;\n         3: ldc           #25                 &#x2F;&#x2F; String charles\n         5: invokevirtual #27                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V\n         8: return\n      LineNumberTable:\n        line 18: 0\n        line 19: 8\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n          0       9     0  this   Lcom&#x2F;charles&#x2F;Charles;\n\n  public java.lang.String getName();\n    flags: ACC_PUBLIC\n    Code:\n      stack#1, locals#1, args_size#1\n         0: aload_0\n         1: getfield      #35                 &#x2F;&#x2F; Field name:Ljava&#x2F;lang&#x2F;String;\n         4: areturn\n      LineNumberTable:\n        line 22: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n          0       5     0  this   Lcom&#x2F;charles&#x2F;Charles;\n\n  public void setName(java.lang.String);\n    flags: ACC_PUBLIC\n    Code:\n      stack#2, locals#2, args_size#2\n         0: aload_0\n         1: aload_1\n         2: putfield      #35                 &#x2F;&#x2F; Field name:Ljava&#x2F;lang&#x2F;String;\n         5: return\n      LineNumberTable:\n        line 26: 0\n        line 27: 5\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n          0       6     0  this   Lcom&#x2F;charles&#x2F;Charles;\n          0       6     1  name   Ljava&#x2F;lang&#x2F;String;\n&#125;</code></pre>\n","categories":[{"name":"jvm","path":"api/categories/jvm.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"JVM","path":"api/tags/JVM.json"}]}