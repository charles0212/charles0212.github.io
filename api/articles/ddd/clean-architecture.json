{"title":"DDD（四）整洁架构","slug":"yuque/DDD（四）整洁架构","date":"2021-09-07T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/ddd/clean-architecture.json","excerpt":"> 原文：https://herbertograca.com/2017/09/28/clean-architecture-standing-on-the-shoulders-of-giants/> >> https://www.jianshu.com/p/b565f0c00c0c这篇文章是软件架构编年史(译)的一部分，这部编年史由一系列关于软件架构的文章组成。在这一系列文章中，我将写下我对软件架构的学习和思考，以及我是如何运用这些知识的。如果你阅读了这个系列中之前的文章，本篇文章的的内容将更有意义。Robert C.Martin(大名鼎鼎的 UncleBob)于 2012年在他","covers":["https://cdn.nlark.com/yuque/0/2022/png/104130/1649608398336-9a577acc-186f-403a-8690-645706753ebd.png#clientId=u0810918f-6dc4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=284&id=udfe816b8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=567&originWidth=772&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=463984&status=done&style=none&taskId=ub1e28296-c043-409a-87e1-6404a90d2d7&title=&width=386","https://cdn.nlark.com/yuque/0/2022/png/104130/1649608428873-c6a319c5-c039-4f6e-90d5-a6917d8088da.png#clientId=u0810918f-6dc4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=161&id=uc137bb4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=321&originWidth=490&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=127029&status=done&style=none&taskId=u74efedda-759a-47bb-be0f-764ef1b5264&title=&width=245","https://cdn.nlark.com/yuque/0/2022/png/104130/1649608433866-107f20dd-f413-47a7-9cd9-69aff68eddbb.png#clientId=u0810918f-6dc4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=130&id=u741aac26&margin=%5Bobject%20Object%5D&name=image.png&originHeight=259&originWidth=366&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=104824&status=done&style=none&taskId=u85f3cc37-69c3-452c-9dbd-8300d3d728c&title=&width=183","https://cdn.nlark.com/yuque/0/2022/png/104130/1649608511165-12df652a-976a-45f0-a771-55b48137f02b.png#clientId=u0810918f-6dc4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=218&id=ua9bdbccc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=436&originWidth=847&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=275211&status=done&style=none&taskId=ua6c270c1-da18-4ee0-bf06-4a21b28ba89&title=&width=423.5"],"content":"<blockquote>\n<p>原文：<a href=\"https://herbertograca.com/2017/09/28/clean-architecture-standing-on-the-shoulders-of-giants/\">https://herbertograca.com/2017/09/28/clean-architecture-standing-on-the-shoulders-of-giants/</a> &gt; <a href=\"https://www.jianshu.com/p/b565f0c00c0c\">https://www.jianshu.com/p/b565f0c00c0c</a></p>\n</blockquote>\n<p>这篇文章是<a href=\"https://herbertograca.com/2017/07/03/the-software-architecture-chronicles/\">软件架构编年史</a>(<a href=\"https://www.jianshu.com/p/b477b2cc6cfa\">译</a>)的一部分，这部编年史由<a href=\"https://herbertograca.com/category/development/series/software-architecture/\">一系列关于软件架构的文章</a>组成。在这一系列文章中，我将写下我对软件架构的学习和思考，以及我是如何运用这些知识的。如果你阅读了这个系列中之前的文章，本篇文章的的内容将更有意义。<br>Robert C. Martin(大名鼎鼎的 Uncle Bob)于 2012 年在<a href=\"https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html\">他的一篇博客</a>中发表了整洁架构的观点，并在一些会议上做了关于该架构的演讲。<br>整洁架构借助了许多或熟悉或陌生的概念、规则和模式，说明了如何将它们融会贯通产生出一种构建应用的标准套路。</p>\n<h2 id=\"站在-EBI-架构、六边形架构和洋葱架构的肩膀上\"><a href=\"#站在-EBI-架构、六边形架构和洋葱架构的肩膀上\" class=\"headerlink\" title=\"站在 EBI 架构、六边形架构和洋葱架构的肩膀上\"></a>站在 EBI 架构、六边形架构和洋葱架构的肩膀上</h2><p>整洁架构的核心目标与端口和适配器(六边形)架构以及洋葱架构是一致的：</p>\n<ul>\n<li>工具无关</li>\n<li>传达机制无关</li>\n<li>独立的可测试性</li>\n</ul>\n<p>下面这张图发表在整洁架构的博客中，揭示了该架构的总体思路：<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649608398336-9a577acc-186f-403a-8690-645706753ebd.png#clientId=u0810918f-6dc4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=284&id=udfe816b8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=567&originWidth=772&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=463984&status=done&style=none&taskId=ub1e28296-c043-409a-87e1-6404a90d2d7&title=&width=386\" alt=\"image.png\"><br>Robert C. Martin 2012, <a href=\"https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html\">The Clean Architecture</a></p>\n<p>正如 Uncle Bob 自己在博客中所说，上面这张图试图将最新的架构观点整合成一个可操作的思路。<br>我们来对比一下整洁架构和六边形架构以及洋葱架构的示意图，看看它们在哪些方面是一致的：</p>\n<table><thead><tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649608428873-c6a319c5-c039-4f6e-90d5-a6917d8088da.png#clientId=u0810918f-6dc4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=161&id=uc137bb4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=321&originWidth=490&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=127029&status=done&style=none&taskId=u74efedda-759a-47bb-be0f-764ef1b5264&title=&width=245\" alt=\"image.png\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649608433866-107f20dd-f413-47a7-9cd9-69aff68eddbb.png#clientId=u0810918f-6dc4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=130&id=u741aac26&margin=%5Bobject%20Object%5D&name=image.png&originHeight=259&originWidth=366&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=104824&status=done&style=none&taskId=u85f3cc37-69c3-452c-9dbd-8300d3d728c&title=&width=183\" alt=\"image.png\"></th>\n</tr>\n</thead><tbody></tbody></table><h3 id=\"外化工具和传达机制\"><a href=\"#外化工具和传达机制\" class=\"headerlink\" title=\"外化工具和传达机制\"></a>外化工具和传达机制</h3><p>六边形架构聚焦于使用接口和适配器将工具和传达机制从应用中外化出去。这也是洋葱架构的核心基石之一，就像图中呈现的那样，UI、基础设置和测试全部都在示意图的最外层。整洁架构也有完全一致的特征，UI、Web、DB 等等都在最外层。最终，所有的应用核心代码都是独立于框架&#x2F;库的。</p>\n<h3 id=\"依赖方向\"><a href=\"#依赖方向\" class=\"headerlink\" title=\"依赖方向\"></a>依赖方向</h3><p>六边形架构中并没有明确地告知我们依赖的方向。然而，我们可以轻易地推测出来：应用拥有接口，它们必须由适配器实现或使用。所以适配器依赖接口，依赖位于圆心的应用。外部依赖内部，依赖的方向就指向圆心。在洋葱架构的示意图中，也没有发现关于依赖方向的表示，但是，Jeffrey Palermo 在他的第二篇博客中清楚地表明了所以依赖都指向圆心。整洁架构则非常明确的指出依赖的方向是指向圆心的。它们都在架构层级引入了依赖倒置原则。内圈不能知道外圈的任何信息。还有，当数据跨越界限进行传递时，数据总是以最方便内圈使用的格式提供。</p>\n<h3 id=\"分层\"><a href=\"#分层\" class=\"headerlink\" title=\"分层\"></a>分层</h3><p>六边形架构示意图只展现了两个层次：应用内部和应用外部。而洋葱架构引入了 DDD 中定义的应用层次的混合：控制用例逻辑的应用服务；封装了领域逻辑的领域服务，这些逻辑既不属于实体也不属于值对象；还有实体、值对象等等…和洋葱架构相比，整洁架构保留了应用服务层(用例)和实体层，当好像漏掉了领域服务层。然而，读过 Uncle Bob 的博客后，我们会发现，他认为任何领域对象都是实体，而非只有 DDD 中的“实体”才是实体：“一个实体可以是一个拥有方法的对象，或者是一组数据结构和函数”。实际上，他为了简化示意图而将最中间的两层合并了。</p>\n<h3 id=\"独立的可测试性\"><a href=\"#独立的可测试性\" class=\"headerlink\" title=\"独立的可测试性\"></a>独立的可测试性</h3><p>三种架构风格共同遵守的规则，让它们将应用和业务逻辑隔离了出来。这意味着任何情况下我们都可以简单地 mock 外部工具和传达机制，独立地对应用的代码进行测试，而不需要使用数据库或 HTTP 请求。<br>正如我们所见，整洁架构包含了六边形架构和洋葱架构的规则。截至目前，整洁架构好像没有加入什么新鲜的概念。但是，在整洁架构示意图的右下角，还有一张小图…</p>\n<h2 id=\"站在-MVC-和-EBI-的肩膀上\"><a href=\"#站在-MVC-和-EBI-的肩膀上\" class=\"headerlink\" title=\"站在 MVC 和 EBI 的肩膀上\"></a>站在 MVC 和 EBI 的肩膀上</h2><p>整洁架构示意图的右下角的这张小图说明了控制流是如何工作的。这张小图并没还有提供太多信息，但博客中的说明和 Robert C. Martin 的会议演讲拓展了该话题。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649608511165-12df652a-976a-45f0-a771-55b48137f02b.png#clientId=u0810918f-6dc4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=218&id=ua9bdbccc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=436&originWidth=847&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=275211&status=done&style=none&taskId=ua6c270c1-da18-4ee0-bf06-4a21b28ba89&title=&width=423.5\" alt=\"image.png\"><br>我们在上图的左侧看到的是 MVC 中的视图和控制器。双实线另一层的所有形状都是 MVC 中的模型。这些模型也代表着 EBI 架构(我们可以清楚的看到边界、交互器和实体)，六边形架构中的“应用”、洋葱架构中的“应用核心”，以及前面整洁架构示意图中的“实体”层和“用例”层。</p>\n<p>假设有一个 HTTP 请求按照控制流到达了控制器。控制器接下来会：</p>\n<ol>\n<li>拆解请求；</li>\n<li>使用相关数据创建一个请求模型；</li>\n<li>执行交互器(作为交互器接口的，即边界的，实例被注入到控制器中)中的方法并将请求模型传递给它；</li>\n<li>交互器会：<br>4.1. 使用实体网关实现(作为实体网关接口的实例被注入到交互器中)查找相关实体；<br>4.2. 编排实体之间的交互；<br>4.3 用操作的数据结果创建响应模型；<br>4.4 将响应模型交给展示器进行填充；<br>4.5 将展示器返回给控制器；</li>\n<li>使用展示器生成视图模型；</li>\n<li>将视图模型绑定到视图；</li>\n<li>将视图返回给客户端。</li>\n</ol>\n<p>这里只有“展示器”的用法我有些疑问，我在项目中的实际做法和这里不太一样。我会某种 DTO 类型的数据返回给交互器，而不是注入一个填充了数据的展示器对象。<br>我通常会采用实际上是一种 MVP 实现，控制器在其中负责从客户端接收数据并响应它。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我不认为整洁架构是革命性的，因为它实际上并没有带来突破性的概念或模式。<br>但是，我认为它是相当重要的成果：</p>\n<ul>\n<li>它发掘了某种程度上被遗忘了的概念、规则和模式；</li>\n<li>它澄清了一些实用且重要的概念、规则和模式；</li>\n<li>它告诉我们如何把所有的概念、规则和模式整合起来，形成一种构建复杂应用并保持可维护性的标准套路</li>\n</ul>\n<p>Uncle Bob 关于整洁架构的工作总会让我想起牛顿。引力始终是存在的，每个人都知道松手让苹果远离地面的高处落下，它会落向地面。牛顿做的事情“只不过”是写了一篇论文披露这个事实。这件事请很“简单”，但却让人们开始思考它并基于它创造更新的想法。<br>换句话说，我认为 Robert C. Martin 就是软件开发领域的牛顿！</p>\n<h2 id=\"引用来源\"><a href=\"#引用来源\" class=\"headerlink\" title=\"引用来源\"></a>引用来源</h2><blockquote>\n<p>2012 – Robert C. Martin – <a href=\"https://youtu.be/Nltqi7ODZTM\">Clean Architecture (NDC 2012)</a><br>2012 – Robert C. Martin – <a href=\"https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html\">The Clean Architecture</a><br>2012 – Benjamin Eberlei – <a href=\"https://beberlei.de/2012/08/13/oop_business_applications_entity_boundary_interactor.html\">OOP Business Applications: Entity, Boundary, Interactor</a><br>2017 – Lieven Doclo – <a href=\"https://www.insaneprogramming.be/article/2017/02/14/thoughts-on-clean-architecture/\">A couple of thoughts on Clean Architecture</a><br>2017 – Grzegorz Ziemoński – <a href=\"https://dzone.com/articles/clean-architecture-is-screaming\">Clean Architecture Is Screaming</a></p>\n</blockquote>\n","more":"<blockquote>\n<p>原文：<a href=\"https://herbertograca.com/2017/09/28/clean-architecture-standing-on-the-shoulders-of-giants/\">https://herbertograca.com/2017/09/28/clean-architecture-standing-on-the-shoulders-of-giants/</a> &gt; <a href=\"https://www.jianshu.com/p/b565f0c00c0c\">https://www.jianshu.com/p/b565f0c00c0c</a></p>\n</blockquote>\n<p>这篇文章是<a href=\"https://herbertograca.com/2017/07/03/the-software-architecture-chronicles/\">软件架构编年史</a>(<a href=\"https://www.jianshu.com/p/b477b2cc6cfa\">译</a>)的一部分，这部编年史由<a href=\"https://herbertograca.com/category/development/series/software-architecture/\">一系列关于软件架构的文章</a>组成。在这一系列文章中，我将写下我对软件架构的学习和思考，以及我是如何运用这些知识的。如果你阅读了这个系列中之前的文章，本篇文章的的内容将更有意义。<br>Robert C. Martin(大名鼎鼎的 Uncle Bob)于 2012 年在<a href=\"https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html\">他的一篇博客</a>中发表了整洁架构的观点，并在一些会议上做了关于该架构的演讲。<br>整洁架构借助了许多或熟悉或陌生的概念、规则和模式，说明了如何将它们融会贯通产生出一种构建应用的标准套路。</p>\n<h2 id=\"站在-EBI-架构、六边形架构和洋葱架构的肩膀上\"><a href=\"#站在-EBI-架构、六边形架构和洋葱架构的肩膀上\" class=\"headerlink\" title=\"站在 EBI 架构、六边形架构和洋葱架构的肩膀上\"></a>站在 EBI 架构、六边形架构和洋葱架构的肩膀上</h2><p>整洁架构的核心目标与端口和适配器(六边形)架构以及洋葱架构是一致的：</p>\n<ul>\n<li>工具无关</li>\n<li>传达机制无关</li>\n<li>独立的可测试性</li>\n</ul>\n<p>下面这张图发表在整洁架构的博客中，揭示了该架构的总体思路：<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649608398336-9a577acc-186f-403a-8690-645706753ebd.png#clientId=u0810918f-6dc4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=284&id=udfe816b8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=567&originWidth=772&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=463984&status=done&style=none&taskId=ub1e28296-c043-409a-87e1-6404a90d2d7&title=&width=386\" alt=\"image.png\"><br>Robert C. Martin 2012, <a href=\"https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html\">The Clean Architecture</a></p>\n<p>正如 Uncle Bob 自己在博客中所说，上面这张图试图将最新的架构观点整合成一个可操作的思路。<br>我们来对比一下整洁架构和六边形架构以及洋葱架构的示意图，看看它们在哪些方面是一致的：</p>\n<table><thead><tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649608428873-c6a319c5-c039-4f6e-90d5-a6917d8088da.png#clientId=u0810918f-6dc4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=161&id=uc137bb4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=321&originWidth=490&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=127029&status=done&style=none&taskId=u74efedda-759a-47bb-be0f-764ef1b5264&title=&width=245\" alt=\"image.png\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649608433866-107f20dd-f413-47a7-9cd9-69aff68eddbb.png#clientId=u0810918f-6dc4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=130&id=u741aac26&margin=%5Bobject%20Object%5D&name=image.png&originHeight=259&originWidth=366&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=104824&status=done&style=none&taskId=u85f3cc37-69c3-452c-9dbd-8300d3d728c&title=&width=183\" alt=\"image.png\"></th>\n</tr>\n</thead><tbody></tbody></table><h3 id=\"外化工具和传达机制\"><a href=\"#外化工具和传达机制\" class=\"headerlink\" title=\"外化工具和传达机制\"></a>外化工具和传达机制</h3><p>六边形架构聚焦于使用接口和适配器将工具和传达机制从应用中外化出去。这也是洋葱架构的核心基石之一，就像图中呈现的那样，UI、基础设置和测试全部都在示意图的最外层。整洁架构也有完全一致的特征，UI、Web、DB 等等都在最外层。最终，所有的应用核心代码都是独立于框架&#x2F;库的。</p>\n<h3 id=\"依赖方向\"><a href=\"#依赖方向\" class=\"headerlink\" title=\"依赖方向\"></a>依赖方向</h3><p>六边形架构中并没有明确地告知我们依赖的方向。然而，我们可以轻易地推测出来：应用拥有接口，它们必须由适配器实现或使用。所以适配器依赖接口，依赖位于圆心的应用。外部依赖内部，依赖的方向就指向圆心。在洋葱架构的示意图中，也没有发现关于依赖方向的表示，但是，Jeffrey Palermo 在他的第二篇博客中清楚地表明了所以依赖都指向圆心。整洁架构则非常明确的指出依赖的方向是指向圆心的。它们都在架构层级引入了依赖倒置原则。内圈不能知道外圈的任何信息。还有，当数据跨越界限进行传递时，数据总是以最方便内圈使用的格式提供。</p>\n<h3 id=\"分层\"><a href=\"#分层\" class=\"headerlink\" title=\"分层\"></a>分层</h3><p>六边形架构示意图只展现了两个层次：应用内部和应用外部。而洋葱架构引入了 DDD 中定义的应用层次的混合：控制用例逻辑的应用服务；封装了领域逻辑的领域服务，这些逻辑既不属于实体也不属于值对象；还有实体、值对象等等…和洋葱架构相比，整洁架构保留了应用服务层(用例)和实体层，当好像漏掉了领域服务层。然而，读过 Uncle Bob 的博客后，我们会发现，他认为任何领域对象都是实体，而非只有 DDD 中的“实体”才是实体：“一个实体可以是一个拥有方法的对象，或者是一组数据结构和函数”。实际上，他为了简化示意图而将最中间的两层合并了。</p>\n<h3 id=\"独立的可测试性\"><a href=\"#独立的可测试性\" class=\"headerlink\" title=\"独立的可测试性\"></a>独立的可测试性</h3><p>三种架构风格共同遵守的规则，让它们将应用和业务逻辑隔离了出来。这意味着任何情况下我们都可以简单地 mock 外部工具和传达机制，独立地对应用的代码进行测试，而不需要使用数据库或 HTTP 请求。<br>正如我们所见，整洁架构包含了六边形架构和洋葱架构的规则。截至目前，整洁架构好像没有加入什么新鲜的概念。但是，在整洁架构示意图的右下角，还有一张小图…</p>\n<h2 id=\"站在-MVC-和-EBI-的肩膀上\"><a href=\"#站在-MVC-和-EBI-的肩膀上\" class=\"headerlink\" title=\"站在 MVC 和 EBI 的肩膀上\"></a>站在 MVC 和 EBI 的肩膀上</h2><p>整洁架构示意图的右下角的这张小图说明了控制流是如何工作的。这张小图并没还有提供太多信息，但博客中的说明和 Robert C. Martin 的会议演讲拓展了该话题。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649608511165-12df652a-976a-45f0-a771-55b48137f02b.png#clientId=u0810918f-6dc4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=218&id=ua9bdbccc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=436&originWidth=847&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=275211&status=done&style=none&taskId=ua6c270c1-da18-4ee0-bf06-4a21b28ba89&title=&width=423.5\" alt=\"image.png\"><br>我们在上图的左侧看到的是 MVC 中的视图和控制器。双实线另一层的所有形状都是 MVC 中的模型。这些模型也代表着 EBI 架构(我们可以清楚的看到边界、交互器和实体)，六边形架构中的“应用”、洋葱架构中的“应用核心”，以及前面整洁架构示意图中的“实体”层和“用例”层。</p>\n<p>假设有一个 HTTP 请求按照控制流到达了控制器。控制器接下来会：</p>\n<ol>\n<li>拆解请求；</li>\n<li>使用相关数据创建一个请求模型；</li>\n<li>执行交互器(作为交互器接口的，即边界的，实例被注入到控制器中)中的方法并将请求模型传递给它；</li>\n<li>交互器会：<br>4.1. 使用实体网关实现(作为实体网关接口的实例被注入到交互器中)查找相关实体；<br>4.2. 编排实体之间的交互；<br>4.3 用操作的数据结果创建响应模型；<br>4.4 将响应模型交给展示器进行填充；<br>4.5 将展示器返回给控制器；</li>\n<li>使用展示器生成视图模型；</li>\n<li>将视图模型绑定到视图；</li>\n<li>将视图返回给客户端。</li>\n</ol>\n<p>这里只有“展示器”的用法我有些疑问，我在项目中的实际做法和这里不太一样。我会某种 DTO 类型的数据返回给交互器，而不是注入一个填充了数据的展示器对象。<br>我通常会采用实际上是一种 MVP 实现，控制器在其中负责从客户端接收数据并响应它。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我不认为整洁架构是革命性的，因为它实际上并没有带来突破性的概念或模式。<br>但是，我认为它是相当重要的成果：</p>\n<ul>\n<li>它发掘了某种程度上被遗忘了的概念、规则和模式；</li>\n<li>它澄清了一些实用且重要的概念、规则和模式；</li>\n<li>它告诉我们如何把所有的概念、规则和模式整合起来，形成一种构建复杂应用并保持可维护性的标准套路</li>\n</ul>\n<p>Uncle Bob 关于整洁架构的工作总会让我想起牛顿。引力始终是存在的，每个人都知道松手让苹果远离地面的高处落下，它会落向地面。牛顿做的事情“只不过”是写了一篇论文披露这个事实。这件事请很“简单”，但却让人们开始思考它并基于它创造更新的想法。<br>换句话说，我认为 Robert C. Martin 就是软件开发领域的牛顿！</p>\n<h2 id=\"引用来源\"><a href=\"#引用来源\" class=\"headerlink\" title=\"引用来源\"></a>引用来源</h2><blockquote>\n<p>2012 – Robert C. Martin – <a href=\"https://youtu.be/Nltqi7ODZTM\">Clean Architecture (NDC 2012)</a><br>2012 – Robert C. Martin – <a href=\"https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html\">The Clean Architecture</a><br>2012 – Benjamin Eberlei – <a href=\"https://beberlei.de/2012/08/13/oop_business_applications_entity_boundary_interactor.html\">OOP Business Applications: Entity, Boundary, Interactor</a><br>2017 – Lieven Doclo – <a href=\"https://www.insaneprogramming.be/article/2017/02/14/thoughts-on-clean-architecture/\">A couple of thoughts on Clean Architecture</a><br>2017 – Grzegorz Ziemoński – <a href=\"https://dzone.com/articles/clean-architecture-is-screaming\">Clean Architecture Is Screaming</a></p>\n</blockquote>\n","categories":[{"name":"ddd","path":"api/categories/ddd.json"}],"tags":[{"name":"DDD","path":"api/tags/DDD.json"}]}