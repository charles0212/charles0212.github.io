{"title":"DDD（三）洋葱架构","slug":"yuque/DDD（三）洋葱架构","date":"2021-09-04T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/ddd/onion-architecture.json","excerpt":"> 原文：https://herbertograca.com/2017/09/21/onion-architecture/> >> https://www.jianshu.com/p/d87d5389c92a这篇文章是软件架构编年史(译)的一部分，这部编年史由一系列关于软件架构的文章组成。在这一系列文章中，我将写下我对软件架构的学习和思考，以及我是如何运用这些知识的。如果你阅读了这个系列中之前的文章，本篇文章的的内容将更有意义。2008 年 JeffreyPalermo提出了洋葱架构。在我看来，它在端口和适配器架构的基础上贯彻了将领域放在应用中心，将传达机制(UI)和系统使用的基","covers":["https://cdn.nlark.com/yuque/0/2022/png/104130/1649608119083-5309ddc4-278c-4f09-a764-26b5310736ad.png#clientId=udd11f49d-b9ae-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=289&id=u8b611542&margin=%5Bobject%20Object%5D&name=image.png&originHeight=577&originWidth=828&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=403435&status=done&style=none&taskId=u696a16fc-1738-4c2e-b42e-fa75a013357&title=&width=414"],"content":"<blockquote>\n<p>原文：<a href=\"https://herbertograca.com/2017/09/21/onion-architecture/\">https://herbertograca.com/2017/09/21/onion-architecture/</a> &gt; <a href=\"https://www.jianshu.com/p/d87d5389c92a\">https://www.jianshu.com/p/d87d5389c92a</a></p>\n</blockquote>\n<p>这篇文章是<a href=\"https://herbertograca.com/2017/07/03/the-software-architecture-chronicles/\">软件架构编年史</a>(<a href=\"https://www.jianshu.com/p/b477b2cc6cfa\">译</a>)的一部分，这部编年史由<a href=\"https://herbertograca.com/category/development/series/software-architecture/\">一系列关于软件架构的文章</a>组成。在这一系列文章中，我将写下我对软件架构的学习和思考，以及我是如何运用这些知识的。如果你阅读了这个系列中之前的文章，本篇文章的的内容将更有意义。<br><a href=\"http://jeffreypalermo.com/blog/the-onion-architecture-part-1/\">2008 年 Jeffrey Palermo 提出了洋葱架构</a>。在我看来，它在端口和适配器架构的基础上贯彻了将领域放在应用中心，将传达机制(UI)和系统使用的基础设施(ORM、搜索引擎、第三方 API…)放在外围的思路。但是它前进了一步，在其中加入了内部层次。</p>\n<p>我们从通常拥有四个层次(<strong>表现层、应用层、领域层、持久化层</strong>)的分层架构发展到了端口和适配器架构，它只是含蓄地提到了两个同心圆层次：</p>\n<ol>\n<li>代表传达机制和基础设施的外层；</li>\n<li>代表业务逻辑的内层。</li>\n</ol>\n<p>端口和适配器架构与洋葱架构有着相同的思路，它们都通过编写适配器代码将应用核心从对基础设施的关注中解放出来，避免基础设施代码渗透到应用核心之中。这样应用使用的工具和传达机制都可以轻松地替换，可以一定程度地避免技术、工具或者供应商锁定。<br>另外，它还有着脱离真实基础设施和传达机制应用仍然可以运行的便利，这样可以使用 mock 代替它们方便测试。<br>然而，洋葱架构还告诉我们，企业应用中存在着不止两个层次，它在业务逻辑中加入了一些在领域驱动设计的过程中被识别出来的层次：<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649608119083-5309ddc4-278c-4f09-a764-26b5310736ad.png#clientId=udd11f49d-b9ae-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=289&id=u8b611542&margin=%5Bobject%20Object%5D&name=image.png&originHeight=577&originWidth=828&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=403435&status=done&style=none&taskId=u696a16fc-1738-4c2e-b42e-fa75a013357&title=&width=414\" alt=\"image.png\" width=\"414\"><br>此外，它明确了端口和适配器架构中关于依赖方向的暗示：</p>\n<ul>\n<li>外层依赖内层；</li>\n<li>内层对外层无感知。</li>\n</ul>\n<p>也就是说耦合的方向是从外层指向中心，它提供了一个完全独立的对象模型(领域模型)，该模型位于架构的核心，不依赖其它任何层次。我们拥有了在不影响内层的情况下改变外层的灵活性。它在架构层面运用了<strong>依赖倒置原则</strong>。</p>\n<blockquote>\n<p>洋葱架构的关键原则：</p>\n<ul>\n<li><p>围绕独立的对象模型构建应用</p>\n</li>\n<li><p>内层定义接口，外层实现接口</p>\n</li>\n<li><p>依赖的方向指向圆心</p>\n</li>\n<li><p>所有的应用代码可以独立于基础设施编译和运行</p>\n<p>—— Jeffrey Palermo 2008, <a href=\"http://jeffreypalermo.com/blog/the-onion-architecture-part-3/\">The Onion Architecture: part 3</a></p>\n</li>\n</ul>\n</blockquote>\n<p>还有，任何一个外部层次都可以直接调用任何一个内部层次，这样既不会破坏耦合的方向，也避免了仅仅为了追求分层模式而创建一些没有任何业务逻辑的代理方法甚至代理类。这和 Martin Flowler 表达的偏好一致。</p>\n<blockquote>\n<p>上层可以使用它们下面的任意层次，而不仅仅是它们直接的下层。——Jeffrey Palermo 2008, <a href=\"http://jeffreypalermo.com/blog/the-onion-architecture-part-3/\">The Onion Architecture: part 3</a></p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>洋葱架构在端口和适配器架构的基础之上增加了一些的应用业务逻辑的内部组织，这些组织基于领域驱动设计的概念划分的。<br>这又是一次职责分离的更深入的演化，带来了高内聚低耦合，反过来也带来了更好的可测试性和可维护性。</p>\n<h2 id=\"引用来源\"><a href=\"#引用来源\" class=\"headerlink\" title=\"引用来源\"></a>引用来源</h2><blockquote>\n<p>2002 – Martin Fowler – <a href=\"https://www.amazon.com/dp/0321127420/ref=wl_it_dp_o_pC_nS_ttl?_encoding=UTF8&colid=CG11VVP0H8Y8&coliid=I1QPWUPW6G7YF5\">Patterns of Enterprise Application Architecture</a><br>2008 – Jeffrey Palermo – <a href=\"http://jeffreypalermo.com/blog/the-onion-architecture-part-1/\">The Onion Architecture: part 1</a><br>2008 – Jeffrey Palermo – <a href=\"http://jeffreypalermo.com/blog/the-onion-architecture-part-2/\">The Onion Architecture: part 2</a><br>2008 – Jeffrey Palermo – <a href=\"http://jeffreypalermo.com/blog/the-onion-architecture-part-3/\">The Onion Architecture: part 3</a><br>2013 – Jeffrey Palermo – <a href=\"http://jeffreypalermo.com/blog/onion-architecture-part-4-after-four-years/\">The Onion Architecture: part 4 – After Four Years</a></p>\n</blockquote>\n","more":"<blockquote>\n<p>原文：<a href=\"https://herbertograca.com/2017/09/21/onion-architecture/\">https://herbertograca.com/2017/09/21/onion-architecture/</a> &gt; <a href=\"https://www.jianshu.com/p/d87d5389c92a\">https://www.jianshu.com/p/d87d5389c92a</a></p>\n</blockquote>\n<p>这篇文章是<a href=\"https://herbertograca.com/2017/07/03/the-software-architecture-chronicles/\">软件架构编年史</a>(<a href=\"https://www.jianshu.com/p/b477b2cc6cfa\">译</a>)的一部分，这部编年史由<a href=\"https://herbertograca.com/category/development/series/software-architecture/\">一系列关于软件架构的文章</a>组成。在这一系列文章中，我将写下我对软件架构的学习和思考，以及我是如何运用这些知识的。如果你阅读了这个系列中之前的文章，本篇文章的的内容将更有意义。<br><a href=\"http://jeffreypalermo.com/blog/the-onion-architecture-part-1/\">2008 年 Jeffrey Palermo 提出了洋葱架构</a>。在我看来，它在端口和适配器架构的基础上贯彻了将领域放在应用中心，将传达机制(UI)和系统使用的基础设施(ORM、搜索引擎、第三方 API…)放在外围的思路。但是它前进了一步，在其中加入了内部层次。</p>\n<p>我们从通常拥有四个层次(<strong>表现层、应用层、领域层、持久化层</strong>)的分层架构发展到了端口和适配器架构，它只是含蓄地提到了两个同心圆层次：</p>\n<ol>\n<li>代表传达机制和基础设施的外层；</li>\n<li>代表业务逻辑的内层。</li>\n</ol>\n<p>端口和适配器架构与洋葱架构有着相同的思路，它们都通过编写适配器代码将应用核心从对基础设施的关注中解放出来，避免基础设施代码渗透到应用核心之中。这样应用使用的工具和传达机制都可以轻松地替换，可以一定程度地避免技术、工具或者供应商锁定。<br>另外，它还有着脱离真实基础设施和传达机制应用仍然可以运行的便利，这样可以使用 mock 代替它们方便测试。<br>然而，洋葱架构还告诉我们，企业应用中存在着不止两个层次，它在业务逻辑中加入了一些在领域驱动设计的过程中被识别出来的层次：<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1649608119083-5309ddc4-278c-4f09-a764-26b5310736ad.png#clientId=udd11f49d-b9ae-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=289&id=u8b611542&margin=%5Bobject%20Object%5D&name=image.png&originHeight=577&originWidth=828&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=403435&status=done&style=none&taskId=u696a16fc-1738-4c2e-b42e-fa75a013357&title=&width=414\" alt=\"image.png\" width=\"414\"><br>此外，它明确了端口和适配器架构中关于依赖方向的暗示：</p>\n<ul>\n<li>外层依赖内层；</li>\n<li>内层对外层无感知。</li>\n</ul>\n<p>也就是说耦合的方向是从外层指向中心，它提供了一个完全独立的对象模型(领域模型)，该模型位于架构的核心，不依赖其它任何层次。我们拥有了在不影响内层的情况下改变外层的灵活性。它在架构层面运用了<strong>依赖倒置原则</strong>。</p>\n<blockquote>\n<p>洋葱架构的关键原则：</p>\n<ul>\n<li><p>围绕独立的对象模型构建应用</p>\n</li>\n<li><p>内层定义接口，外层实现接口</p>\n</li>\n<li><p>依赖的方向指向圆心</p>\n</li>\n<li><p>所有的应用代码可以独立于基础设施编译和运行</p>\n<p>—— Jeffrey Palermo 2008, <a href=\"http://jeffreypalermo.com/blog/the-onion-architecture-part-3/\">The Onion Architecture: part 3</a></p>\n</li>\n</ul>\n</blockquote>\n<p>还有，任何一个外部层次都可以直接调用任何一个内部层次，这样既不会破坏耦合的方向，也避免了仅仅为了追求分层模式而创建一些没有任何业务逻辑的代理方法甚至代理类。这和 Martin Flowler 表达的偏好一致。</p>\n<blockquote>\n<p>上层可以使用它们下面的任意层次，而不仅仅是它们直接的下层。——Jeffrey Palermo 2008, <a href=\"http://jeffreypalermo.com/blog/the-onion-architecture-part-3/\">The Onion Architecture: part 3</a></p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>洋葱架构在端口和适配器架构的基础之上增加了一些的应用业务逻辑的内部组织，这些组织基于领域驱动设计的概念划分的。<br>这又是一次职责分离的更深入的演化，带来了高内聚低耦合，反过来也带来了更好的可测试性和可维护性。</p>\n<h2 id=\"引用来源\"><a href=\"#引用来源\" class=\"headerlink\" title=\"引用来源\"></a>引用来源</h2><blockquote>\n<p>2002 – Martin Fowler – <a href=\"https://www.amazon.com/dp/0321127420/ref=wl_it_dp_o_pC_nS_ttl?_encoding=UTF8&colid=CG11VVP0H8Y8&coliid=I1QPWUPW6G7YF5\">Patterns of Enterprise Application Architecture</a><br>2008 – Jeffrey Palermo – <a href=\"http://jeffreypalermo.com/blog/the-onion-architecture-part-1/\">The Onion Architecture: part 1</a><br>2008 – Jeffrey Palermo – <a href=\"http://jeffreypalermo.com/blog/the-onion-architecture-part-2/\">The Onion Architecture: part 2</a><br>2008 – Jeffrey Palermo – <a href=\"http://jeffreypalermo.com/blog/the-onion-architecture-part-3/\">The Onion Architecture: part 3</a><br>2013 – Jeffrey Palermo – <a href=\"http://jeffreypalermo.com/blog/onion-architecture-part-4-after-four-years/\">The Onion Architecture: part 4 – After Four Years</a></p>\n</blockquote>\n","categories":[{"name":"ddd","path":"api/categories/ddd.json"}],"tags":[{"name":"DDD","path":"api/tags/DDD.json"}]}