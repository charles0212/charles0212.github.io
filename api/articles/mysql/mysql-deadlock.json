{"title":"MySQL死锁分析","slug":"yuque/MySQL死锁分析","date":"2018-01-29T16:00:00.000Z","updated":"2022-05-15T04:19:28.494Z","comments":true,"path":"api/articles/mysql/mysql-deadlock.json","excerpt":"背景以前接触到的数据库死锁，都是批量更新时加锁顺序不一致而导致的死锁，但是上周却遇到了一个很难理解的死锁。借着这个机会又重新学习了一下mysql的死锁知识以及常见的死锁场景。在多方调研以及和同事们的讨论下终于发现了这个死锁问题的成因，收获颇多。虽然是后端程序员，我们不需要像DBA一样深入地去分析与锁相关的源码，但是如果我们能够掌握基本的死锁排查方法，对我们的日常开发还是大有裨益的。PS：本文不会介绍死锁的基本知识，mysql的加锁原理可以参考本文的参考资料提供的链接。死锁起因先介绍一下数据库和表情况，因为涉及到公司内部真是的数据，所以以下都做了模拟，不会影响具体的分析","covers":["/images/c1.jpg"],"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>以前接触到的数据库死锁，都是批量更新时加锁顺序不一致而导致的死锁，但是上周却遇到了一个很难理解的死锁。借着这个机会又重新学习了一下 mysql 的死锁知识以及常见的死锁场景。在多方调研以及和同事们的讨论下终于发现了这个死锁问题的成因，收获颇多。虽然是后端程序员，我们不需要像 DBA 一样深入地去分析与锁相关的源码，但是如果我们能够掌握基本的死锁排查方法，对我们的日常开发还是大有裨益的。 PS：本文不会介绍死锁的基本知识，mysql 的加锁原理可以参考本文的参考资料提供的链接。</p>\n<h2 id=\"死锁起因\"><a href=\"#死锁起因\" class=\"headerlink\" title=\"死锁起因\"></a>死锁起因</h2><p>先介绍一下数据库和表情况，因为涉及到公司内部真是的数据，所以以下都做了模拟，不会影响具体的分析。 我们采用的是 5.5 版本的 mysql 数据库，事务隔离级别是默认的 RR（Repeatable-Read），采用 innodb 引擎。假设存在 test 表：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE &#96;test&#96; (\n  &#96;id&#96; int(11) unsigned NOT NULL AUTO_INCREMENT,\n  &#96;a&#96; int(11) unsigned DEFAULT NULL,\n  PRIMARY KEY (&#96;id&#96;),\n  UNIQUE KEY &#96;a&#96; (&#96;a&#96;)\n) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;100 DEFAULT CHARSET&#x3D;utf8;</code></pre>\n\n<p>表的结构很简单，一个主键 id，另一个唯一索引 a。表里的数据如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql&gt; select * from test;\n+----+------+\n| id | a    |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  4 |    4 |\n+----+------+\n3 rows in set (0.00 sec)</code></pre>\n\n<p>出现死锁的操作如下：</p>\n<table><colgroup><col width=\"5\"></col><col width=\"30\"></col><col width=\"30\"></col></colgroup><thead><tr>\n<th></th>\n<th><strong>事务 1</strong></th>\n<th><strong>事务 2</strong></th>\n</tr>\n</thead><tbody>\n<tr>\n<td>1</td>\n<td></td>\n<td>begin</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>delete from test where a &#x3D; 2;</td>\n</tr>\n<tr>\n<td>3</td>\n<td>begin</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>delete from test where a &#x3D; 2; （事务 1 卡住）</td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>提示出现死锁：ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</td>\n<td>insert into test (id, a) values (10, 2);</td>\n</tr>\n</tbody></table><p>然后我们可以通过 SHOW ENGINE INNODB STATUS;来查看死锁日志：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">------------------------\nLATEST DETECTED DEADLOCK\n------------------------\n170219 13:31:31\n*** (1) TRANSACTION:\nTRANSACTION 2A8BD, ACTIVE 11 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 2 lock struct(s), heap size 376, 1 row lock(s)\nMySQL thread id 448218, OS thread handle 0x2abe5fb5d700, query id 18923238 renjun.fangcloud.net 121.41.41.92 root updating\ndelete from test where a &#x3D; 2\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 0 page no 923 n bits 80 index &#96;a&#96; of table &#96;oauthdemo&#96;.&#96;test&#96; trx id 2A8BD lock_mode X waiting\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32\n 0: len 4; hex 00000002; asc     ;;\n 1: len 4; hex 00000002; asc     ;;\n\n*** (2) TRANSACTION:\nTRANSACTION 2A8BC, ACTIVE 18 sec inserting\nmysql tables in use 1, locked 1\n4 lock struct(s), heap size 1248, 3 row lock(s), undo log entries 2\nMySQL thread id 448217, OS thread handle 0x2abe5fd65700, query id 18923239 renjun.fangcloud.net 121.41.41.92 root update\ninsert into test (id,a) values (10,2)\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 0 page no 923 n bits 80 index &#96;a&#96; of table &#96;oauthdemo&#96;.&#96;test&#96; trx id 2A8BC lock_mode X locks rec but not gap\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32\n 0: len 4; hex 00000002; asc     ;;\n 1: len 4; hex 00000002; asc     ;;\n\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 0 page no 923 n bits 80 index &#96;a&#96; of table &#96;oauthdemo&#96;.&#96;test&#96; trx id 2A8BC lock mode S waiting\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32\n 0: len 4; hex 00000002; asc     ;;\n 1: len 4; hex 00000002; asc     ;;\n\n*** WE ROLL BACK TRANSACTION (1)</code></pre>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"阅读死锁日志\"><a href=\"#阅读死锁日志\" class=\"headerlink\" title=\"阅读死锁日志\"></a>阅读死锁日志</h3><p>遇到死锁，第一步就是阅读死锁日志。死锁日志通常分为两部分，上半部分说明了事务 1 在等待什么锁：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">170219 13:31:31\n*** (1) TRANSACTION:\nTRANSACTION 2A8BD, ACTIVE 11 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 2 lock struct(s), heap size 376, 1 row lock(s)\nMySQL thread id 448218, OS thread handle 0x2abe5fb5d700, query id 18923238 renjun.fangcloud.net 121.41.41.92 root updating\ndelete from test where a &#x3D; 2\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 0 page no 923 n bits 80 index &#96;a&#96; of table &#96;oauthdemo&#96;.&#96;test&#96; trx id 2A8BD lock_mode X waiting\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32\n 0: len 4; hex 00000002; asc     ;;\n 1: len 4; hex 00000002; asc     ;;</code></pre>\n\n<p>从日志里我们可以看到事务 1 当前正在执行 delete from test where a &#x3D; 2，该条语句正在申请索引 a 的 X 锁，所以提示 lock_mode X waiting。 然后日志的下半部分说明了事务 2 当前持有的锁以及等待的锁：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">*** (2) TRANSACTION:\nTRANSACTION 2A8BC, ACTIVE 18 sec inserting\nmysql tables in use 1, locked 1\n4 lock struct(s), heap size 1248, 3 row lock(s), undo log entries 2\nMySQL thread id 448217, OS thread handle 0x2abe5fd65700, query id 18923239 renjun.fangcloud.net 121.41.41.92 root update\ninsert into test (id,a) values (10,2)\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 0 page no 923 n bits 80 index &#96;a&#96; of table &#96;oauthdemo&#96;.&#96;test&#96; trx id 2A8BC lock_mode X locks rec but not gap\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32\n 0: len 4; hex 00000002; asc     ;;\n 1: len 4; hex 00000002; asc     ;;\n\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 0 page no 923 n bits 80 index &#96;a&#96; of table &#96;oauthdemo&#96;.&#96;test&#96; trx id 2A8BC lock mode S waiting\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32\n 0: len 4; hex 00000002; asc     ;;\n 1: len 4; hex 00000002; asc     ;;</code></pre>\n\n<p>从日志的 HOLDS THE LOCKS(S)块中我们可以看到事务 2 持有索引 a 的 X 锁，并且是记录锁（Record Lock）。该锁是通过事务 2 在步骤 2 执行的 delete 语句申请的。由于是 RR 隔离模式下的基于唯一索引的等值查询（Where a &#x3D; 2），所以会申请一个记录锁，而非 next-key 锁。</p>\n<p>从日志的 WAITING FOR THIS LOCK TO BE GRANTED 块中我们可以看到事务 2 正在申请 S 锁，也就是共享锁。该锁是 insert into test (id,a) values (10,2)语句申请的。<strong>insert 语句在普通情况下是会申请排他锁，也就是 X 锁，但是这里出现了 S 锁。这是因为 a 字段是一个唯一索引，所以 insert 语句会在插入前进行一次 duplicate key 的检查，为了使这次检查成功，需要申请 S 锁防止其他事务对 a 字段进行修改。</strong></p>\n<p>那么为什么该 S 锁会失败呢？这是对同一个字段的锁的申请是需要排队的。S 锁前面还有一个未申请成功的 X 锁，所以 S 锁必须等待，所以形成了循环等待，死锁出现了。通过阅读死锁日志，我们可以清楚地知道两个事务形成了怎样的循环等待，再加以分析，就可以逆向推断出循环等待的成因，也就是死锁形成的原因。</p>\n<h3 id=\"死锁形成流程图\"><a href=\"#死锁形成流程图\" class=\"headerlink\" title=\"死锁形成流程图\"></a>死锁形成流程图</h3><p>为了让大家更好地理解死锁形成的原因，我们再通过表格的形式阐述死锁形成的流程：</p>\n<table><colgroup><col width=\"5\"></col><col width=\"30\"></col><col width=\"30\"></col></colgroup><thead><tr>\n<th></th>\n<th><strong>事务 1</strong></th>\n<th><strong>事务 2</strong></th>\n</tr>\n</thead><tbody>\n<tr>\n<td>1</td>\n<td></td>\n<td>begin</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>delete from test where a &#x3D; 2; 执行成功，事务 2 占有 a&#x3D;2 下的 X 锁，类型为记录锁。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>begin</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>delete from test where a &#x3D; 2; 事务 1 希望申请 a&#x3D;2 下的 X 锁，但是由于事务 2 已经申请了一把 X 锁，两把 X 锁互斥，所以 X 锁申请进入锁请求队列。</td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>出现死锁，事务 1 权重较小，所以被选择回滚（成为牺牲品）。</td>\n<td>insert into test (id, a) values (10, 2); 由于 a 字段建立了唯一索引，所以需要申请 S 锁以便检查 duplicate key，由于插入的 a 的值还是 2，所以排在 X 锁后面。但是前面的 X 锁的申请只有在事务 2commit 或者 rollback 之后才能成功，此时形成了循环等待，死锁产生。</td>\n</tr>\n</tbody></table><p>‘id 41 page no 433805’</p>\n<table><colgroup><col width=\"5\"></col><col width=\"30\"></col><col width=\"30\"></col></colgroup><thead><tr>\n<th></th>\n<th><strong>事务 1</strong></th>\n<th><strong>事务 2</strong></th>\n</tr>\n</thead><tbody>\n<tr>\n<td>1</td>\n<td></td>\n<td>开始事务</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>delete from fdc_fulfil_net_line_agg WHERE uk_fulfil_net &#x3D; ‘433805’; 执行成功，事务 2 占有 uk_fulfil_net &#x3D; ‘433805’下的 X No Gap 锁(lock_mode X locks rec but not gap)，类型为记录锁。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>开始事务</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>delete from fdc_fulfil_net_line_agg WHERE uk_fulfil_net &#x3D; ‘433805’; 事务 1 希望申请 uk_fulfil_net &#x3D; ‘433805’下的 X No Gap 锁，但是由于事务 2 已经申请了一把 X No Gap 锁，两把 X 锁互斥，所以 X 锁申请进入锁请求队列。</td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>出现死锁，事务 1 权重较小，所以被选择回滚（成为牺牲品）。</td>\n<td>insert into fdc_fulfil_net_line_agg (id, uk_fulfil_net) values (xx, ‘433805’); 由于 uk_fulfil_net 字段建立了唯一索引，所以需要申请 S 锁以便检查 duplicate key，由于插入的 uk_fulfil_net 的值还是 433805，所以排在 X 锁后面。但是前面的 X 锁的申请只有在事务 2commit 或者 rollback 之后才能成功，此时形成了循环等待，死锁产生。</td>\n</tr>\n</tbody></table><h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>在排查死锁的过程中，有个同事还发现了上述场景会产生另一种死锁，该场景无法通过手工复现，只有高并发场景下才有可能复现。<br>该死锁对应的日志这里就不贴出了，与上一个死锁的核心差别是事务 2 等待的锁从 S 锁换成了 X 锁，也就是 lock_mode X locks gap before rec insert intention waiting。我们还是通过表格来详细说明该死锁产生的流程：</p>\n<table><colgroup><col width=\"5\"></col><col width=\"30\"></col><col width=\"30\"></col></colgroup><thead><tr>\n<th></th>\n<th><strong>事务 1</strong></th>\n<th><strong>事务 2</strong></th>\n</tr>\n</thead><tbody>\n<tr>\n<td>1</td>\n<td></td>\n<td>begin</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>delete from test where a &#x3D; 2; 执行成功，事务 2 占有 a&#x3D;2 下的 X 锁，类型为记录锁。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>begin</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td></td>\n<td>【insert 第 1 阶段】insert into test (id, a) values (10, 2); 事务 2 申请 S 锁进行 duplicate key 进行检查。检查成功。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>delete from test where a &#x3D; 2; 事务 1 希望申请 a&#x3D;2 下的 X 锁，但是由于事务 2 已经申请了一把 X 锁，两把 X 锁互斥，所以 X 锁申请进入锁请求队列。</td>\n<td></td>\n</tr>\n<tr>\n<td>6</td>\n<td>出现死锁，事务 1 权重较小，所以被选择回滚（成为牺牲品）。</td>\n<td>【insert 第 2 阶段】insert into test (id, a) values (10, 2); 事务 2 开始插入数据，S 锁升级为 X 锁，类型为 insert intention。同理，X 锁进入队列排队，形成循环等待，死锁产生。</td>\n</tr>\n</tbody></table><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>排查死锁时，首先需要根据死锁日志分析循环等待的场景，然后根据当前各个事务执行的 SQL 分析出加锁类型以及顺序，逆向推断出如何形成循环等待，这样就能找到死锁产生的原因了。<br>PS：上述分析都是基于经验的推断，希望其他小伙伴们能够指出当中的错误以及不足指出，谢谢！</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>Mysql 加锁处理分析<br>一个最不可思议的 Mysql 死锁分析<br>Innodb 锁系统之如何阅读死锁日志<br>源码分析 insert 和 delete 操作的加锁<br>Innodb 锁相关源码翻译</p>\n","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>以前接触到的数据库死锁，都是批量更新时加锁顺序不一致而导致的死锁，但是上周却遇到了一个很难理解的死锁。借着这个机会又重新学习了一下 mysql 的死锁知识以及常见的死锁场景。在多方调研以及和同事们的讨论下终于发现了这个死锁问题的成因，收获颇多。虽然是后端程序员，我们不需要像 DBA 一样深入地去分析与锁相关的源码，但是如果我们能够掌握基本的死锁排查方法，对我们的日常开发还是大有裨益的。 PS：本文不会介绍死锁的基本知识，mysql 的加锁原理可以参考本文的参考资料提供的链接。</p>\n<h2 id=\"死锁起因\"><a href=\"#死锁起因\" class=\"headerlink\" title=\"死锁起因\"></a>死锁起因</h2><p>先介绍一下数据库和表情况，因为涉及到公司内部真是的数据，所以以下都做了模拟，不会影响具体的分析。 我们采用的是 5.5 版本的 mysql 数据库，事务隔离级别是默认的 RR（Repeatable-Read），采用 innodb 引擎。假设存在 test 表：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE &#96;test&#96; (\n  &#96;id&#96; int(11) unsigned NOT NULL AUTO_INCREMENT,\n  &#96;a&#96; int(11) unsigned DEFAULT NULL,\n  PRIMARY KEY (&#96;id&#96;),\n  UNIQUE KEY &#96;a&#96; (&#96;a&#96;)\n) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;100 DEFAULT CHARSET&#x3D;utf8;</code></pre>\n\n<p>表的结构很简单，一个主键 id，另一个唯一索引 a。表里的数据如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql&gt; select * from test;\n+----+------+\n| id | a    |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  4 |    4 |\n+----+------+\n3 rows in set (0.00 sec)</code></pre>\n\n<p>出现死锁的操作如下：</p>\n<table><colgroup><col width=\"5\"></col><col width=\"30\"></col><col width=\"30\"></col></colgroup><thead><tr>\n<th></th>\n<th><strong>事务 1</strong></th>\n<th><strong>事务 2</strong></th>\n</tr>\n</thead><tbody>\n<tr>\n<td>1</td>\n<td></td>\n<td>begin</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>delete from test where a &#x3D; 2;</td>\n</tr>\n<tr>\n<td>3</td>\n<td>begin</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>delete from test where a &#x3D; 2; （事务 1 卡住）</td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>提示出现死锁：ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</td>\n<td>insert into test (id, a) values (10, 2);</td>\n</tr>\n</tbody></table><p>然后我们可以通过 SHOW ENGINE INNODB STATUS;来查看死锁日志：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">------------------------\nLATEST DETECTED DEADLOCK\n------------------------\n170219 13:31:31\n*** (1) TRANSACTION:\nTRANSACTION 2A8BD, ACTIVE 11 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 2 lock struct(s), heap size 376, 1 row lock(s)\nMySQL thread id 448218, OS thread handle 0x2abe5fb5d700, query id 18923238 renjun.fangcloud.net 121.41.41.92 root updating\ndelete from test where a &#x3D; 2\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 0 page no 923 n bits 80 index &#96;a&#96; of table &#96;oauthdemo&#96;.&#96;test&#96; trx id 2A8BD lock_mode X waiting\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32\n 0: len 4; hex 00000002; asc     ;;\n 1: len 4; hex 00000002; asc     ;;\n\n*** (2) TRANSACTION:\nTRANSACTION 2A8BC, ACTIVE 18 sec inserting\nmysql tables in use 1, locked 1\n4 lock struct(s), heap size 1248, 3 row lock(s), undo log entries 2\nMySQL thread id 448217, OS thread handle 0x2abe5fd65700, query id 18923239 renjun.fangcloud.net 121.41.41.92 root update\ninsert into test (id,a) values (10,2)\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 0 page no 923 n bits 80 index &#96;a&#96; of table &#96;oauthdemo&#96;.&#96;test&#96; trx id 2A8BC lock_mode X locks rec but not gap\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32\n 0: len 4; hex 00000002; asc     ;;\n 1: len 4; hex 00000002; asc     ;;\n\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 0 page no 923 n bits 80 index &#96;a&#96; of table &#96;oauthdemo&#96;.&#96;test&#96; trx id 2A8BC lock mode S waiting\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32\n 0: len 4; hex 00000002; asc     ;;\n 1: len 4; hex 00000002; asc     ;;\n\n*** WE ROLL BACK TRANSACTION (1)</code></pre>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"阅读死锁日志\"><a href=\"#阅读死锁日志\" class=\"headerlink\" title=\"阅读死锁日志\"></a>阅读死锁日志</h3><p>遇到死锁，第一步就是阅读死锁日志。死锁日志通常分为两部分，上半部分说明了事务 1 在等待什么锁：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">170219 13:31:31\n*** (1) TRANSACTION:\nTRANSACTION 2A8BD, ACTIVE 11 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 2 lock struct(s), heap size 376, 1 row lock(s)\nMySQL thread id 448218, OS thread handle 0x2abe5fb5d700, query id 18923238 renjun.fangcloud.net 121.41.41.92 root updating\ndelete from test where a &#x3D; 2\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 0 page no 923 n bits 80 index &#96;a&#96; of table &#96;oauthdemo&#96;.&#96;test&#96; trx id 2A8BD lock_mode X waiting\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32\n 0: len 4; hex 00000002; asc     ;;\n 1: len 4; hex 00000002; asc     ;;</code></pre>\n\n<p>从日志里我们可以看到事务 1 当前正在执行 delete from test where a &#x3D; 2，该条语句正在申请索引 a 的 X 锁，所以提示 lock_mode X waiting。 然后日志的下半部分说明了事务 2 当前持有的锁以及等待的锁：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">*** (2) TRANSACTION:\nTRANSACTION 2A8BC, ACTIVE 18 sec inserting\nmysql tables in use 1, locked 1\n4 lock struct(s), heap size 1248, 3 row lock(s), undo log entries 2\nMySQL thread id 448217, OS thread handle 0x2abe5fd65700, query id 18923239 renjun.fangcloud.net 121.41.41.92 root update\ninsert into test (id,a) values (10,2)\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 0 page no 923 n bits 80 index &#96;a&#96; of table &#96;oauthdemo&#96;.&#96;test&#96; trx id 2A8BC lock_mode X locks rec but not gap\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32\n 0: len 4; hex 00000002; asc     ;;\n 1: len 4; hex 00000002; asc     ;;\n\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 0 page no 923 n bits 80 index &#96;a&#96; of table &#96;oauthdemo&#96;.&#96;test&#96; trx id 2A8BC lock mode S waiting\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32\n 0: len 4; hex 00000002; asc     ;;\n 1: len 4; hex 00000002; asc     ;;</code></pre>\n\n<p>从日志的 HOLDS THE LOCKS(S)块中我们可以看到事务 2 持有索引 a 的 X 锁，并且是记录锁（Record Lock）。该锁是通过事务 2 在步骤 2 执行的 delete 语句申请的。由于是 RR 隔离模式下的基于唯一索引的等值查询（Where a &#x3D; 2），所以会申请一个记录锁，而非 next-key 锁。</p>\n<p>从日志的 WAITING FOR THIS LOCK TO BE GRANTED 块中我们可以看到事务 2 正在申请 S 锁，也就是共享锁。该锁是 insert into test (id,a) values (10,2)语句申请的。<strong>insert 语句在普通情况下是会申请排他锁，也就是 X 锁，但是这里出现了 S 锁。这是因为 a 字段是一个唯一索引，所以 insert 语句会在插入前进行一次 duplicate key 的检查，为了使这次检查成功，需要申请 S 锁防止其他事务对 a 字段进行修改。</strong></p>\n<p>那么为什么该 S 锁会失败呢？这是对同一个字段的锁的申请是需要排队的。S 锁前面还有一个未申请成功的 X 锁，所以 S 锁必须等待，所以形成了循环等待，死锁出现了。通过阅读死锁日志，我们可以清楚地知道两个事务形成了怎样的循环等待，再加以分析，就可以逆向推断出循环等待的成因，也就是死锁形成的原因。</p>\n<h3 id=\"死锁形成流程图\"><a href=\"#死锁形成流程图\" class=\"headerlink\" title=\"死锁形成流程图\"></a>死锁形成流程图</h3><p>为了让大家更好地理解死锁形成的原因，我们再通过表格的形式阐述死锁形成的流程：</p>\n<table><colgroup><col width=\"5\"></col><col width=\"30\"></col><col width=\"30\"></col></colgroup><thead><tr>\n<th></th>\n<th><strong>事务 1</strong></th>\n<th><strong>事务 2</strong></th>\n</tr>\n</thead><tbody>\n<tr>\n<td>1</td>\n<td></td>\n<td>begin</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>delete from test where a &#x3D; 2; 执行成功，事务 2 占有 a&#x3D;2 下的 X 锁，类型为记录锁。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>begin</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>delete from test where a &#x3D; 2; 事务 1 希望申请 a&#x3D;2 下的 X 锁，但是由于事务 2 已经申请了一把 X 锁，两把 X 锁互斥，所以 X 锁申请进入锁请求队列。</td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>出现死锁，事务 1 权重较小，所以被选择回滚（成为牺牲品）。</td>\n<td>insert into test (id, a) values (10, 2); 由于 a 字段建立了唯一索引，所以需要申请 S 锁以便检查 duplicate key，由于插入的 a 的值还是 2，所以排在 X 锁后面。但是前面的 X 锁的申请只有在事务 2commit 或者 rollback 之后才能成功，此时形成了循环等待，死锁产生。</td>\n</tr>\n</tbody></table><p>‘id 41 page no 433805’</p>\n<table><colgroup><col width=\"5\"></col><col width=\"30\"></col><col width=\"30\"></col></colgroup><thead><tr>\n<th></th>\n<th><strong>事务 1</strong></th>\n<th><strong>事务 2</strong></th>\n</tr>\n</thead><tbody>\n<tr>\n<td>1</td>\n<td></td>\n<td>开始事务</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>delete from fdc_fulfil_net_line_agg WHERE uk_fulfil_net &#x3D; ‘433805’; 执行成功，事务 2 占有 uk_fulfil_net &#x3D; ‘433805’下的 X No Gap 锁(lock_mode X locks rec but not gap)，类型为记录锁。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>开始事务</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>delete from fdc_fulfil_net_line_agg WHERE uk_fulfil_net &#x3D; ‘433805’; 事务 1 希望申请 uk_fulfil_net &#x3D; ‘433805’下的 X No Gap 锁，但是由于事务 2 已经申请了一把 X No Gap 锁，两把 X 锁互斥，所以 X 锁申请进入锁请求队列。</td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>出现死锁，事务 1 权重较小，所以被选择回滚（成为牺牲品）。</td>\n<td>insert into fdc_fulfil_net_line_agg (id, uk_fulfil_net) values (xx, ‘433805’); 由于 uk_fulfil_net 字段建立了唯一索引，所以需要申请 S 锁以便检查 duplicate key，由于插入的 uk_fulfil_net 的值还是 433805，所以排在 X 锁后面。但是前面的 X 锁的申请只有在事务 2commit 或者 rollback 之后才能成功，此时形成了循环等待，死锁产生。</td>\n</tr>\n</tbody></table><h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>在排查死锁的过程中，有个同事还发现了上述场景会产生另一种死锁，该场景无法通过手工复现，只有高并发场景下才有可能复现。<br>该死锁对应的日志这里就不贴出了，与上一个死锁的核心差别是事务 2 等待的锁从 S 锁换成了 X 锁，也就是 lock_mode X locks gap before rec insert intention waiting。我们还是通过表格来详细说明该死锁产生的流程：</p>\n<table><colgroup><col width=\"5\"></col><col width=\"30\"></col><col width=\"30\"></col></colgroup><thead><tr>\n<th></th>\n<th><strong>事务 1</strong></th>\n<th><strong>事务 2</strong></th>\n</tr>\n</thead><tbody>\n<tr>\n<td>1</td>\n<td></td>\n<td>begin</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>delete from test where a &#x3D; 2; 执行成功，事务 2 占有 a&#x3D;2 下的 X 锁，类型为记录锁。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>begin</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td></td>\n<td>【insert 第 1 阶段】insert into test (id, a) values (10, 2); 事务 2 申请 S 锁进行 duplicate key 进行检查。检查成功。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>delete from test where a &#x3D; 2; 事务 1 希望申请 a&#x3D;2 下的 X 锁，但是由于事务 2 已经申请了一把 X 锁，两把 X 锁互斥，所以 X 锁申请进入锁请求队列。</td>\n<td></td>\n</tr>\n<tr>\n<td>6</td>\n<td>出现死锁，事务 1 权重较小，所以被选择回滚（成为牺牲品）。</td>\n<td>【insert 第 2 阶段】insert into test (id, a) values (10, 2); 事务 2 开始插入数据，S 锁升级为 X 锁，类型为 insert intention。同理，X 锁进入队列排队，形成循环等待，死锁产生。</td>\n</tr>\n</tbody></table><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>排查死锁时，首先需要根据死锁日志分析循环等待的场景，然后根据当前各个事务执行的 SQL 分析出加锁类型以及顺序，逆向推断出如何形成循环等待，这样就能找到死锁产生的原因了。<br>PS：上述分析都是基于经验的推断，希望其他小伙伴们能够指出当中的错误以及不足指出，谢谢！</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>Mysql 加锁处理分析<br>一个最不可思议的 Mysql 死锁分析<br>Innodb 锁系统之如何阅读死锁日志<br>源码分析 insert 和 delete 操作的加锁<br>Innodb 锁相关源码翻译</p>\n","categories":[{"name":"数据库","path":"api/categories/数据库.json"}],"tags":[{"name":"Mysql","path":"api/tags/Mysql.json"},{"name":"Deadlock","path":"api/tags/Deadlock.json"}]}