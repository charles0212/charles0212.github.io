{"title":"Shell（二）分支和主干jar差异","slug":"yuque/Shell（二）分支和主干jar差异","date":"2019-07-20T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/shell/jar-diff.json","excerpt":"分支和主干 jar 差异脚本文件见附件，可以快速了解本次分支修改，便于发布前比对当前的开发分支和主干jar 差异情况。 将jar-diff.sh放在根目录文件下面。#!/bin/bash# 获取当前git分支CURRENT_BRANCH=`sh -c 'git branch --no-color 2>/dev/null' | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/\\1/'`if [ -n \"$CURRENT_BRANCH\" ]; then# 当前分支不为空APP_NAME=`cat .git/config | grep url | sed","covers":["/images/c2.jpg"],"content":"<h2 id=\"分支和主干-jar-差异\"><a href=\"#分支和主干-jar-差异\" class=\"headerlink\" title=\"分支和主干 jar 差异\"></a>分支和主干 jar 差异</h2><p>脚本文件见附件，可以快速了解本次分支修改，便于发布前比对当前的开发分支和主干 jar 差异情况。 将 jar-diff.sh 放在根目录文件下面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;bash\n\n# 获取当前git分支\nCURRENT_BRANCH&#x3D;&#96;sh -c &#39;git branch --no-color 2&gt;&#x2F;dev&#x2F;null&#39; | sed -e &#39;&#x2F;^[^*]&#x2F;d&#39; -e &#39;s&#x2F;* \\(.*\\)&#x2F;\\1&#x2F;&#39;&#96;\n\nif [ -n &quot;$CURRENT_BRANCH&quot; ]; then\n# 当前分支不为空\nAPP_NAME&#x3D;&#96;cat .git&#x2F;config | grep url | sed &#39;s&#x2F;.*\\&#x2F;\\(.*\\)\\.git&#x2F;\\1&#x2F;g&#39;&#96;\necho &quot;app name : &quot;$&#123;APP_NAME&#125;\nGIT_PATH&#x3D;&#96;cat .git&#x2F;config | grep url | sed &#39;s&#x2F;.*\\url &#x3D; \\(.*\\)&#x2F;\\1&#x2F;g&#39;&#96;\necho &quot;git path : &quot;$&#123;GIT_PATH&#125;\necho &quot;current branch : &quot;$&#123;CURRENT_BRANCH&#125;&quot;\\n&quot;\n\nif [ &quot;$CURRENT_BRANCH&quot;x &#x3D; &quot;master&quot;x ]; then\necho &quot;please change branch to diff jar. &quot;\nexit -1\nfi\n\n# 比较当前分支和master分支的jar的差异\nMASTER_FILE_NAME&#x3D;&quot;&#x2F;tmp&#x2F;&quot;$&#123;APP_NAME&#125;&quot;_master&quot;\nBRANCH_FILE_NAME&#x3D;&quot;&#x2F;tmp&#x2F;&quot;$&#123;APP_NAME&#125;&quot;_&quot;&#96;echo $&#123;CURRENT_BRANCH&#125; | sed -e &#39;s&#x2F;\\&#x2F;&#x2F;\\_&#x2F;g&#39;&#96;\n# 未清洗的临时文件\nMASTER_FILE_TMP&#x3D;$&#123;MASTER_FILE_NAME&#125;&quot;_tmp&quot;\nBRANCH_FILE_TMP&#x3D;$&#123;BRANCH_FILE_NAME&#125;&quot;_tmp&quot;\n\n# 编译生成工程依赖的jar列表\ngit pull\nmvn clean install -Dmaven.test.skip &gt; &#x2F;dev&#x2F;null\nmvn dependency:list&gt;$&#123;BRANCH_FILE_TMP&#125;\n\n# 校验分支编译是否成功\nif cat $&#123;BRANCH_FILE_TMP&#125; | grep &quot;BUILD SUCCESS&quot;&gt;&#x2F;dev&#x2F;null\nthen\necho $&#123;CURRENT_BRANCH&#125; &quot; build success&quot;\n# 清洗jar列表数据\ncat $&#123;BRANCH_FILE_TMP&#125; | grep &quot;\\[INFO\\]    &quot; | grep compile | sed &#39;s&#x2F;\\[INFO\\]    &#x2F;&#x2F;g&#39; | \\\nsed &#39;s&#x2F;:compile&#x2F;&#x2F;g&#39; | sort | uniq &gt; $&#123;BRANCH_FILE_NAME&#125;\nelse\necho $&#123;CURRENT_BRANCH&#125; &quot;build failure\\n&quot;\nexit -1;\nfi\n\n# 切换到主干分支\nsleep 2s\ngit checkout master\ngit pull\nmvn clean install -Dmaven.test.skip &gt; &#x2F;dev&#x2F;null\nmvn dependency:list&gt;$&#123;MASTER_FILE_TMP&#125;\n\n# 校验主干编译是否成功\nif cat $&#123;MASTER_FILE_TMP&#125; | grep &quot;BUILD SUCCESS&quot;&gt;&#x2F;dev&#x2F;null\nthen\necho &quot;master build success\\n&quot;\n# 清洗jar列表数据\ncat $&#123;MASTER_FILE_TMP&#125; | grep &quot;\\[INFO\\]    &quot; | grep compile | sed &#39;s&#x2F;\\[INFO\\]    &#x2F;&#x2F;g&#39; | \\\nsed &#39;s&#x2F;:compile&#x2F;&#x2F;g&#39; | sort | uniq &gt; $&#123;MASTER_FILE_NAME&#125;\n\n# 输出分支的差异(不输出公共行)\n# 去掉--suppress-common-lines，可显示所有依赖的jar列表\ndiff -y -W 150 --suppress-common-lines $&#123;BRANCH_FILE_NAME&#125; $&#123;MASTER_FILE_NAME&#125; | tee diff.txt\necho &quot;\\n&quot;\n\nelse\necho &quot;master build failure\\n&quot;\nexit -1;\nfi\n\n# 切换回原来的分支\nsleep 2s\ngit checkout $&#123;CURRENT_BRANCH&#125;\nelse\necho &quot;not a git repository. &quot;\nfi</code></pre>\n","more":"<h2 id=\"分支和主干-jar-差异\"><a href=\"#分支和主干-jar-差异\" class=\"headerlink\" title=\"分支和主干 jar 差异\"></a>分支和主干 jar 差异</h2><p>脚本文件见附件，可以快速了解本次分支修改，便于发布前比对当前的开发分支和主干 jar 差异情况。 将 jar-diff.sh 放在根目录文件下面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;bash\n\n# 获取当前git分支\nCURRENT_BRANCH&#x3D;&#96;sh -c &#39;git branch --no-color 2&gt;&#x2F;dev&#x2F;null&#39; | sed -e &#39;&#x2F;^[^*]&#x2F;d&#39; -e &#39;s&#x2F;* \\(.*\\)&#x2F;\\1&#x2F;&#39;&#96;\n\nif [ -n &quot;$CURRENT_BRANCH&quot; ]; then\n# 当前分支不为空\nAPP_NAME&#x3D;&#96;cat .git&#x2F;config | grep url | sed &#39;s&#x2F;.*\\&#x2F;\\(.*\\)\\.git&#x2F;\\1&#x2F;g&#39;&#96;\necho &quot;app name : &quot;$&#123;APP_NAME&#125;\nGIT_PATH&#x3D;&#96;cat .git&#x2F;config | grep url | sed &#39;s&#x2F;.*\\url &#x3D; \\(.*\\)&#x2F;\\1&#x2F;g&#39;&#96;\necho &quot;git path : &quot;$&#123;GIT_PATH&#125;\necho &quot;current branch : &quot;$&#123;CURRENT_BRANCH&#125;&quot;\\n&quot;\n\nif [ &quot;$CURRENT_BRANCH&quot;x &#x3D; &quot;master&quot;x ]; then\necho &quot;please change branch to diff jar. &quot;\nexit -1\nfi\n\n# 比较当前分支和master分支的jar的差异\nMASTER_FILE_NAME&#x3D;&quot;&#x2F;tmp&#x2F;&quot;$&#123;APP_NAME&#125;&quot;_master&quot;\nBRANCH_FILE_NAME&#x3D;&quot;&#x2F;tmp&#x2F;&quot;$&#123;APP_NAME&#125;&quot;_&quot;&#96;echo $&#123;CURRENT_BRANCH&#125; | sed -e &#39;s&#x2F;\\&#x2F;&#x2F;\\_&#x2F;g&#39;&#96;\n# 未清洗的临时文件\nMASTER_FILE_TMP&#x3D;$&#123;MASTER_FILE_NAME&#125;&quot;_tmp&quot;\nBRANCH_FILE_TMP&#x3D;$&#123;BRANCH_FILE_NAME&#125;&quot;_tmp&quot;\n\n# 编译生成工程依赖的jar列表\ngit pull\nmvn clean install -Dmaven.test.skip &gt; &#x2F;dev&#x2F;null\nmvn dependency:list&gt;$&#123;BRANCH_FILE_TMP&#125;\n\n# 校验分支编译是否成功\nif cat $&#123;BRANCH_FILE_TMP&#125; | grep &quot;BUILD SUCCESS&quot;&gt;&#x2F;dev&#x2F;null\nthen\necho $&#123;CURRENT_BRANCH&#125; &quot; build success&quot;\n# 清洗jar列表数据\ncat $&#123;BRANCH_FILE_TMP&#125; | grep &quot;\\[INFO\\]    &quot; | grep compile | sed &#39;s&#x2F;\\[INFO\\]    &#x2F;&#x2F;g&#39; | \\\nsed &#39;s&#x2F;:compile&#x2F;&#x2F;g&#39; | sort | uniq &gt; $&#123;BRANCH_FILE_NAME&#125;\nelse\necho $&#123;CURRENT_BRANCH&#125; &quot;build failure\\n&quot;\nexit -1;\nfi\n\n# 切换到主干分支\nsleep 2s\ngit checkout master\ngit pull\nmvn clean install -Dmaven.test.skip &gt; &#x2F;dev&#x2F;null\nmvn dependency:list&gt;$&#123;MASTER_FILE_TMP&#125;\n\n# 校验主干编译是否成功\nif cat $&#123;MASTER_FILE_TMP&#125; | grep &quot;BUILD SUCCESS&quot;&gt;&#x2F;dev&#x2F;null\nthen\necho &quot;master build success\\n&quot;\n# 清洗jar列表数据\ncat $&#123;MASTER_FILE_TMP&#125; | grep &quot;\\[INFO\\]    &quot; | grep compile | sed &#39;s&#x2F;\\[INFO\\]    &#x2F;&#x2F;g&#39; | \\\nsed &#39;s&#x2F;:compile&#x2F;&#x2F;g&#39; | sort | uniq &gt; $&#123;MASTER_FILE_NAME&#125;\n\n# 输出分支的差异(不输出公共行)\n# 去掉--suppress-common-lines，可显示所有依赖的jar列表\ndiff -y -W 150 --suppress-common-lines $&#123;BRANCH_FILE_NAME&#125; $&#123;MASTER_FILE_NAME&#125; | tee diff.txt\necho &quot;\\n&quot;\n\nelse\necho &quot;master build failure\\n&quot;\nexit -1;\nfi\n\n# 切换回原来的分支\nsleep 2s\ngit checkout $&#123;CURRENT_BRANCH&#125;\nelse\necho &quot;not a git repository. &quot;\nfi</code></pre>\n","categories":[{"name":"shell","path":"api/categories/shell.json"}],"tags":[{"name":"Shell","path":"api/tags/Shell.json"}]}