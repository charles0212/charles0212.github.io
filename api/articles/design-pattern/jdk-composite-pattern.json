{"title":"JDK设计模式（七）组合模式","slug":"yuque/JDK设计模式（七）组合模式","date":"2015-04-12T01:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/design-pattern/jdk-composite-pattern.json","excerpt":"1、定义将对象组合成树形结构以表示“部分整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。2、解决的问题组合模式解耦了客户程序与复杂元素内部结构，从而使客户程序可以像处理简单元素一样来处理复杂元素。3、模式中的角色1、抽象构件（component）:是组合中对象的接口，适当情况下，实现所有类共有方法的默认行为，声明一个接口，用于管理和访问component 子部件2、树枝构件（composite）：定义具有叶节点的组件的行为3、叶子构件（leaf）：定义叶节点的行为4、 客户角色（client）：使用component 接口操作组件行","covers":["https://cdn.nlark.com/yuque/0/2022/png/104130/1648394693687-7df5b20d-72cf-427e-9bbe-774618e4950d.png#clientId=u41e983d5-1616-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u4857537f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=389&originWidth=868&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=33492&status=done&style=none&taskId=ue4d4763b-ff94-4fa7-be5c-5d8f3d7177b&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648394693698-5cba9e03-5349-4b4a-8b3d-0137f8565604.png#clientId=u41e983d5-1616-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u4be6ba3f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=435&originWidth=710&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=33529&status=done&style=none&taskId=ud69337e5-1587-4304-ba43-dc0b36be9b9&title="],"content":"<h2 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h2><p>将对象组合成树形结构以表示“部分整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<h2 id=\"2、解决的问题\"><a href=\"#2、解决的问题\" class=\"headerlink\" title=\"2、解决的问题\"></a>2、解决的问题</h2><p>组合模式解耦了客户程序与复杂元素内部结构，从而使客户程序可以像处理简单元素一样来处理复杂元素。</p>\n<h2 id=\"3、模式中的角色\"><a href=\"#3、模式中的角色\" class=\"headerlink\" title=\"3、模式中的角色\"></a>3、模式中的角色</h2><p>1、抽象构件（component）:是组合中对象的接口，适当情况下，实现所有类共有方法的默认行为，声明一个接口，用于管理和访问 component 子部件<br>2、 树枝构件（composite）：定义具有叶节点的组件的行为<br>3、 叶子构件（leaf）：定义叶节点的行为<br>4、 客户角色（client）：使用 component 接口操作组件行为</p>\n<h2 id=\"4、模式解读\"><a href=\"#4、模式解读\" class=\"headerlink\" title=\"4、模式解读\"></a>4、模式解读</h2><p>组合模式类图如下所示<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648394693687-7df5b20d-72cf-427e-9bbe-774618e4950d.png#clientId=u41e983d5-1616-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u4857537f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=389&originWidth=868&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=33492&status=done&style=none&taskId=ue4d4763b-ff94-4fa7-be5c-5d8f3d7177b&title=\" alt=\"image.png\"><br>采用统一的方式 operation()，处理 composite 和 leaf。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public abstract class Component&#123;\n    public abstract void operation();\n    public void add(Component component)&#123;&#125;;\n    public void remove(Component component)&#123;&#125;;\n&#125;\n\npublic class Composite extends Component&#123;\n    String name;\n    ArrayList children &#x3D; new ArrayList();\n\n    public Composite(String name)&#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public void add(Component component)&#123;\n        children.add(component);\n    &#125;\n\n    public void remove(Component component)&#123;\n        children.remove(component);\n    &#125;\n\n    public void operation()&#123;\n        System.out.println(name);\n        Iterator iterator &#x3D; children.iterator();\n        while(iterator.hasNext())&#123;\n            Component child &#x3D; (Component)iterator.next();\n            child.operation();\n        &#125;\n    &#125;\n&#125;\n\npublic class Leaf extends Component&#123;\n    String name;\n\n    public Leaf(String name)&#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public void operation()&#123;\n        System.out.println(name);\n    &#125;\n&#125;</code></pre>\n\n<p>通过调用 operation 打印整个层次结构树。</p>\n<h2 id=\"5、JDK-涉及到的设计模式\"><a href=\"#5、JDK-涉及到的设计模式\" class=\"headerlink\" title=\"5、JDK 涉及到的设计模式\"></a>5、JDK 涉及到的设计模式</h2><p>JDK 中体现有 org.w3c.dom.Node 和 javax.swing.JComponent，以 Node 为例。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648394693698-5cba9e03-5349-4b4a-8b3d-0137f8565604.png#clientId=u41e983d5-1616-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u4be6ba3f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=435&originWidth=710&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=33529&status=done&style=none&taskId=ud69337e5-1587-4304-ba43-dc0b36be9b9&title=\" alt=\"image.png\"><br>其中 Node 既充当 Component 角色，也充当 Composite 角色。其中 Document 相当于层次结构的根节点。Text 为叶子节点，其他的为中间树枝节点（只列出部分 XML 节点对象）。</p>\n<h2 id=\"6、模式总结\"><a href=\"#6、模式总结\" class=\"headerlink\" title=\"6、模式总结\"></a>6、模式总结</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>1、组合模式可以很容易的增加新的构件。<br>2、 使用组合模式可以使客户端变的很容易设计，因为客户端可以对组合和叶节点一视同仁。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>1、使用组合模式后，控制树枝构件的类型不太容易。<br>2、用继承的方法来增加新的行为很困难。</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>1、你想表示对象的部分-整体层次结构。<br>2、 你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p>\n","more":"<h2 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h2><p>将对象组合成树形结构以表示“部分整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<h2 id=\"2、解决的问题\"><a href=\"#2、解决的问题\" class=\"headerlink\" title=\"2、解决的问题\"></a>2、解决的问题</h2><p>组合模式解耦了客户程序与复杂元素内部结构，从而使客户程序可以像处理简单元素一样来处理复杂元素。</p>\n<h2 id=\"3、模式中的角色\"><a href=\"#3、模式中的角色\" class=\"headerlink\" title=\"3、模式中的角色\"></a>3、模式中的角色</h2><p>1、抽象构件（component）:是组合中对象的接口，适当情况下，实现所有类共有方法的默认行为，声明一个接口，用于管理和访问 component 子部件<br>2、 树枝构件（composite）：定义具有叶节点的组件的行为<br>3、 叶子构件（leaf）：定义叶节点的行为<br>4、 客户角色（client）：使用 component 接口操作组件行为</p>\n<h2 id=\"4、模式解读\"><a href=\"#4、模式解读\" class=\"headerlink\" title=\"4、模式解读\"></a>4、模式解读</h2><p>组合模式类图如下所示<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648394693687-7df5b20d-72cf-427e-9bbe-774618e4950d.png#clientId=u41e983d5-1616-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u4857537f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=389&originWidth=868&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=33492&status=done&style=none&taskId=ue4d4763b-ff94-4fa7-be5c-5d8f3d7177b&title=\" alt=\"image.png\"><br>采用统一的方式 operation()，处理 composite 和 leaf。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public abstract class Component&#123;\n    public abstract void operation();\n    public void add(Component component)&#123;&#125;;\n    public void remove(Component component)&#123;&#125;;\n&#125;\n\npublic class Composite extends Component&#123;\n    String name;\n    ArrayList children &#x3D; new ArrayList();\n\n    public Composite(String name)&#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public void add(Component component)&#123;\n        children.add(component);\n    &#125;\n\n    public void remove(Component component)&#123;\n        children.remove(component);\n    &#125;\n\n    public void operation()&#123;\n        System.out.println(name);\n        Iterator iterator &#x3D; children.iterator();\n        while(iterator.hasNext())&#123;\n            Component child &#x3D; (Component)iterator.next();\n            child.operation();\n        &#125;\n    &#125;\n&#125;\n\npublic class Leaf extends Component&#123;\n    String name;\n\n    public Leaf(String name)&#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public void operation()&#123;\n        System.out.println(name);\n    &#125;\n&#125;</code></pre>\n\n<p>通过调用 operation 打印整个层次结构树。</p>\n<h2 id=\"5、JDK-涉及到的设计模式\"><a href=\"#5、JDK-涉及到的设计模式\" class=\"headerlink\" title=\"5、JDK 涉及到的设计模式\"></a>5、JDK 涉及到的设计模式</h2><p>JDK 中体现有 org.w3c.dom.Node 和 javax.swing.JComponent，以 Node 为例。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648394693698-5cba9e03-5349-4b4a-8b3d-0137f8565604.png#clientId=u41e983d5-1616-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u4be6ba3f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=435&originWidth=710&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=33529&status=done&style=none&taskId=ud69337e5-1587-4304-ba43-dc0b36be9b9&title=\" alt=\"image.png\"><br>其中 Node 既充当 Component 角色，也充当 Composite 角色。其中 Document 相当于层次结构的根节点。Text 为叶子节点，其他的为中间树枝节点（只列出部分 XML 节点对象）。</p>\n<h2 id=\"6、模式总结\"><a href=\"#6、模式总结\" class=\"headerlink\" title=\"6、模式总结\"></a>6、模式总结</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>1、组合模式可以很容易的增加新的构件。<br>2、 使用组合模式可以使客户端变的很容易设计，因为客户端可以对组合和叶节点一视同仁。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>1、使用组合模式后，控制树枝构件的类型不太容易。<br>2、用继承的方法来增加新的行为很困难。</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>1、你想表示对象的部分-整体层次结构。<br>2、 你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p>\n","categories":[{"name":"design-pattern","path":"api/categories/design-pattern.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"设计模式","path":"api/tags/设计模式.json"}]}