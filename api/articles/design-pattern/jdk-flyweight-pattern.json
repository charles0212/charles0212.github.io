{"title":"JDK设计模式（十）享元模式","slug":"yuque/JDK设计模式（十）享元模式","date":"2015-04-12T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/design-pattern/jdk-flyweight-pattern.json","excerpt":"1、定义采用一个共享来避免大量拥有相同内容对象的开销。2、解决的问题使用共享物件，用来尽可能减少内存使用量，以及分享资讯给尽可能多的相似物件；适合用于只是因重复而导致使用无法令人接受的大量内存的大量物件。3、模式中的角色内蕴状态存储在享元内部，不会随环境的改变而有所不同，是可以共享的；外蕴状态是不可以共享的，它随环境的改变而改变的，因此外蕴状态是由客户端来保持（因为环境的变化是由客户端引起的）。在每个具体的环境下，客户端将外蕴状态传递给享元，从而创建不同的对象出来。享元模式可分为：单纯享元模式和复合享元模式。1、抽象享元角色(Flyweight)：为具体享元角色规定","covers":["https://cdn.nlark.com/yuque/0/2022/png/104130/1648395132246-6f6a485b-fb25-4196-aa2a-b77369c50f2e.png#clientId=uf5f969c2-5399-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ua4efe0d7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=308&originWidth=781&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=20055&status=done&style=none&taskId=u65ef4130-df66-422d-b911-31311a53d00&title="],"content":"<h2 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h2><p>采用一个共享来避免大量拥有相同内容对象的开销。</p>\n<h2 id=\"2、解决的问题\"><a href=\"#2、解决的问题\" class=\"headerlink\" title=\"2、解决的问题\"></a>2、解决的问题</h2><p>使用共享物件，用来尽可能减少内存使用量，以及分享资讯给尽可能多的相似物件；适合用于只是因重复而导致使用无法令人接受的大量内存的大量物件。</p>\n<h2 id=\"3、模式中的角色\"><a href=\"#3、模式中的角色\" class=\"headerlink\" title=\"3、模式中的角色\"></a>3、模式中的角色</h2><p>内蕴状态存储在享元内部，不会随环境的改变而有所不同，是可以共享的；外蕴状态是不可以共享的，它随环境的改变而改变的，因此外蕴状态是由客户端来保持（因为环境的变化是由客户端引起的）。在每个具体的环境下，客户端将外蕴状态传递给享元，从而创建不同的对象出来。享元模式可分为：单纯享元模式和复合享元模式。<br>1、 抽象享元角色(Flyweight)：为具体享元角色规定了必须实现的方法，而外蕴状态就是以参数的形式通过此方法传入。在 Java 中可以由抽象类、接口来担当。<br>2、具体享元角色(ConcreteFlyweight)：实现抽象角色规定的方法。如果存在内蕴状态，就负责为内蕴状态提供存储空间。<br>3、复合享元角色(ConcreteCompositeFlyweight)：它所代表的对象是不可以共享的，并且可以分解成为多个单纯享元对象的组合。<br>4、享元工厂角色(FlyweightFactory)：负责创建和管理享元角色。要想达到共享的目的，这个角色的实现是关键！<br>5、客户端角色(client)：维护对所有享元对象的引用，而且还需要存储对应的外蕴状态。</p>\n<h2 id=\"4、模式解读\"><a href=\"#4、模式解读\" class=\"headerlink\" title=\"4、模式解读\"></a>4、模式解读</h2><p>享元模式的类图如下所示<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648395132246-6f6a485b-fb25-4196-aa2a-b77369c50f2e.png#clientId=uf5f969c2-5399-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ua4efe0d7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=308&originWidth=781&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=20055&status=done&style=none&taskId=u65ef4130-df66-422d-b911-31311a53d00&title=\" alt=\"image.png\"><br>左半部，和简单工厂模式类似；再看右半部，像合成模式，合成模式用在此处就是为了将具体享元角色和复合享元角色同等对待和处理，通过将享元模式与合成模式组合在一起，可以确保复合享元中所包含的每个单纯享元都具有相同的外蕴状态，而这些单纯享元的内蕴状态往往是不同的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 复合的享元模式:\n * 复合享元是不能共享的。\n * 但是复合享元是可以分解为可共享的单纯享元。\n *&#x2F;\npublic class FlyweightTest &#123;\n    public static void main(String[] args)&#123;\n        FlyweightFactory f &#x3D; new FlyweightFactory();\n\n        Flyweight fly &#x3D; f.factory(&quot;aba&quot;);\n        fly.operation(&quot;charles&quot;);\n\n        f.checkFlyweight();\n    &#125;\n&#125;\n\n&#x2F;**\n * 抽象享元\n *&#x2F;\nabstract class Flyweight&#123;\n    public abstract void operation(String extrinsicState);\n&#125;\n\n&#x2F;**\n * 具体享元\n *&#x2F;\nclass ConcreteFlyweight extends Flyweight&#123;\n\n    private Character inState;\n\n    public ConcreteFlyweight(Character inState)&#123;\n        this.inState &#x3D; inState;\n    &#125;\n\n    &#x2F;**\n     * 外蕴状态改变方法行为，但不会改变内蕴状态\n     *&#x2F;\n    @Override\n    public void operation(String extState)&#123;\n        String str &#x3D; &quot;inState:&quot; + inState + &quot;;extState:&quot; + extState;\n        System.out.println(str);\n    &#125;\n\n&#125;\n\n&#x2F;**\n * 复合享元\n *&#x2F;\nclass CompositeFlyweight extends Flyweight&#123;\n    private Map&lt;Character , Flyweight&gt; map;\n\n    public CompositeFlyweight()&#123;\n        map &#x3D; new HashMap&lt;Character, Flyweight&gt;();\n    &#125;\n\n    public void add(Character c, Flyweight fly)&#123;\n        map.put(c , fly);\n    &#125;\n\n    @Override\n    public void operation(String extState)&#123;\n        Iterator&lt;Map.Entry&lt;Character , Flyweight&gt;&gt; it &#x3D; map.entrySet().iterator();\n        while(it.hasNext()) &#123;\n            Map.Entry&lt;Character , Flyweight&gt; entry &#x3D; it.next();\n            Flyweight fly &#x3D; entry.getValue();\n            fly.operation(extState);\n        &#125;\n    &#125;\n&#125;\n\n&#x2F;**\n * 享元工厂\n *&#x2F;\nclass FlyweightFactory&#123;\n    private Map&lt;Character , Flyweight&gt; map;\n\n    public FlyweightFactory()&#123;\n        map &#x3D; new HashMap&lt;Character , Flyweight&gt;();\n    &#125;\n\n    &#x2F;**\n     * 单纯享元工厂\n     *&#x2F;\n    public Flyweight factory(Character state) &#123;\n\n        Flyweight flyweight;\n\n        if(map.containsKey(state)) &#123;\n            flyweight &#x3D; map.get(state);\n        &#125; else&#123;\n            flyweight &#x3D; new ConcreteFlyweight(state);\n            map.put(state , flyweight);\n        &#125;\n\n        return flyweight;\n    &#125;\n\n    &#x2F;**\n     * 复合享元工厂\n     * 此处Character的复合类型恰好是String，\n     * 当无此巧合时，可使用List等聚集类型传入.\n     *&#x2F;\n    public Flyweight factory(String compositeState)&#123;\n        CompositeFlyweight composite &#x3D; new CompositeFlyweight();\n\n        for(int i &#x3D; 0 ; i &lt;compositeState.length(); i++)&#123;\n            Character c &#x3D; new Character(compositeState.charAt(i));\n            composite.add(c , this.factory(c));\n        &#125;\n\n        return composite;\n    &#125;\n\n    &#x2F;**\n     * 辅助方法\n     *&#x2F;\n    public void checkFlyweight() &#123;\n        Iterator&lt;Map.Entry&lt;Character, Flyweight&gt;&gt; it &#x3D; map.entrySet().iterator();\n        System.out.println(&quot;checkFlyweight:&quot;);\n        while(it.hasNext()) &#123;\n            Map.Entry&lt;Character , Flyweight&gt; entry &#x3D; it.next();\n            Character key &#x3D; entry.getKey();\n            System.out.println(&quot;key:&quot; + key);\n        &#125;\n    &#125;\n\n&#125;</code></pre>\n\n<p>从复杂度上来讲，复合享元模式显而易见是比单纯享元模式复杂的。再从享元模式的关键——共享，来分析：复合享元模式在共享上面是没有达到预期的效果，可以说是没有起到共享的目的。虽然对于它内部包含的单纯享元角色来说还是能够起到共享的作用，但是复合享元角色中一个内蕴状态和对象使用了空间来保存，肯定不会节省空间和对象个数的。所以复合享元模式是违背享元模式初衷的，因此我们应该尽量使用单纯享元模式。</p>\n<h2 id=\"5、JDK-涉及到的设计模式\"><a href=\"#5、JDK-涉及到的设计模式\" class=\"headerlink\" title=\"5、JDK 涉及到的设计模式\"></a>5、JDK 涉及到的设计模式</h2><p>JDK 中体现有 Integer.valueOf(int i)，Character.valueOf(char c)以及 String 常量池。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static Integer valueOf(String s) throws NumberFormatException &#123;\n    return Integer.valueOf(parseInt(s, 10));\n&#125;\n\n&#x2F;* i 在IntegerCache中，返回共享对象，不在其中创建新的Integer对象 *&#x2F;\npublic static Integer valueOf(int i) &#123;\n    if (i &gt;&#x3D; IntegerCache.low &amp;&amp; i &lt;&#x3D; IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n&#125;\n\n&#x2F;* IntegerCache，一个内部类，注意它的属性都是定义为static final *&#x2F;\nprivate static class IntegerCache &#123;\n    static final int low &#x3D; -128;\n    static final int high;\n    static final Integer cache[];\n\n    static &#123;\n        &#x2F;**\n         * h值，可以通过设置jdk的AutoBoxCacheMax参数调整，\n         * 自动缓存区间设置为[-128,N],注意区间的下界是固定\n         *&#x2F;\n        int h &#x3D; 127;\n        String integerCacheHighPropValue &#x3D;\n            sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);\n        if (integerCacheHighPropValue !&#x3D; null) &#123;\n            try &#123;\n                int i &#x3D; parseInt(integerCacheHighPropValue);\n                i &#x3D; Math.max(i, 127);\n                &#x2F;&#x2F; 数组大小最大为Integer.MAX_VALUE\n                h &#x3D; Math.min(i, Integer.MAX_VALUE - (-low) -1);\n            &#125; catch( NumberFormatException nfe) &#123;\n                &#x2F;&#x2F; 不能解析为int，忽略\n            &#125;\n        &#125;\n        high &#x3D; h;\n\n        cache &#x3D; new Integer[(high - low) + 1];\n        int j &#x3D; low;\n        for(int k &#x3D; 0; k &lt;cache.length; k++)\n            cache[k] &#x3D; new Integer(j++); &#x2F;&#x2F;-128到high值逐一分配到缓存数组\n\n        &#x2F;&#x2F; range [-128, 127] must be interned (JLS7 5.1.7)\n        assert IntegerCache.high &gt;&#x3D; 127;\n    &#125;\n\n    private IntegerCache() &#123;&#125;\n&#125;</code></pre>\n\n<h2 id=\"6、模式总结\"><a href=\"#6、模式总结\" class=\"headerlink\" title=\"6、模式总结\"></a>6、模式总结</h2><h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><p>享元模式优点就在于它能够大幅度的降低内存中对象的数量；而为了做到这一步也带来了它的缺点：它使得系统逻辑复杂化，而且在一定程度上外蕴状态影响了系统的速度。**</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>1、当我们发现某个类型的对象有大量的实例时，我们是否可以对这些实例进行分类，经过分类后，我们发现只有很少的类别的情况下。<br>2、我们发现通过使用享元模式后能够提高系统的性能和不会带来更多的复杂度时。<br>3、享元模式一般是给出本地内存资源节省的一个方案，并不适合互联网上的分布式应用的情况，不过享元模式对于排他性的要求资源的控制，是个不错的选择的。</p>\n","more":"<h2 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h2><p>采用一个共享来避免大量拥有相同内容对象的开销。</p>\n<h2 id=\"2、解决的问题\"><a href=\"#2、解决的问题\" class=\"headerlink\" title=\"2、解决的问题\"></a>2、解决的问题</h2><p>使用共享物件，用来尽可能减少内存使用量，以及分享资讯给尽可能多的相似物件；适合用于只是因重复而导致使用无法令人接受的大量内存的大量物件。</p>\n<h2 id=\"3、模式中的角色\"><a href=\"#3、模式中的角色\" class=\"headerlink\" title=\"3、模式中的角色\"></a>3、模式中的角色</h2><p>内蕴状态存储在享元内部，不会随环境的改变而有所不同，是可以共享的；外蕴状态是不可以共享的，它随环境的改变而改变的，因此外蕴状态是由客户端来保持（因为环境的变化是由客户端引起的）。在每个具体的环境下，客户端将外蕴状态传递给享元，从而创建不同的对象出来。享元模式可分为：单纯享元模式和复合享元模式。<br>1、 抽象享元角色(Flyweight)：为具体享元角色规定了必须实现的方法，而外蕴状态就是以参数的形式通过此方法传入。在 Java 中可以由抽象类、接口来担当。<br>2、具体享元角色(ConcreteFlyweight)：实现抽象角色规定的方法。如果存在内蕴状态，就负责为内蕴状态提供存储空间。<br>3、复合享元角色(ConcreteCompositeFlyweight)：它所代表的对象是不可以共享的，并且可以分解成为多个单纯享元对象的组合。<br>4、享元工厂角色(FlyweightFactory)：负责创建和管理享元角色。要想达到共享的目的，这个角色的实现是关键！<br>5、客户端角色(client)：维护对所有享元对象的引用，而且还需要存储对应的外蕴状态。</p>\n<h2 id=\"4、模式解读\"><a href=\"#4、模式解读\" class=\"headerlink\" title=\"4、模式解读\"></a>4、模式解读</h2><p>享元模式的类图如下所示<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648395132246-6f6a485b-fb25-4196-aa2a-b77369c50f2e.png#clientId=uf5f969c2-5399-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ua4efe0d7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=308&originWidth=781&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=20055&status=done&style=none&taskId=u65ef4130-df66-422d-b911-31311a53d00&title=\" alt=\"image.png\"><br>左半部，和简单工厂模式类似；再看右半部，像合成模式，合成模式用在此处就是为了将具体享元角色和复合享元角色同等对待和处理，通过将享元模式与合成模式组合在一起，可以确保复合享元中所包含的每个单纯享元都具有相同的外蕴状态，而这些单纯享元的内蕴状态往往是不同的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 复合的享元模式:\n * 复合享元是不能共享的。\n * 但是复合享元是可以分解为可共享的单纯享元。\n *&#x2F;\npublic class FlyweightTest &#123;\n    public static void main(String[] args)&#123;\n        FlyweightFactory f &#x3D; new FlyweightFactory();\n\n        Flyweight fly &#x3D; f.factory(&quot;aba&quot;);\n        fly.operation(&quot;charles&quot;);\n\n        f.checkFlyweight();\n    &#125;\n&#125;\n\n&#x2F;**\n * 抽象享元\n *&#x2F;\nabstract class Flyweight&#123;\n    public abstract void operation(String extrinsicState);\n&#125;\n\n&#x2F;**\n * 具体享元\n *&#x2F;\nclass ConcreteFlyweight extends Flyweight&#123;\n\n    private Character inState;\n\n    public ConcreteFlyweight(Character inState)&#123;\n        this.inState &#x3D; inState;\n    &#125;\n\n    &#x2F;**\n     * 外蕴状态改变方法行为，但不会改变内蕴状态\n     *&#x2F;\n    @Override\n    public void operation(String extState)&#123;\n        String str &#x3D; &quot;inState:&quot; + inState + &quot;;extState:&quot; + extState;\n        System.out.println(str);\n    &#125;\n\n&#125;\n\n&#x2F;**\n * 复合享元\n *&#x2F;\nclass CompositeFlyweight extends Flyweight&#123;\n    private Map&lt;Character , Flyweight&gt; map;\n\n    public CompositeFlyweight()&#123;\n        map &#x3D; new HashMap&lt;Character, Flyweight&gt;();\n    &#125;\n\n    public void add(Character c, Flyweight fly)&#123;\n        map.put(c , fly);\n    &#125;\n\n    @Override\n    public void operation(String extState)&#123;\n        Iterator&lt;Map.Entry&lt;Character , Flyweight&gt;&gt; it &#x3D; map.entrySet().iterator();\n        while(it.hasNext()) &#123;\n            Map.Entry&lt;Character , Flyweight&gt; entry &#x3D; it.next();\n            Flyweight fly &#x3D; entry.getValue();\n            fly.operation(extState);\n        &#125;\n    &#125;\n&#125;\n\n&#x2F;**\n * 享元工厂\n *&#x2F;\nclass FlyweightFactory&#123;\n    private Map&lt;Character , Flyweight&gt; map;\n\n    public FlyweightFactory()&#123;\n        map &#x3D; new HashMap&lt;Character , Flyweight&gt;();\n    &#125;\n\n    &#x2F;**\n     * 单纯享元工厂\n     *&#x2F;\n    public Flyweight factory(Character state) &#123;\n\n        Flyweight flyweight;\n\n        if(map.containsKey(state)) &#123;\n            flyweight &#x3D; map.get(state);\n        &#125; else&#123;\n            flyweight &#x3D; new ConcreteFlyweight(state);\n            map.put(state , flyweight);\n        &#125;\n\n        return flyweight;\n    &#125;\n\n    &#x2F;**\n     * 复合享元工厂\n     * 此处Character的复合类型恰好是String，\n     * 当无此巧合时，可使用List等聚集类型传入.\n     *&#x2F;\n    public Flyweight factory(String compositeState)&#123;\n        CompositeFlyweight composite &#x3D; new CompositeFlyweight();\n\n        for(int i &#x3D; 0 ; i &lt;compositeState.length(); i++)&#123;\n            Character c &#x3D; new Character(compositeState.charAt(i));\n            composite.add(c , this.factory(c));\n        &#125;\n\n        return composite;\n    &#125;\n\n    &#x2F;**\n     * 辅助方法\n     *&#x2F;\n    public void checkFlyweight() &#123;\n        Iterator&lt;Map.Entry&lt;Character, Flyweight&gt;&gt; it &#x3D; map.entrySet().iterator();\n        System.out.println(&quot;checkFlyweight:&quot;);\n        while(it.hasNext()) &#123;\n            Map.Entry&lt;Character , Flyweight&gt; entry &#x3D; it.next();\n            Character key &#x3D; entry.getKey();\n            System.out.println(&quot;key:&quot; + key);\n        &#125;\n    &#125;\n\n&#125;</code></pre>\n\n<p>从复杂度上来讲，复合享元模式显而易见是比单纯享元模式复杂的。再从享元模式的关键——共享，来分析：复合享元模式在共享上面是没有达到预期的效果，可以说是没有起到共享的目的。虽然对于它内部包含的单纯享元角色来说还是能够起到共享的作用，但是复合享元角色中一个内蕴状态和对象使用了空间来保存，肯定不会节省空间和对象个数的。所以复合享元模式是违背享元模式初衷的，因此我们应该尽量使用单纯享元模式。</p>\n<h2 id=\"5、JDK-涉及到的设计模式\"><a href=\"#5、JDK-涉及到的设计模式\" class=\"headerlink\" title=\"5、JDK 涉及到的设计模式\"></a>5、JDK 涉及到的设计模式</h2><p>JDK 中体现有 Integer.valueOf(int i)，Character.valueOf(char c)以及 String 常量池。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static Integer valueOf(String s) throws NumberFormatException &#123;\n    return Integer.valueOf(parseInt(s, 10));\n&#125;\n\n&#x2F;* i 在IntegerCache中，返回共享对象，不在其中创建新的Integer对象 *&#x2F;\npublic static Integer valueOf(int i) &#123;\n    if (i &gt;&#x3D; IntegerCache.low &amp;&amp; i &lt;&#x3D; IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n&#125;\n\n&#x2F;* IntegerCache，一个内部类，注意它的属性都是定义为static final *&#x2F;\nprivate static class IntegerCache &#123;\n    static final int low &#x3D; -128;\n    static final int high;\n    static final Integer cache[];\n\n    static &#123;\n        &#x2F;**\n         * h值，可以通过设置jdk的AutoBoxCacheMax参数调整，\n         * 自动缓存区间设置为[-128,N],注意区间的下界是固定\n         *&#x2F;\n        int h &#x3D; 127;\n        String integerCacheHighPropValue &#x3D;\n            sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);\n        if (integerCacheHighPropValue !&#x3D; null) &#123;\n            try &#123;\n                int i &#x3D; parseInt(integerCacheHighPropValue);\n                i &#x3D; Math.max(i, 127);\n                &#x2F;&#x2F; 数组大小最大为Integer.MAX_VALUE\n                h &#x3D; Math.min(i, Integer.MAX_VALUE - (-low) -1);\n            &#125; catch( NumberFormatException nfe) &#123;\n                &#x2F;&#x2F; 不能解析为int，忽略\n            &#125;\n        &#125;\n        high &#x3D; h;\n\n        cache &#x3D; new Integer[(high - low) + 1];\n        int j &#x3D; low;\n        for(int k &#x3D; 0; k &lt;cache.length; k++)\n            cache[k] &#x3D; new Integer(j++); &#x2F;&#x2F;-128到high值逐一分配到缓存数组\n\n        &#x2F;&#x2F; range [-128, 127] must be interned (JLS7 5.1.7)\n        assert IntegerCache.high &gt;&#x3D; 127;\n    &#125;\n\n    private IntegerCache() &#123;&#125;\n&#125;</code></pre>\n\n<h2 id=\"6、模式总结\"><a href=\"#6、模式总结\" class=\"headerlink\" title=\"6、模式总结\"></a>6、模式总结</h2><h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><p>享元模式优点就在于它能够大幅度的降低内存中对象的数量；而为了做到这一步也带来了它的缺点：它使得系统逻辑复杂化，而且在一定程度上外蕴状态影响了系统的速度。**</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>1、当我们发现某个类型的对象有大量的实例时，我们是否可以对这些实例进行分类，经过分类后，我们发现只有很少的类别的情况下。<br>2、我们发现通过使用享元模式后能够提高系统的性能和不会带来更多的复杂度时。<br>3、享元模式一般是给出本地内存资源节省的一个方案，并不适合互联网上的分布式应用的情况，不过享元模式对于排他性的要求资源的控制，是个不错的选择的。</p>\n","categories":[{"name":"design-pattern","path":"api/categories/design-pattern.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"设计模式","path":"api/tags/设计模式.json"}]}