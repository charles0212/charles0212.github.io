{"title":"JDK设计模式（十七）命令模式","slug":"yuque/JDK设计模式（十七）命令模式","date":"2015-11-15T16:00:00.000Z","updated":"2022-05-15T04:19:28.491Z","comments":true,"path":"api/articles/design-pattern/jdk-command-pattern.json","excerpt":"1、概述命令模式将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。2、解决的问题用于“行为请求者”与“行为实现者”解耦，可实现二者之间的松耦合，以便适应变化。3、模式中的角色1、命令（Command）角色：定义命令的接口，声明执行的方法。2、具体命令（ConcreteCommand）角色：命令接口实现对象，通常它会持有命令的接收者，通过调用接收者相应的功能方法来执行当前命令所要完成的操作。3、接收者（Receiver）角色：真正执行命令的对象。任何类都可以成为一个接收者，只要它能够实现命令要求实现的相应功能即可。4","covers":["https://cdn.nlark.com/yuque/0/2022/png/104130/1648396034660-328dcd5e-5a49-4619-b853-ee2882d6296c.png#clientId=u0bb84733-8015-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u47e249f1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=563&originWidth=1068&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=122093&status=done&style=none&taskId=ue978323e-759e-48f3-8272-5d60f63a606&title=","https://cdn.nlark.com/yuque/0/2022/png/104130/1648396034516-72ed3d0b-3eb6-45c8-8d4d-f738a39fdec2.png#clientId=u0bb84733-8015-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u28145138&margin=%5Bobject%20Object%5D&name=image.png&originHeight=524&originWidth=918&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=46479&status=done&style=none&taskId=uc7c576df-0f02-4d2e-a8d4-386c66fdb83&title="],"content":"<h2 id=\"1、概述\"><a href=\"#1、概述\" class=\"headerlink\" title=\"1、概述\"></a>1、概述</h2><p>命令模式将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。</p>\n<h2 id=\"2、解决的问题\"><a href=\"#2、解决的问题\" class=\"headerlink\" title=\"2、解决的问题\"></a>2、解决的问题</h2><p>用于“行为请求者”与“行为实现者”解耦，可实现二者之间的松耦合，以便适应变化。</p>\n<h2 id=\"3、模式中的角色\"><a href=\"#3、模式中的角色\" class=\"headerlink\" title=\"3、模式中的角色\"></a>3、模式中的角色</h2><p>1、命令（Command）角色：定义命令的接口，声明执行的方法。<br>2、具体命令（ConcreteCommand）角色：命令接口实现对象，通常它会持有命令的接收者，通过调用接收者相应的功能方法来执行当前命令所要完成的操作。<br>3、接收者（Receiver）角色：真正执行命令的对象。任何类都可以成为一个接收者，只要它能够实现命令要求实现的相应功能即可。<br>4、请求者（Invoker）角色：要求命令对象执行相关请求的对象，通常会持有命令对象，可以是多个命令对象。这是客户端真正触发命令并要求命令执行相应操作的入口点。<br>5、客户端（Client）角色：创建具体的命令对象，并设置命令对象的接收者。注意，这里的客户端并不是我们通常所指的客户端，而是指组装命令和接收者的地方，把这个 Client 称为装配者或者意义会更明了，真正使用命令的客户端是从 Invoker 来触发执行的，而不是从这个 Client 端命令的调用。</p>\n<h2 id=\"4、模式解读\"><a href=\"#4、模式解读\" class=\"headerlink\" title=\"4、模式解读\"></a>4、模式解读</h2><p>命令模式的类图如下所示<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648396034660-328dcd5e-5a49-4619-b853-ee2882d6296c.png#clientId=u0bb84733-8015-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u47e249f1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=563&originWidth=1068&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=122093&status=done&style=none&taskId=ue978323e-759e-48f3-8272-5d60f63a606&title=\" alt=\"image.png\"></p>\n<h2 id=\"5、JDK-涉及到的设计模式\"><a href=\"#5、JDK-涉及到的设计模式\" class=\"headerlink\" title=\"5、JDK 涉及到的设计模式\"></a>5、JDK 涉及到的设计模式</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648396034516-72ed3d0b-3eb6-45c8-8d4d-f738a39fdec2.png#clientId=u0bb84733-8015-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u28145138&margin=%5Bobject%20Object%5D&name=image.png&originHeight=524&originWidth=918&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=46479&status=done&style=none&taskId=uc7c576df-0f02-4d2e-a8d4-386c66fdb83&title=\" alt=\"image.png\"></p>\n<h2 id=\"6、模式总结\"><a href=\"#6、模式总结\" class=\"headerlink\" title=\"6、模式总结\"></a>6、模式总结</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>1、封装性很好<br>2、扩展性很好</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>1、可能会导致系统具有过多的具体命令类</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>1、对于大多数请求-响应模式的功能，比较适合使用命令模式，正如命令模式定义说的那样，命令模式对实现记录日志、撤销操作等功能比较方便。</p>\n","more":"<h2 id=\"1、概述\"><a href=\"#1、概述\" class=\"headerlink\" title=\"1、概述\"></a>1、概述</h2><p>命令模式将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。</p>\n<h2 id=\"2、解决的问题\"><a href=\"#2、解决的问题\" class=\"headerlink\" title=\"2、解决的问题\"></a>2、解决的问题</h2><p>用于“行为请求者”与“行为实现者”解耦，可实现二者之间的松耦合，以便适应变化。</p>\n<h2 id=\"3、模式中的角色\"><a href=\"#3、模式中的角色\" class=\"headerlink\" title=\"3、模式中的角色\"></a>3、模式中的角色</h2><p>1、命令（Command）角色：定义命令的接口，声明执行的方法。<br>2、具体命令（ConcreteCommand）角色：命令接口实现对象，通常它会持有命令的接收者，通过调用接收者相应的功能方法来执行当前命令所要完成的操作。<br>3、接收者（Receiver）角色：真正执行命令的对象。任何类都可以成为一个接收者，只要它能够实现命令要求实现的相应功能即可。<br>4、请求者（Invoker）角色：要求命令对象执行相关请求的对象，通常会持有命令对象，可以是多个命令对象。这是客户端真正触发命令并要求命令执行相应操作的入口点。<br>5、客户端（Client）角色：创建具体的命令对象，并设置命令对象的接收者。注意，这里的客户端并不是我们通常所指的客户端，而是指组装命令和接收者的地方，把这个 Client 称为装配者或者意义会更明了，真正使用命令的客户端是从 Invoker 来触发执行的，而不是从这个 Client 端命令的调用。</p>\n<h2 id=\"4、模式解读\"><a href=\"#4、模式解读\" class=\"headerlink\" title=\"4、模式解读\"></a>4、模式解读</h2><p>命令模式的类图如下所示<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648396034660-328dcd5e-5a49-4619-b853-ee2882d6296c.png#clientId=u0bb84733-8015-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u47e249f1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=563&originWidth=1068&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=122093&status=done&style=none&taskId=ue978323e-759e-48f3-8272-5d60f63a606&title=\" alt=\"image.png\"></p>\n<h2 id=\"5、JDK-涉及到的设计模式\"><a href=\"#5、JDK-涉及到的设计模式\" class=\"headerlink\" title=\"5、JDK 涉及到的设计模式\"></a>5、JDK 涉及到的设计模式</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1648396034516-72ed3d0b-3eb6-45c8-8d4d-f738a39fdec2.png#clientId=u0bb84733-8015-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u28145138&margin=%5Bobject%20Object%5D&name=image.png&originHeight=524&originWidth=918&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&size=46479&status=done&style=none&taskId=uc7c576df-0f02-4d2e-a8d4-386c66fdb83&title=\" alt=\"image.png\"></p>\n<h2 id=\"6、模式总结\"><a href=\"#6、模式总结\" class=\"headerlink\" title=\"6、模式总结\"></a>6、模式总结</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>1、封装性很好<br>2、扩展性很好</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>1、可能会导致系统具有过多的具体命令类</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>1、对于大多数请求-响应模式的功能，比较适合使用命令模式，正如命令模式定义说的那样，命令模式对实现记录日志、撤销操作等功能比较方便。</p>\n","categories":[{"name":"design-pattern","path":"api/categories/design-pattern.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"设计模式","path":"api/tags/设计模式.json"}]}