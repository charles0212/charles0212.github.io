{"title":"限流熔断降级区别","slug":"yuque/限流熔断降级区别","date":"2021-08-20T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/stability/stability-diff.json","excerpt":"熔断、限流、降级都是保持系统稳定运行的策略，但针对的场景有所不同，常用框架有hystrix 和 sentinel限流限流是指上游服务对本服务请求 QPS超过阙值时，通过一定的策略(如延迟处理、拒绝处理)对上游服务的请求量进行限制，以保证本服务不被压垮，从而持续提供稳定服务。常见的限流算法有滑动窗口、令牌桶、漏桶等如上图，当 服务 B 对 服务 D请求过多时，服务 D可以放弃一部分请求，保证自身服务的稳定常见限流算法https://www.cnblogs.com/taromilk/p/11751211.html限流规则参数说明：限流类型：分为 HSF 限流和 H","covers":["https://cdn.nlark.com/yuque/0/2022/png/104130/1641271491145-c50a4550-6ace-4652-bd90-1a7b7304c3c6.png#clientId=u78b04063-6e1d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=232&id=u9bed191c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=232&originWidth=252&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=12424&status=done&style=none&taskId=uf6e0b014-01bf-479c-8ff3-996b9f01526&title=&width=252","https://cdn.nlark.com/yuque/0/2022/png/104130/1641271468202-f451e8ba-cef9-46e5-b7e5-06d4be4c112b.png#clientId=u78b04063-6e1d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=232&id=u0ee24bd0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=232&originWidth=252&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=11093&status=done&style=none&taskId=u9c8a0d0c-51cc-4480-888b-e79283f9fbd&title=&width=252"],"content":"<p>熔断、限流、降级都是保持系统稳定运行的策略，但针对的场景有所不同，常用框架有 hystrix 和 sentinel</p>\n<h2 id=\"限流\"><a href=\"#限流\" class=\"headerlink\" title=\"限流\"></a>限流</h2><p>限流是指<strong>上游服务</strong>对本服务请求 QPS 超过阙值时，通过一定的策略(如延迟处理、拒绝处理)对上游服务的请求量进行限制，以保证本服务不被压垮，从而持续提供稳定服务。常见的限流算法有滑动窗口、令牌桶、漏桶等<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1641271491145-c50a4550-6ace-4652-bd90-1a7b7304c3c6.png#clientId=u78b04063-6e1d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=232&id=u9bed191c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=232&originWidth=252&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=12424&status=done&style=none&taskId=uf6e0b014-01bf-479c-8ff3-996b9f01526&title=&width=252\" alt=\"image.png\" width=\"252\"><br>如上图，当 服务 B 对 服务 D 请求过多时，<strong>服务 D 可以放弃一部分请求</strong>，保证自身服务的稳定</p>\n<p>常见限流算法<br><a href=\"https://www.cnblogs.com/taromilk/p/11751211.html\">https://www.cnblogs.com/taromilk/p/11751211.html</a></p>\n<p>限流规则参数说明：<br>限流类型：分为 HSF 限流和 HTTP 限流。请根据应用的访问类型，选择具体的限流类型。<br>需要限流的接口：列出了应用中所有的接口。请根据实际情况选择需要限流的接口。<br>需要限流的方法：针对选择的接口，自动加载接口内所有的方法。可以根据实际情况选择某个方法进行限流，也可以选择对全部方法都进行限流。<br>被限流的应用：此时列表中将加载除当前应用以外的所有应用，因为每一个应用都可能会访问当前应用。请根据实际情况，选择被限流的应用。<br>限流粒度：主要分为 QPS 限流和 Thread 限流。<br>QPS 限流表示对请求中每秒请求次数的限制；<br>Thread 限流是对线程数的限制。<br>一般来讲线程越大则 QPS 越大，但是一个线程的 QPS 一般都会 &gt;1，因为一个线程会持续发请求，请求的响应时间一般就几十毫秒。<br>限流阈值：高于阈值时将触发限流动作。</p>\n<h2 id=\"熔断\"><a href=\"#熔断\" class=\"headerlink\" title=\"熔断\"></a>熔断</h2><p>服务熔断的作用类似于我们家用的保险丝，当<strong>下游某服务出现不可用或响应超时</strong>的情况时，为了防止整个系统出现雪崩，<strong>暂时停止</strong>对该服务的调用<br>上面的解释中有两个很关键的词，一个是暂时，一个是停止。<br>停止是说，当前服务一旦对下游服务进行熔断，当请求到达时，当前服务不再对下游服务进行调用，而是<strong>使用设定好的策略(如构建默认值)直接返回</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1641271468202-f451e8ba-cef9-46e5-b7e5-06d4be4c112b.png#clientId=u78b04063-6e1d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=232&id=u0ee24bd0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=232&originWidth=252&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=11093&status=done&style=none&taskId=u9c8a0d0c-51cc-4480-888b-e79283f9fbd&title=&width=252\" alt=\"image.png\" width=\"252\"></p>\n<p>暂时是说，<strong>熔断后，并不会一直不再调用下游服务，而是以一定的策略(如每分钟调用 10 次，若均返回成功，则增大调用量)试探调用下游服务，当下游服务恢复可用时，自动停止熔断</strong>。<br>如上图，当 服务 D 不可用时，服务 B 应对 服务 D 进行熔断。</p>\n<p>熔断器的设计思路<br>Closed：初始状态，熔断器关闭，正常提供服务<br>Open: 失败次数，失败百分比达到一定的阈值之后，熔断器打开，停止访问服务<br>Half-Open：熔断一定时间之后，小流量尝试调用服务，如果成功则恢复，熔断器变为 Closed 状态</p>\n<p>熔断机制<br><a href=\"https://www.cnblogs.com/yawen/p/6655352.html\">https://www.cnblogs.com/yawen/p/6655352.html</a></p>\n<h2 id=\"降级\"><a href=\"#降级\" class=\"headerlink\" title=\"降级\"></a>降级</h2><p>降级是指当自身服务压力增大时，采取一些手段，增强自身服务的处理能力，以保障服务的持续可用。比如，<strong>下线非核心服务以保证核心服务的稳定、降低实时性、降低数据一致性</strong></p>\n<p>常见降级策略<br><strong>业务降级，是指牺牲非核心的业务功能，保证核心功能的稳定运行</strong>。<br>简单来说，要实现优雅的业务降级，需要将功能实现拆分到相对独立的不同代码单元，分优先级进行隔离。在后台通过开关控制，降级部分非主流程的业务功能，减轻系统依赖和性能损耗，从而提升集群的整体吞吐率。<br><strong>降级的重点是：业务之间有优先级之分</strong>。降级的典型应用是：电商活动期间。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table><thead><tr>\n<th><strong>措施</strong></th>\n<th><strong>产生原因</strong></th>\n<th>** 针对服务**</th>\n</tr>\n</thead><tbody><tr>\n<td>限流</td>\n<td>上游服务请求增多</td>\n<td>上游服务</td>\n</tr>\n<tr>\n<td>熔断</td>\n<td>下游服务不可用</td>\n<td>下游服务</td>\n</tr>\n<tr>\n<td>降级</td>\n<td>自身服务的处理能力不够</td>\n<td>自身服务</td>\n</tr>\n</tbody></table><p>降级熔断相似点</p>\n<ul>\n<li>目的一致，都是从可用性可靠性着想，为防止系统的整体缓慢甚至崩溃，采用的技术手段</li>\n<li>最终表现类似，对于两者来说，最终让用户体验到的是某些功能暂时不可达或不可用</li>\n<li>粒度一般都是服务级别</li>\n<li>自治性要求很高，熔断模式一般都是服务基于策略的自动触发，降级虽说可人工干预，但在微服务架构下，完全靠人显然不可能，开关预置、配置中心都是必要手段</li>\n</ul>\n<p>降级熔断区别</p>\n<ul>\n<li>触发原因不一样，服务熔断一般是某个服务（下游服务）故障引起，</li>\n<li>服务降级一般是从整体负荷考虑</li>\n<li>自愈能力要求不一样，服务熔断在发生后有自愈能力，而服务降级没有该职责</li>\n</ul>\n<p>其他内容可参考 <a href=\"https://www.cnblogs.com/DengGao/p/rateLimit.html\">https://www.cnblogs.com/DengGao/p/rateLimit.html</a></p>\n","more":"<p>熔断、限流、降级都是保持系统稳定运行的策略，但针对的场景有所不同，常用框架有 hystrix 和 sentinel</p>\n<h2 id=\"限流\"><a href=\"#限流\" class=\"headerlink\" title=\"限流\"></a>限流</h2><p>限流是指<strong>上游服务</strong>对本服务请求 QPS 超过阙值时，通过一定的策略(如延迟处理、拒绝处理)对上游服务的请求量进行限制，以保证本服务不被压垮，从而持续提供稳定服务。常见的限流算法有滑动窗口、令牌桶、漏桶等<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1641271491145-c50a4550-6ace-4652-bd90-1a7b7304c3c6.png#clientId=u78b04063-6e1d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=232&id=u9bed191c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=232&originWidth=252&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=12424&status=done&style=none&taskId=uf6e0b014-01bf-479c-8ff3-996b9f01526&title=&width=252\" alt=\"image.png\" width=\"252\"><br>如上图，当 服务 B 对 服务 D 请求过多时，<strong>服务 D 可以放弃一部分请求</strong>，保证自身服务的稳定</p>\n<p>常见限流算法<br><a href=\"https://www.cnblogs.com/taromilk/p/11751211.html\">https://www.cnblogs.com/taromilk/p/11751211.html</a></p>\n<p>限流规则参数说明：<br>限流类型：分为 HSF 限流和 HTTP 限流。请根据应用的访问类型，选择具体的限流类型。<br>需要限流的接口：列出了应用中所有的接口。请根据实际情况选择需要限流的接口。<br>需要限流的方法：针对选择的接口，自动加载接口内所有的方法。可以根据实际情况选择某个方法进行限流，也可以选择对全部方法都进行限流。<br>被限流的应用：此时列表中将加载除当前应用以外的所有应用，因为每一个应用都可能会访问当前应用。请根据实际情况，选择被限流的应用。<br>限流粒度：主要分为 QPS 限流和 Thread 限流。<br>QPS 限流表示对请求中每秒请求次数的限制；<br>Thread 限流是对线程数的限制。<br>一般来讲线程越大则 QPS 越大，但是一个线程的 QPS 一般都会 &gt;1，因为一个线程会持续发请求，请求的响应时间一般就几十毫秒。<br>限流阈值：高于阈值时将触发限流动作。</p>\n<h2 id=\"熔断\"><a href=\"#熔断\" class=\"headerlink\" title=\"熔断\"></a>熔断</h2><p>服务熔断的作用类似于我们家用的保险丝，当<strong>下游某服务出现不可用或响应超时</strong>的情况时，为了防止整个系统出现雪崩，<strong>暂时停止</strong>对该服务的调用<br>上面的解释中有两个很关键的词，一个是暂时，一个是停止。<br>停止是说，当前服务一旦对下游服务进行熔断，当请求到达时，当前服务不再对下游服务进行调用，而是<strong>使用设定好的策略(如构建默认值)直接返回</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/104130/1641271468202-f451e8ba-cef9-46e5-b7e5-06d4be4c112b.png#clientId=u78b04063-6e1d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=232&id=u0ee24bd0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=232&originWidth=252&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=11093&status=done&style=none&taskId=u9c8a0d0c-51cc-4480-888b-e79283f9fbd&title=&width=252\" alt=\"image.png\" width=\"252\"></p>\n<p>暂时是说，<strong>熔断后，并不会一直不再调用下游服务，而是以一定的策略(如每分钟调用 10 次，若均返回成功，则增大调用量)试探调用下游服务，当下游服务恢复可用时，自动停止熔断</strong>。<br>如上图，当 服务 D 不可用时，服务 B 应对 服务 D 进行熔断。</p>\n<p>熔断器的设计思路<br>Closed：初始状态，熔断器关闭，正常提供服务<br>Open: 失败次数，失败百分比达到一定的阈值之后，熔断器打开，停止访问服务<br>Half-Open：熔断一定时间之后，小流量尝试调用服务，如果成功则恢复，熔断器变为 Closed 状态</p>\n<p>熔断机制<br><a href=\"https://www.cnblogs.com/yawen/p/6655352.html\">https://www.cnblogs.com/yawen/p/6655352.html</a></p>\n<h2 id=\"降级\"><a href=\"#降级\" class=\"headerlink\" title=\"降级\"></a>降级</h2><p>降级是指当自身服务压力增大时，采取一些手段，增强自身服务的处理能力，以保障服务的持续可用。比如，<strong>下线非核心服务以保证核心服务的稳定、降低实时性、降低数据一致性</strong></p>\n<p>常见降级策略<br><strong>业务降级，是指牺牲非核心的业务功能，保证核心功能的稳定运行</strong>。<br>简单来说，要实现优雅的业务降级，需要将功能实现拆分到相对独立的不同代码单元，分优先级进行隔离。在后台通过开关控制，降级部分非主流程的业务功能，减轻系统依赖和性能损耗，从而提升集群的整体吞吐率。<br><strong>降级的重点是：业务之间有优先级之分</strong>。降级的典型应用是：电商活动期间。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table><thead><tr>\n<th><strong>措施</strong></th>\n<th><strong>产生原因</strong></th>\n<th>** 针对服务**</th>\n</tr>\n</thead><tbody><tr>\n<td>限流</td>\n<td>上游服务请求增多</td>\n<td>上游服务</td>\n</tr>\n<tr>\n<td>熔断</td>\n<td>下游服务不可用</td>\n<td>下游服务</td>\n</tr>\n<tr>\n<td>降级</td>\n<td>自身服务的处理能力不够</td>\n<td>自身服务</td>\n</tr>\n</tbody></table><p>降级熔断相似点</p>\n<ul>\n<li>目的一致，都是从可用性可靠性着想，为防止系统的整体缓慢甚至崩溃，采用的技术手段</li>\n<li>最终表现类似，对于两者来说，最终让用户体验到的是某些功能暂时不可达或不可用</li>\n<li>粒度一般都是服务级别</li>\n<li>自治性要求很高，熔断模式一般都是服务基于策略的自动触发，降级虽说可人工干预，但在微服务架构下，完全靠人显然不可能，开关预置、配置中心都是必要手段</li>\n</ul>\n<p>降级熔断区别</p>\n<ul>\n<li>触发原因不一样，服务熔断一般是某个服务（下游服务）故障引起，</li>\n<li>服务降级一般是从整体负荷考虑</li>\n<li>自愈能力要求不一样，服务熔断在发生后有自愈能力，而服务降级没有该职责</li>\n</ul>\n<p>其他内容可参考 <a href=\"https://www.cnblogs.com/DengGao/p/rateLimit.html\">https://www.cnblogs.com/DengGao/p/rateLimit.html</a></p>\n","categories":[{"name":"stability","path":"api/categories/stability.json"}],"tags":[{"name":"Stability","path":"api/tags/Stability.json"},{"name":"Limit","path":"api/tags/Limit.json"},{"name":"Fuse","path":"api/tags/Fuse.json"},{"name":"Degradation","path":"api/tags/Degradation.json"}]}