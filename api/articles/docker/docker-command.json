{"title":"Docker（一）基本命令","slug":"yuque/Docker（一）基本命令","date":"2018-01-29T16:00:00.000Z","updated":"2022-05-15T04:19:28.000Z","comments":true,"path":"api/articles/docker/docker-command.json","excerpt":"Docker 基本服务命令启动 docker$ service docker start重启 docker$ service docker restart停止 docker$ service docker stopdocker 自启动让它随服务器的启动而自动运行$ update-rc.d docker defaults$ systemctl enable dockerDocker 基础命令启动/停止/重启/杀掉容器docker start/stop/restart/kill实例操作如下：$ docker start myweb","covers":["/images/c3.jpg"],"content":"<h2 id=\"Docker-基本服务命令\"><a href=\"#Docker-基本服务命令\" class=\"headerlink\" title=\"Docker 基本服务命令\"></a>Docker 基本服务命令</h2><h3 id=\"启动-docker\"><a href=\"#启动-docker\" class=\"headerlink\" title=\"启动 docker\"></a>启动 docker</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ service docker start</code></pre>\n\n<h3 id=\"重启-docker\"><a href=\"#重启-docker\" class=\"headerlink\" title=\"重启 docker\"></a>重启 docker</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ service docker restart</code></pre>\n\n<h3 id=\"停止-docker\"><a href=\"#停止-docker\" class=\"headerlink\" title=\"停止 docker\"></a>停止 docker</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ service docker stop</code></pre>\n\n<h3 id=\"docker-自启动\"><a href=\"#docker-自启动\" class=\"headerlink\" title=\"docker 自启动\"></a>docker 自启动</h3><p>让它随服务器的启动而自动运行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ update-rc.d docker defaults\n$ systemctl enable docker</code></pre>\n\n<h2 id=\"Docker-基础命令\"><a href=\"#Docker-基础命令\" class=\"headerlink\" title=\"Docker 基础命令\"></a>Docker 基础命令</h2><h3 id=\"启动-x2F-停止-x2F-重启-x2F-杀掉容器\"><a href=\"#启动-x2F-停止-x2F-重启-x2F-杀掉容器\" class=\"headerlink\" title=\"启动&#x2F;停止&#x2F;重启&#x2F;杀掉容器\"></a>启动&#x2F;停止&#x2F;重启&#x2F;杀掉容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker start&#x2F;stop&#x2F;restart&#x2F;kill\n\n实例操作如下：\n$ docker start myweb\n$ docker stop myweb\n$ docker restart myweb\n$ docker kill -s kill myweb\n参数 -s  #向容器发送信号</code></pre>\n\n<h3 id=\"创建并启动一个新的容器\"><a href=\"#创建并启动一个新的容器\" class=\"headerlink\" title=\"创建并启动一个新的容器\"></a>创建并启动一个新的容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run\n常用参数如下：\n-d #后台运行容器，并返回容器ID\n-i #以交互式模式运行容器，常与-t参数同时使用\n-t #给容器重新分配一个伪终端，常与-i参数同时使用\n–name #给容器指定一个名称\n-m #指定容器使用内存的最大值\n–net #指定容器使用的网络类型\n–link #链接到另一个容器\n\n实例操作如下：\n$ docker run -d --name nginx nginx:latest\n#后台启动并运行一个名为nginx的容器，运行前它会自动去docker镜像站点下载最新的镜像文件\n$ docker run -d -P 80:80 nginx:latest\n#后台启动并运名为nginx的容器，然后将容器的80端口映射到物理机的80端口\n$ docker run -d -v &#x2F;docker&#x2F;data:&#x2F;docker&#x2F;data -P 80:80 nginx:latest\n#后台启动并运名为nginx的容器，然后将容器的80端口映射到物理机的80端口,并且将物理机的&#x2F;docker&#x2F;data目录映射到容器的&#x2F;docker&#x2F;data\n$ docker run -it  nginx:latest &#x2F;bin&#x2F;bash\n#以交互式模式运行容器，然后在容器内执行&#x2F;bin&#x2F;bash命令</code></pre>\n\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rm\n常用参数如下：\n-f #强制删除一个运行中的容器\n-l #删除指定的链接\n-v #删除与容器关联和卷\n\n实例操作如下：\n$ docker rm -f mydocker\n强制删除容器mydocker\n$ docker rm -f dockerA dockerB\n强制删除容器dockerA，dockerB\n$ docker rm -v mydocker****\n删除容器，并删除容器挂载的数据卷</code></pre>\n\n<h3 id=\"创建一个新的容器但不启动它\"><a href=\"#创建一个新的容器但不启动它\" class=\"headerlink\" title=\"创建一个新的容器但不启动它\"></a>创建一个新的容器但不启动它</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker create\n$ docker create --name myserver nginx:latest\n09b93464c2f75b7b69f83d56a9cfc23ceb50a48a9db7652ee4c27e3e2cb1961f\n#创建一个名为myserver的容器</code></pre>\n\n<h3 id=\"在运行的容器中执行命令\"><a href=\"#在运行的容器中执行命令\" class=\"headerlink\" title=\"在运行的容器中执行命令\"></a>在运行的容器中执行命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker exec\n常用参数如下：\n-d #在后台运行\n-i #保持STDIN打开\n-t #分配一个伪终端\n\n实例操作如下：\n$ docker exec -it mydocker &#x2F;bin&#x2F;sh &#x2F;server&#x2F;scripts&#x2F;docker.sh\nhello world\n以交互模式执行容器中的&#x2F;server&#x2F;scripts&#x2F;docker.sh脚本\n$ docker exec -it mydocker &#x2F;bin&#x2F;sh\n以交互模式给容器分配一个伪终端连接</code></pre>\n\n<h3 id=\"列出容器（正在运行）\"><a href=\"#列出容器（正在运行）\" class=\"headerlink\" title=\"列出容器（正在运行）\"></a>列出容器（正在运行）</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker ps\n常用参数如下：\n-a #列出所有容器包括停止的\n-f #根据条件过滤显示内容\n-l #列出最近创建的容器\n-n #列出最近创建的N个容器，N为数字\n-q #只显示容器ID\n-s #显示总文件大小\n\n#列出最近创建的2个容器\n$ docker ps -a -q\nbd96d72ed9c7\n665563143eb7\nf2304dad5855\n9921d2660307\n显示所有容器的ID</code></pre>\n\n<h3 id=\"获取容器的元数据\"><a href=\"#获取容器的元数据\" class=\"headerlink\" title=\"获取容器的元数据\"></a>获取容器的元数据</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker inspect\n常用参数如下：\n-f #指定返回值格式或模板文件\n-s #显示总文件大小\n–type #为指定类型返回JSON\n\n$ docker inspect &lt;container id or name&gt;</code></pre>\n\n<h3 id=\"获取-docker-容器-container-的-ip-地址\"><a href=\"#获取-docker-容器-container-的-ip-地址\" class=\"headerlink\" title=\"获取 docker 容器(container)的 ip 地址\"></a>获取 docker 容器(container)的 ip 地址</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker inspect -f &#39;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#39; $(docker ps -aq)</code></pre>\n\n<h3 id=\"删除的镜像\"><a href=\"#删除的镜像\" class=\"headerlink\" title=\"删除的镜像\"></a>删除<none>的镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rmi $(docker images -f &quot;dangling&#x3D;true&quot; -q)</code></pre>\n","more":"<h2 id=\"Docker-基本服务命令\"><a href=\"#Docker-基本服务命令\" class=\"headerlink\" title=\"Docker 基本服务命令\"></a>Docker 基本服务命令</h2><h3 id=\"启动-docker\"><a href=\"#启动-docker\" class=\"headerlink\" title=\"启动 docker\"></a>启动 docker</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ service docker start</code></pre>\n\n<h3 id=\"重启-docker\"><a href=\"#重启-docker\" class=\"headerlink\" title=\"重启 docker\"></a>重启 docker</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ service docker restart</code></pre>\n\n<h3 id=\"停止-docker\"><a href=\"#停止-docker\" class=\"headerlink\" title=\"停止 docker\"></a>停止 docker</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ service docker stop</code></pre>\n\n<h3 id=\"docker-自启动\"><a href=\"#docker-自启动\" class=\"headerlink\" title=\"docker 自启动\"></a>docker 自启动</h3><p>让它随服务器的启动而自动运行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ update-rc.d docker defaults\n$ systemctl enable docker</code></pre>\n\n<h2 id=\"Docker-基础命令\"><a href=\"#Docker-基础命令\" class=\"headerlink\" title=\"Docker 基础命令\"></a>Docker 基础命令</h2><h3 id=\"启动-x2F-停止-x2F-重启-x2F-杀掉容器\"><a href=\"#启动-x2F-停止-x2F-重启-x2F-杀掉容器\" class=\"headerlink\" title=\"启动&#x2F;停止&#x2F;重启&#x2F;杀掉容器\"></a>启动&#x2F;停止&#x2F;重启&#x2F;杀掉容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker start&#x2F;stop&#x2F;restart&#x2F;kill\n\n实例操作如下：\n$ docker start myweb\n$ docker stop myweb\n$ docker restart myweb\n$ docker kill -s kill myweb\n参数 -s  #向容器发送信号</code></pre>\n\n<h3 id=\"创建并启动一个新的容器\"><a href=\"#创建并启动一个新的容器\" class=\"headerlink\" title=\"创建并启动一个新的容器\"></a>创建并启动一个新的容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run\n常用参数如下：\n-d #后台运行容器，并返回容器ID\n-i #以交互式模式运行容器，常与-t参数同时使用\n-t #给容器重新分配一个伪终端，常与-i参数同时使用\n–name #给容器指定一个名称\n-m #指定容器使用内存的最大值\n–net #指定容器使用的网络类型\n–link #链接到另一个容器\n\n实例操作如下：\n$ docker run -d --name nginx nginx:latest\n#后台启动并运行一个名为nginx的容器，运行前它会自动去docker镜像站点下载最新的镜像文件\n$ docker run -d -P 80:80 nginx:latest\n#后台启动并运名为nginx的容器，然后将容器的80端口映射到物理机的80端口\n$ docker run -d -v &#x2F;docker&#x2F;data:&#x2F;docker&#x2F;data -P 80:80 nginx:latest\n#后台启动并运名为nginx的容器，然后将容器的80端口映射到物理机的80端口,并且将物理机的&#x2F;docker&#x2F;data目录映射到容器的&#x2F;docker&#x2F;data\n$ docker run -it  nginx:latest &#x2F;bin&#x2F;bash\n#以交互式模式运行容器，然后在容器内执行&#x2F;bin&#x2F;bash命令</code></pre>\n\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rm\n常用参数如下：\n-f #强制删除一个运行中的容器\n-l #删除指定的链接\n-v #删除与容器关联和卷\n\n实例操作如下：\n$ docker rm -f mydocker\n强制删除容器mydocker\n$ docker rm -f dockerA dockerB\n强制删除容器dockerA，dockerB\n$ docker rm -v mydocker****\n删除容器，并删除容器挂载的数据卷</code></pre>\n\n<h3 id=\"创建一个新的容器但不启动它\"><a href=\"#创建一个新的容器但不启动它\" class=\"headerlink\" title=\"创建一个新的容器但不启动它\"></a>创建一个新的容器但不启动它</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker create\n$ docker create --name myserver nginx:latest\n09b93464c2f75b7b69f83d56a9cfc23ceb50a48a9db7652ee4c27e3e2cb1961f\n#创建一个名为myserver的容器</code></pre>\n\n<h3 id=\"在运行的容器中执行命令\"><a href=\"#在运行的容器中执行命令\" class=\"headerlink\" title=\"在运行的容器中执行命令\"></a>在运行的容器中执行命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker exec\n常用参数如下：\n-d #在后台运行\n-i #保持STDIN打开\n-t #分配一个伪终端\n\n实例操作如下：\n$ docker exec -it mydocker &#x2F;bin&#x2F;sh &#x2F;server&#x2F;scripts&#x2F;docker.sh\nhello world\n以交互模式执行容器中的&#x2F;server&#x2F;scripts&#x2F;docker.sh脚本\n$ docker exec -it mydocker &#x2F;bin&#x2F;sh\n以交互模式给容器分配一个伪终端连接</code></pre>\n\n<h3 id=\"列出容器（正在运行）\"><a href=\"#列出容器（正在运行）\" class=\"headerlink\" title=\"列出容器（正在运行）\"></a>列出容器（正在运行）</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker ps\n常用参数如下：\n-a #列出所有容器包括停止的\n-f #根据条件过滤显示内容\n-l #列出最近创建的容器\n-n #列出最近创建的N个容器，N为数字\n-q #只显示容器ID\n-s #显示总文件大小\n\n#列出最近创建的2个容器\n$ docker ps -a -q\nbd96d72ed9c7\n665563143eb7\nf2304dad5855\n9921d2660307\n显示所有容器的ID</code></pre>\n\n<h3 id=\"获取容器的元数据\"><a href=\"#获取容器的元数据\" class=\"headerlink\" title=\"获取容器的元数据\"></a>获取容器的元数据</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker inspect\n常用参数如下：\n-f #指定返回值格式或模板文件\n-s #显示总文件大小\n–type #为指定类型返回JSON\n\n$ docker inspect &lt;container id or name&gt;</code></pre>\n\n<h3 id=\"获取-docker-容器-container-的-ip-地址\"><a href=\"#获取-docker-容器-container-的-ip-地址\" class=\"headerlink\" title=\"获取 docker 容器(container)的 ip 地址\"></a>获取 docker 容器(container)的 ip 地址</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker inspect -f &#39;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#39; $(docker ps -aq)</code></pre>\n\n<h3 id=\"删除的镜像\"><a href=\"#删除的镜像\" class=\"headerlink\" title=\"删除的镜像\"></a>删除<none>的镜像</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rmi $(docker images -f &quot;dangling&#x3D;true&quot; -q)</code></pre>\n","categories":[{"name":"docker","path":"api/categories/docker.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"}]}